;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 13/8/2019 16:41:30
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x000000040B6C  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x000A28  	2600
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x000B4C  	2892
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x0008EA  	2282
0x002A	0x000CAC  	3244
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x000C82  	3202
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
0x0100	0x000000  	0
0x0102	0x000000  	0
0x0104	0x000000  	0
0x0106	0x000000  	0
0x0108	0x000000  	0
0x010A	0x000000  	0
0x010C	0x000000  	0
0x010E	0x000000  	0
0x0110	0x000000  	0
0x0112	0x000000  	0
0x0114	0x000000  	0
0x0116	0x000000  	0
0x0118	0x000000  	0
0x011A	0x000000  	0
0x011C	0x000000  	0
0x011E	0x000000  	0
0x0120	0x000000  	0
0x0122	0x000000  	0
0x0124	0x000000  	0
0x0126	0x000000  	0
0x0128	0x000000  	0
0x012A	0x000000  	0
0x012C	0x000000  	0
0x012E	0x000000  	0
0x0130	0x000000  	0
0x0132	0x000000  	0
0x0134	0x000000  	0
0x0136	0x000000  	0
0x0138	0x000000  	0
0x013A	0x000000  	0
0x013C	0x000000  	0
0x013E	0x000000  	0
0x0140	0x000000  	0
0x0142	0x000000  	0
0x0144	0x000000  	0
0x0146	0x000000  	0
0x0148	0x000000  	0
0x014A	0x000000  	0
0x014C	0x000000  	0
0x014E	0x000000  	0
0x0150	0x000000  	0
0x0152	0x000000  	0
0x0154	0x000000  	0
0x0156	0x000000  	0
0x0158	0x000000  	0
0x015A	0x000000  	0
0x015C	0x000000  	0
0x015E	0x000000  	0
0x0160	0x000000  	0
0x0162	0x000000  	0
0x0164	0x000000  	0
0x0166	0x000000  	0
0x0168	0x000000  	0
0x016A	0x000000  	0
0x016C	0x000000  	0
0x016E	0x000000  	0
0x0170	0x000000  	0
0x0172	0x000000  	0
0x0174	0x000000  	0
0x0176	0x000000  	0
0x0178	0x000000  	0
0x017A	0x000000  	0
0x017C	0x000000  	0
0x017E	0x000000  	0
0x0180	0x000000  	0
0x0182	0x000000  	0
0x0184	0x000000  	0
0x0186	0x000000  	0
0x0188	0x000000  	0
0x018A	0x000000  	0
0x018C	0x000000  	0
0x018E	0x000000  	0
0x0190	0x000000  	0
0x0192	0x000000  	0
0x0194	0x000000  	0
0x0196	0x000000  	0
0x0198	0x000000  	0
0x019A	0x000000  	0
0x019C	0x000000  	0
0x019E	0x000000  	0
0x01A0	0x000000  	0
0x01A2	0x000000  	0
0x01A4	0x000000  	0
0x01A6	0x000000  	0
0x01A8	0x000000  	0
0x01AA	0x000000  	0
0x01AC	0x000000  	0
0x01AE	0x000000  	0
0x01B0	0x000000  	0
0x01B2	0x000000  	0
0x01B4	0x000000  	0
0x01B6	0x000000  	0
0x01B8	0x000000  	0
0x01BA	0x000000  	0
0x01BC	0x000000  	0
0x01BE	0x000000  	0
0x01C0	0x000000  	0
0x01C2	0x000000  	0
0x01C4	0x000000  	0
0x01C6	0x000000  	0
0x01C8	0x000000  	0
0x01CA	0x000000  	0
0x01CC	0x000000  	0
0x01CE	0x000000  	0
0x01D0	0x000000  	0
0x01D2	0x000000  	0
0x01D4	0x000000  	0
0x01D6	0x000000  	0
0x01D8	0x000000  	0
0x01DA	0x000000  	0
0x01DC	0x000000  	0
0x01DE	0x000000  	0
0x01E0	0x000000  	0
0x01E2	0x000000  	0
0x01E4	0x000000  	0
0x01E6	0x000000  	0
0x01E8	0x000000  	0
0x01EA	0x000000  	0
0x01EC	0x000000  	0
0x01EE	0x000000  	0
0x01F0	0x000000  	0
0x01F2	0x000000  	0
0x01F4	0x000000  	0
0x01F6	0x000000  	0
0x01F8	0x000000  	0
0x01FA	0x000000  	0
0x01FC	0x000000  	0
0x01FE	0x000000  	0
_main:
0x0B6C	0x21BFAF  	MOV	#7162, W15
0x0B6E	0x27FFF0  	MOV	#32767, W0
0x0B70	0xB7A020  	MOV	WREG, SPLIM
0x0B72	0x202010  	MOV	#513, W0
0x0B74	0xB7A032  	MOV	WREG, DSRPAG
0x0B76	0x200040  	MOV	#4, W0
0x0B78	0xB72044  	IOR	CORCON
0x0B7A	0x000000020E4E  	CALL	3662
;Acelerografo.c,75 :: 		void main() {
;Acelerografo.c,77 :: 		ConfiguracionPrincipal();
0x0B7E	0x781F8A  	PUSH	W10
0x0B80	0x07FDF2  	RCALL	_ConfiguracionPrincipal
;Acelerografo.c,78 :: 		ConfigurarGPS();
0x0B82	0x07FDCD  	RCALL	_ConfigurarGPS
;Acelerografo.c,80 :: 		tasaMuestreo = 1;                                                          //1=250Hz, 2=125Hz, 4=62.5Hz, 8=31.25Hz
0x0B84	0x21BDD1  	MOV	#lo_addr(_tasaMuestreo), W1
0x0B86	0xB3C010  	MOV.B	#1, W0
0x0B88	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,81 :: 		ADXL355_init(tasaMuestreo);                                                //Inicializa el modulo ADXL con la tasa de muestreo requerida:
0x0B8A	0xB3C01A  	MOV.B	#1, W10
0x0B8C	0x07FD97  	RCALL	_ADXL355_init
;Acelerografo.c,82 :: 		numTMR1 = (tasaMuestreo*10)-1;                                             //Calcula el numero de veces que tienen que desbordarse el TMR1 para cada tasa de muestreo
0x0B8E	0x21BDD0  	MOV	#lo_addr(_tasaMuestreo), W0
0x0B90	0xFB0090  	SE	[W0], W1
0x0B92	0x2000A0  	MOV	#10, W0
0x0B94	0xB80900  	MUL.UU	W1, W0, W2
0x0B96	0x21BDE0  	MOV	#lo_addr(_numTMR1), W0
0x0B98	0x514861  	SUB.B	W2, #1, [W0]
;Acelerografo.c,84 :: 		tiempo[0] = 1;                                                            //Hora
0x0B9A	0x21BDF1  	MOV	#lo_addr(_tiempo), W1
0x0B9C	0xB3C010  	MOV.B	#1, W0
0x0B9E	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,85 :: 		tiempo[1] = 2;                                                            //Minuto
0x0BA0	0x21BE01  	MOV	#lo_addr(_tiempo+1), W1
0x0BA2	0xB3C020  	MOV.B	#2, W0
0x0BA4	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,86 :: 		tiempo[2] = 3;                                                            //Segundo
0x0BA6	0x21BE11  	MOV	#lo_addr(_tiempo+2), W1
0x0BA8	0xB3C030  	MOV.B	#3, W0
0x0BAA	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,87 :: 		tiempo[3] = 4;                                                            //Dia
0x0BAC	0x21BE21  	MOV	#lo_addr(_tiempo+3), W1
0x0BAE	0xB3C040  	MOV.B	#4, W0
0x0BB0	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,88 :: 		tiempo[4] = 5;                                                            //Mes
0x0BB2	0x21BE31  	MOV	#lo_addr(_tiempo+4), W1
0x0BB4	0xB3C050  	MOV.B	#5, W0
0x0BB6	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,89 :: 		tiempo[5] = 6;                                                            //Año
0x0BB8	0x21BE41  	MOV	#lo_addr(_tiempo+5), W1
0x0BBA	0xB3C060  	MOV.B	#6, W0
0x0BBC	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,91 :: 		banTI = 0;
0x0BBE	0x21BD11  	MOV	#lo_addr(_banTI), W1
0x0BC0	0xEF2000  	CLR	W0
0x0BC2	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,92 :: 		banLec = 0;
0x0BC4	0x21BD21  	MOV	#lo_addr(_banLec), W1
0x0BC6	0xEF2000  	CLR	W0
0x0BC8	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,93 :: 		banCiclo = 0;
0x0BCA	0x21BD31  	MOV	#lo_addr(_banCiclo), W1
0x0BCC	0xEF2000  	CLR	W0
0x0BCE	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,94 :: 		banSetReloj = 0;
0x0BD0	0x21BCE1  	MOV	#lo_addr(_banSetReloj), W1
0x0BD2	0xEF2000  	CLR	W0
0x0BD4	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,95 :: 		banSetGPS = 0;
0x0BD6	0x21BCF1  	MOV	#lo_addr(_banSetGPS), W1
0x0BD8	0xEF2000  	CLR	W0
0x0BDA	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,96 :: 		banTIGPS = 0;
0x0BDC	0x21BD01  	MOV	#lo_addr(_banTIGPS), W1
0x0BDE	0xEF2000  	CLR	W0
0x0BE0	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,97 :: 		banTFGPS = 0;
0x0BE2	0x21BD41  	MOV	#lo_addr(_banTFGPS), W1
0x0BE4	0xEF2000  	CLR	W0
0x0BE6	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,98 :: 		banTCGPS = 0;
0x0BE8	0x21BDA1  	MOV	#lo_addr(_banTCGPS), W1
0x0BEA	0xEF2000  	CLR	W0
0x0BEC	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,100 :: 		banMuestrear = 0;                                                          //Inicia el programa con esta bandera en bajo para permitir que la RPi envie la peticion de inicio de muestreo
0x0BEE	0x21BDB1  	MOV	#lo_addr(_banMuestrear), W1
0x0BF0	0xEF2000  	CLR	W0
0x0BF2	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,101 :: 		banLeer = 0;
0x0BF4	0x21BDC1  	MOV	#lo_addr(_banLeer), W1
0x0BF6	0xEF2000  	CLR	W0
0x0BF8	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,102 :: 		banConf = 0;
0x0BFA	0x21BD51  	MOV	#lo_addr(_banConf), W1
0x0BFC	0xEF2000  	CLR	W0
0x0BFE	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,104 :: 		i = 0;
0x0C00	0xEF2000  	CLR	W0
0x0C02	0x88DEB0  	MOV	W0, _i
;Acelerografo.c,105 :: 		x = 0;
0x0C04	0xEF2000  	CLR	W0
0x0C06	0x88DEC0  	MOV	W0, _x
;Acelerografo.c,106 :: 		y = 0;
0x0C08	0xEF2000  	CLR	W0
0x0C0A	0x88DF60  	MOV	W0, _y
;Acelerografo.c,107 :: 		i_gps = 0;
0x0C0C	0xEF2000  	CLR	W0
0x0C0E	0x88DF70  	MOV	W0, _i_gps
;Acelerografo.c,108 :: 		horaSistema = 0;
0x0C10	0xEF2000  	CLR	W0
0x0C12	0xEF2002  	CLR	W1
0x0C14	0x88DF80  	MOV	W0, _horaSistema
0x0C16	0x88DF91  	MOV	W1, _horaSistema+2
;Acelerografo.c,109 :: 		horaSistema = 190101;
0x0C18	0x2E6950  	MOV	#59029, W0
0x0C1A	0x200021  	MOV	#2, W1
0x0C1C	0x88DF80  	MOV	W0, _horaSistema
0x0C1E	0x88DF91  	MOV	W1, _horaSistema+2
;Acelerografo.c,110 :: 		segundoDeAjuste = (3600*tiempoDeAjuste[0]) + (60*tiempoDeAjuste[1]);       //Calcula el segundo en el que se efectuara el ajuste de hora = hh*3600 + mm*60
0x0C20	0x210360  	MOV	#lo_addr(_tiempoDeAjuste), W0
0x0C22	0xFB8090  	ZE	[W0], W1
0x0C24	0x20E100  	MOV	#3600, W0
0x0C26	0xB98101  	MUL.SS	W0, W1, W2
0x0C28	0x2003C1  	MOV	#60, W1
0x0C2A	0x210370  	MOV	#lo_addr(_tiempoDeAjuste+1), W0
0x0C2C	0xFB8010  	ZE	[W0], W0
0x0C2E	0xB98800  	MUL.SS	W1, W0, W0
0x0C30	0x410000  	ADD	W2, W0, W0
0x0C32	0xDE80CF  	ASR	W0, #15, W1
0x0C34	0x88DF30  	MOV	W0, _segundoDeAjuste
0x0C36	0x88DF41  	MOV	W1, _segundoDeAjuste+2
;Acelerografo.c,112 :: 		contMuestras = 0;
0x0C38	0x21BEA1  	MOV	#lo_addr(_contMuestras), W1
0x0C3A	0xEF2000  	CLR	W0
0x0C3C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,113 :: 		contCiclos = 0;
0x0C3E	0x21BEB1  	MOV	#lo_addr(_contCiclos), W1
0x0C40	0xEF2000  	CLR	W0
0x0C42	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,114 :: 		contFIFO = 0;
0x0C44	0xEF2000  	CLR	W0
0x0C46	0x88DFB0  	MOV	W0, _contFIFO
;Acelerografo.c,115 :: 		numFIFO = 0;
0x0C48	0x21BF81  	MOV	#lo_addr(_numFIFO), W1
0x0C4A	0xEF2000  	CLR	W0
0x0C4C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,116 :: 		numSetsFIFO = 0;
0x0C4E	0x21BF91  	MOV	#lo_addr(_numSetsFIFO), W1
0x0C50	0xEF2000  	CLR	W0
0x0C52	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,117 :: 		contTimer1 = 0;
0x0C54	0x21BF41  	MOV	#lo_addr(_contTimer1), W1
0x0C56	0xEF2000  	CLR	W0
0x0C58	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,119 :: 		byteGPS = 0;
0x0C5A	0x21BF51  	MOV	#lo_addr(_byteGPS), W1
0x0C5C	0xEF2000  	CLR	W0
0x0C5E	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,121 :: 		RP1 = 0;
0x0C60	0xA98E04  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;Acelerografo.c,122 :: 		RP2 = 0;
0x0C62	0xA98E14  	BCLR	LATB4_bit, BitPos(LATB4_bit+0)
;Acelerografo.c,124 :: 		SPI1BUF = 0x00;
0x0C64	0xEF2248  	CLR	SPI1BUF
;Acelerografo.c,126 :: 		banInicio = 1;
0x0C66	0x21BE51  	MOV	#lo_addr(_banInicio), W1
0x0C68	0xB3C010  	MOV.B	#1, W0
0x0C6A	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,128 :: 		while(1){
L_main22:
;Acelerografo.c,130 :: 		Delay_ms(500);
0x0C6C	0x2003E8  	MOV	#62, W8
0x0C6E	0x209247  	MOV	#2340, W7
L_main24:
0x0C70	0xED200E  	DEC	W7
0x0C72	0x3AFFFE  	BRA NZ	L_main24
0x0C74	0xED2010  	DEC	W8
0x0C76	0x3AFFFC  	BRA NZ	L_main24
0x0C78	0x000000  	NOP
0x0C7A	0x000000  	NOP
;Acelerografo.c,132 :: 		}
0x0C7C	0x37FFF7  	BRA	L_main22
;Acelerografo.c,134 :: 		}
L_end_main:
0x0C7E	0x78054F  	POP	W10
L__main_end_loop:
0x0C80	0x37FFFF  	BRA	L__main_end_loop
; end of _main
_ConfiguracionPrincipal:
;Acelerografo.c,143 :: 		void ConfiguracionPrincipal(){
;Acelerografo.c,146 :: 		CLKDIVbits.FRCDIV = 0;                                                     //FIN=FRC/1
0x0766	0x781F8A  	PUSH	W10
0x0768	0x781F8B  	PUSH	W11
0x076A	0x781F8C  	PUSH	W12
0x076C	0x781F8D  	PUSH	W13
0x076E	0x803A21  	MOV	CLKDIVbits, W1
0x0770	0x2F8FF0  	MOV	#63743, W0
0x0772	0x608000  	AND	W1, W0, W0
0x0774	0xB7A744  	MOV	WREG, CLKDIVbits
;Acelerografo.c,147 :: 		CLKDIVbits.PLLPOST = 0;                                                    //N2=2
0x0776	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0778	0x784090  	MOV.B	[W0], W1
0x077A	0xB3C3F0  	MOV.B	#63, W0
0x077C	0x60C080  	AND.B	W1, W0, W1
0x077E	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0780	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,148 :: 		CLKDIVbits.PLLPRE = 5;                                                     //N1=7
0x0782	0xB3C050  	MOV.B	#5, W0
0x0784	0x784080  	MOV.B	W0, W1
0x0786	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0788	0x68C090  	XOR.B	W1, [W0], W1
0x078A	0x60C0FF  	AND.B	W1, #31, W1
0x078C	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x078E	0x68C090  	XOR.B	W1, [W0], W1
0x0790	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0792	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,149 :: 		PLLFBDbits.PLLDIV = 150;                                                   //M=152
0x0794	0x200960  	MOV	#150, W0
0x0796	0x780080  	MOV	W0, W1
0x0798	0x207460  	MOV	#lo_addr(PLLFBDbits), W0
0x079A	0x688090  	XOR	W1, [W0], W1
0x079C	0x201FF0  	MOV	#511, W0
0x079E	0x608080  	AND	W1, W0, W1
0x07A0	0x207460  	MOV	#lo_addr(PLLFBDbits), W0
0x07A2	0x688090  	XOR	W1, [W0], W1
0x07A4	0x883A31  	MOV	W1, PLLFBDbits
;Acelerografo.c,152 :: 		ANSELA = 0;                                                                //Configura PORTA como digital     *
0x07A6	0xEF2E0E  	CLR	ANSELA
;Acelerografo.c,153 :: 		ANSELB = 0;                                                                //Configura PORTB como digital     *
0x07A8	0xEF2E1E  	CLR	ANSELB
;Acelerografo.c,154 :: 		TRISA3_bit = 0;                                                            //Configura el pin A3 como salida  *
0x07AA	0xA96E00  	BCLR	TRISA3_bit, BitPos(TRISA3_bit+0)
;Acelerografo.c,155 :: 		TRISA4_bit = 0;                                                            //Configura el pin A4 como salida  *
0x07AC	0xA98E00  	BCLR	TRISA4_bit, BitPos(TRISA4_bit+0)
;Acelerografo.c,156 :: 		TRISB4_bit = 0;                                                            //Configura el pin B4 como salida  *
0x07AE	0xA98E10  	BCLR	TRISB4_bit, BitPos(TRISB4_bit+0)
;Acelerografo.c,157 :: 		TRISB10_bit = 1;                                                           //Configura el pin B10 como entrada *
0x07B0	0xA84E11  	BSET	TRISB10_bit, BitPos(TRISB10_bit+0)
;Acelerografo.c,158 :: 		TRISB11_bit = 1;                                                           //Configura el pin B11 como entrada *
0x07B2	0xA86E11  	BSET	TRISB11_bit, BitPos(TRISB11_bit+0)
;Acelerografo.c,159 :: 		TRISB12_bit = 1;                                                           //Configura el pin B12 como entrada *
0x07B4	0xA88E11  	BSET	TRISB12_bit, BitPos(TRISB12_bit+0)
;Acelerografo.c,160 :: 		TRISB13_bit = 1;                                                           //Configura el pin B13 como entrada *
0x07B6	0xA8AE11  	BSET	TRISB13_bit, BitPos(TRISB13_bit+0)
;Acelerografo.c,162 :: 		INTCON2.GIE = 1;                                                           //Habilita las interrupciones globales *
0x07B8	0xA8E8C3  	BSET	INTCON2, #15
;Acelerografo.c,165 :: 		RPINR18bits.U1RXR = 0x22;                                                  //Configura el pin RB2/RPI34 como Rx1 *
0x07BA	0xB3C220  	MOV.B	#34, W0
0x07BC	0x784080  	MOV.B	W0, W1
0x07BE	0x206C40  	MOV	#lo_addr(RPINR18bits), W0
0x07C0	0x68C090  	XOR.B	W1, [W0], W1
0x07C2	0xB3C7F0  	MOV.B	#127, W0
0x07C4	0x60C080  	AND.B	W1, W0, W1
0x07C6	0x206C40  	MOV	#lo_addr(RPINR18bits), W0
0x07C8	0x68C090  	XOR.B	W1, [W0], W1
0x07CA	0x206C40  	MOV	#lo_addr(RPINR18bits), W0
0x07CC	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,166 :: 		RPOR0bits.RP35R = 0x01;                                                    //Configura el Tx1 en el pin RB3/RP35 *
0x07CE	0x201000  	MOV	#256, W0
0x07D0	0x780080  	MOV	W0, W1
0x07D2	0x206800  	MOV	#lo_addr(RPOR0bits), W0
0x07D4	0x688090  	XOR	W1, [W0], W1
0x07D6	0x23F000  	MOV	#16128, W0
0x07D8	0x608080  	AND	W1, W0, W1
0x07DA	0x206800  	MOV	#lo_addr(RPOR0bits), W0
0x07DC	0x688090  	XOR	W1, [W0], W1
0x07DE	0x883401  	MOV	W1, RPOR0bits
;Acelerografo.c,167 :: 		UART1_Init(9600);                                                          //Inicializa el UART1 con una velocidad de 9600 baudios
0x07E0	0x22580A  	MOV	#9600, W10
0x07E2	0x20000B  	MOV	#0, W11
0x07E4	0x07FDC4  	RCALL	_UART1_Init
;Acelerografo.c,168 :: 		U1RXIE_bit = 0;                                                            //Desabilita la interrupcion por UART1 RX *
0x07E6	0xA96821  	BCLR	U1RXIE_bit, BitPos(U1RXIE_bit+0)
;Acelerografo.c,170 :: 		IPC2bits.U1RXIP = 0x04;                                                    //Prioridad de la interrupcion UART1 RX
0x07E8	0x240000  	MOV	#16384, W0
0x07EA	0x780080  	MOV	W0, W1
0x07EC	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x07EE	0x688090  	XOR	W1, [W0], W1
0x07F0	0x270000  	MOV	#28672, W0
0x07F2	0x608080  	AND	W1, W0, W1
0x07F4	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x07F6	0x688090  	XOR	W1, [W0], W1
0x07F8	0x884221  	MOV	W1, IPC2bits
;Acelerografo.c,171 :: 		U1STAbits.URXISEL = 0x00;
0x07FA	0x202220  	MOV	#lo_addr(U1STAbits), W0
0x07FC	0x784090  	MOV.B	[W0], W1
0x07FE	0xB3C3F0  	MOV.B	#63, W0
0x0800	0x60C080  	AND.B	W1, W0, W1
0x0802	0x202220  	MOV	#lo_addr(U1STAbits), W0
0x0804	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,174 :: 		SPI1STAT.SPIEN = 1;                                                        //Habilita el SPI1 *
0x0806	0xA8E241  	BSET	SPI1STAT, #15
;Acelerografo.c,175 :: 		SPI1_Init_Advanced(_SPI_SLAVE, _SPI_8_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_1, _SPI_SS_ENABLE, _SPI_DATA_SAMPLE_END, _SPI_CLK_IDLE_HIGH, _SPI_ACTIVE_2_IDLE);        //*
0x0808	0x20003D  	MOV	#3, W13
0x080A	0x2001CC  	MOV	#28, W12
0x080C	0xEF2016  	CLR	W11
0x080E	0xEF2014  	CLR	W10
0x0810	0xEF2000  	CLR	W0
0x0812	0x781F80  	PUSH	W0
0x0814	0x200400  	MOV	#64, W0
0x0816	0x781F80  	PUSH	W0
0x0818	0x202000  	MOV	#512, W0
0x081A	0x781F80  	PUSH	W0
0x081C	0x200800  	MOV	#128, W0
0x081E	0x781F80  	PUSH	W0
0x0820	0x07FD8F  	RCALL	_SPI1_Init_Advanced
0x0822	0xB1008F  	SUB	#8, W15
;Acelerografo.c,176 :: 		SPI1IE_bit = 1;                                                            //Habilita la interrupcion por SPI1  *
0x0824	0xA84821  	BSET	SPI1IE_bit, BitPos(SPI1IE_bit+0)
;Acelerografo.c,177 :: 		SPI1IF_bit = 0;                                                            //Limpia la bandera de interrupcion por SPI *
0x0826	0xA94801  	BCLR	SPI1IF_bit, BitPos(SPI1IF_bit+0)
;Acelerografo.c,178 :: 		IPC2bits.SPI1IP = 0x03;                                                    //Prioridad de la interrupcion SPI1
0x0828	0x203000  	MOV	#768, W0
0x082A	0x780080  	MOV	W0, W1
0x082C	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x082E	0x688090  	XOR	W1, [W0], W1
0x0830	0x207000  	MOV	#1792, W0
0x0832	0x608080  	AND	W1, W0, W1
0x0834	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x0836	0x688090  	XOR	W1, [W0], W1
0x0838	0x884221  	MOV	W1, IPC2bits
;Acelerografo.c,181 :: 		RPINR22bits.SDI2R = 0x21;                                                  //Configura el pin RB1/RPI33 como SDI2 *
0x083A	0xB3C210  	MOV.B	#33, W0
0x083C	0x784080  	MOV.B	W0, W1
0x083E	0x206CC0  	MOV	#lo_addr(RPINR22bits), W0
0x0840	0x68C090  	XOR.B	W1, [W0], W1
0x0842	0xB3C7F0  	MOV.B	#127, W0
0x0844	0x60C080  	AND.B	W1, W0, W1
0x0846	0x206CC0  	MOV	#lo_addr(RPINR22bits), W0
0x0848	0x68C090  	XOR.B	W1, [W0], W1
0x084A	0x206CC0  	MOV	#lo_addr(RPINR22bits), W0
0x084C	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,182 :: 		RPOR2bits.RP38R = 0x08;                                                    //Configura el SDO2 en el pin RB6/RP38 *
0x084E	0xB3C080  	MOV.B	#8, W0
0x0850	0x784080  	MOV.B	W0, W1
0x0852	0x206840  	MOV	#lo_addr(RPOR2bits), W0
0x0854	0x68C090  	XOR.B	W1, [W0], W1
0x0856	0xB3C3F0  	MOV.B	#63, W0
0x0858	0x60C080  	AND.B	W1, W0, W1
0x085A	0x206840  	MOV	#lo_addr(RPOR2bits), W0
0x085C	0x68C090  	XOR.B	W1, [W0], W1
0x085E	0x206840  	MOV	#lo_addr(RPOR2bits), W0
0x0860	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,183 :: 		RPOR1bits.RP37R = 0x09;                                                    //Configura el SCK2 en el pin RB5/RP37 *
0x0862	0x209000  	MOV	#2304, W0
0x0864	0x780080  	MOV	W0, W1
0x0866	0x206820  	MOV	#lo_addr(RPOR1bits), W0
0x0868	0x688090  	XOR	W1, [W0], W1
0x086A	0x23F000  	MOV	#16128, W0
0x086C	0x608080  	AND	W1, W0, W1
0x086E	0x206820  	MOV	#lo_addr(RPOR1bits), W0
0x0870	0x688090  	XOR	W1, [W0], W1
0x0872	0x883411  	MOV	W1, RPOR1bits
;Acelerografo.c,184 :: 		SPI2STAT.SPIEN = 1;                                                        //Habilita el SPI2 *
0x0874	0xA8E261  	BSET	SPI2STAT, #15
;Acelerografo.c,185 :: 		SPI2_Init();                                                               //Inicializa el modulo SPI2
0x0876	0x07FDFC  	RCALL	_SPI2_Init
;Acelerografo.c,188 :: 		RPINR0 = 0x2E00;                                                           //Asigna INT1 al RB14/RPI46
0x0878	0x22E000  	MOV	#11776, W0
0x087A	0xB7A6A0  	MOV	WREG, RPINR0
;Acelerografo.c,189 :: 		INT1IE_bit = 0;                                                            //Habilita la interrupcion externa INT1
0x087C	0xA98822  	BCLR	INT1IE_bit, BitPos(INT1IE_bit+0)
;Acelerografo.c,190 :: 		INT1IF_bit = 0;                                                            //Limpia la bandera de interrupcion externa INT1
0x087E	0xA98802  	BCLR	INT1IF_bit, BitPos(INT1IF_bit+0)
;Acelerografo.c,191 :: 		IPC5bits.INT1IP = 0x01;                                                    //Prioridad en la interrupocion externa 1
0x0880	0xB3C010  	MOV.B	#1, W0
0x0882	0x784080  	MOV.B	W0, W1
0x0884	0x2084A0  	MOV	#lo_addr(IPC5bits), W0
0x0886	0x68C090  	XOR.B	W1, [W0], W1
0x0888	0x60C0E7  	AND.B	W1, #7, W1
0x088A	0x2084A0  	MOV	#lo_addr(IPC5bits), W0
0x088C	0x68C090  	XOR.B	W1, [W0], W1
0x088E	0x2084A0  	MOV	#lo_addr(IPC5bits), W0
0x0890	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,194 :: 		T1CON = 0x0020;
0x0892	0x200200  	MOV	#32, W0
0x0894	0xB7A104  	MOV	WREG, T1CON
;Acelerografo.c,195 :: 		T1CON.TON = 0;                                                             //Apaga el Timer1
0x0896	0xA9E105  	BCLR	T1CON, #15
;Acelerografo.c,196 :: 		T1IE_bit = 1;                                                              //Habilita la interrupción de desbordamiento TMR1
0x0898	0xA86820  	BSET	T1IE_bit, BitPos(T1IE_bit+0)
;Acelerografo.c,197 :: 		T1IF_bit = 0;                                                              //Limpia la bandera de interrupcion del TMR1
0x089A	0xA96800  	BCLR	T1IF_bit, BitPos(T1IF_bit+0)
;Acelerografo.c,198 :: 		PR1 = 62500;                                                               //Car ga el preload para un tiempo de 100ms
0x089C	0x2F4240  	MOV	#62500, W0
0x089E	0xB7A102  	MOV	WREG, PR1
;Acelerografo.c,199 :: 		IPC0bits.T1IP = 0x02;                                                      //Prioridad de la interrupcion por desbordamiento del TMR1
0x08A0	0x220000  	MOV	#8192, W0
0x08A2	0x780080  	MOV	W0, W1
0x08A4	0x208400  	MOV	#lo_addr(IPC0bits), W0
0x08A6	0x688090  	XOR	W1, [W0], W1
0x08A8	0x270000  	MOV	#28672, W0
0x08AA	0x608080  	AND	W1, W0, W1
0x08AC	0x208400  	MOV	#lo_addr(IPC0bits), W0
0x08AE	0x688090  	XOR	W1, [W0], W1
0x08B0	0x884201  	MOV	W1, IPC0bits
;Acelerografo.c,202 :: 		T2CON = 0x0020;
0x08B2	0x200200  	MOV	#32, W0
0x08B4	0xB7A110  	MOV	WREG, T2CON
;Acelerografo.c,203 :: 		T2CON.TON = 0;                                                             //Apaga el Timer2
0x08B6	0xA9E111  	BCLR	T2CON, #15
;Acelerografo.c,204 :: 		T2IE_bit = 1;                                                              //Habilita la interrupción de desbordamiento TMR2
0x08B8	0xA8E820  	BSET	T2IE_bit, BitPos(T2IE_bit+0)
;Acelerografo.c,205 :: 		T2IF_bit = 0;                                                              //Limpia la bandera de interrupcion del TMR2
0x08BA	0xA9E800  	BCLR	T2IF_bit, BitPos(T2IF_bit+0)
;Acelerografo.c,206 :: 		PR2 = 46875;                                                               //Carga el preload para un tiempo de 75ms
0x08BC	0x2B71B0  	MOV	#46875, W0
0x08BE	0xB7A10C  	MOV	WREG, PR2
;Acelerografo.c,207 :: 		IPC1bits.T2IP = 0x05;                                                      //Prioridad de la interrupcion por desbordamiento del TMR1
0x08C0	0x250000  	MOV	#20480, W0
0x08C2	0x780080  	MOV	W0, W1
0x08C4	0x208420  	MOV	#lo_addr(IPC1bits), W0
0x08C6	0x688090  	XOR	W1, [W0], W1
0x08C8	0x270000  	MOV	#28672, W0
0x08CA	0x608080  	AND	W1, W0, W1
0x08CC	0x208420  	MOV	#lo_addr(IPC1bits), W0
0x08CE	0x688090  	XOR	W1, [W0], W1
0x08D0	0x884211  	MOV	W1, IPC1bits
;Acelerografo.c,209 :: 		Delay_ms(200);                                                             //Espera hasta que se estabilicen los cambios
0x08D2	0x200198  	MOV	#25, W8
0x08D4	0x26A0E7  	MOV	#27150, W7
L_ConfiguracionPrincipal26:
0x08D6	0xED200E  	DEC	W7
0x08D8	0x3AFFFE  	BRA NZ	L_ConfiguracionPrincipal26
0x08DA	0xED2010  	DEC	W8
0x08DC	0x3AFFFC  	BRA NZ	L_ConfiguracionPrincipal26
0x08DE	0x000000  	NOP
;Acelerografo.c,211 :: 		}
L_end_ConfiguracionPrincipal:
0x08E0	0x7806CF  	POP	W13
0x08E2	0x78064F  	POP	W12
0x08E4	0x7805CF  	POP	W11
0x08E6	0x78054F  	POP	W10
0x08E8	0x060000  	RETURN
; end of _ConfiguracionPrincipal
_UART1_Init:
0x036E	0xFA0008  	LNK	#8
;__Lib_UART_12_p24_p33.c,145 :: 		
;__Lib_UART_12_p24_p33.c,148 :: 		
0x0370	0x202780  	MOV	#lo_addr(_UART1_Write), W0
0x0372	0x88DE50  	MOV	W0, _UART_Wr_Ptr
;__Lib_UART_12_p24_p33.c,149 :: 		
0x0374	0x2FFFF0  	MOV	#lo_addr(_UART1_Read), W0
0x0376	0x88DE60  	MOV	W0, _UART_Rd_Ptr
;__Lib_UART_12_p24_p33.c,150 :: 		
0x0378	0x2FFFF0  	MOV	#lo_addr(_UART1_Data_Ready), W0
0x037A	0x88DE30  	MOV	W0, _UART_Rdy_Ptr
;__Lib_UART_12_p24_p33.c,151 :: 		
0x037C	0x2FFFF0  	MOV	#lo_addr(_UART1_Tx_Idle), W0
0x037E	0x88DE40  	MOV	W0, _UART_Tx_Idle_Ptr
;__Lib_UART_12_p24_p33.c,156 :: 		
0x0380	0xEF2220  	CLR	U1MODE
;__Lib_UART_12_p24_p33.c,157 :: 		
0x0382	0x280000  	MOV	#32768, W0
0x0384	0xB7A222  	MOV	WREG, U1STA
;__Lib_UART_12_p24_p33.c,161 :: 		
0x0386	0xA96220  	BCLR	U1MODE, #3
;__Lib_UART_12_p24_p33.c,162 :: 		
0x0388	0x07FFB3  	RCALL	_Get_Fosc_kHz
; tmp start address is: 4 (W2)
0x038A	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,164 :: 		
0x038C	0x203E80  	MOV	#1000, W0
0x038E	0x200001  	MOV	#0, W1
0x0390	0x07FF37  	RCALL	__Multiply_32x32
0x0392	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,166 :: 		
0x0394	0x07FFB0  	RCALL	_Get_Fosc_Per_Cyc
0x0396	0xDE0041  	LSR	W0, #1, W0
0x0398	0x400064  	ADD	W0, #4, W0
0x039A	0x780080  	MOV	W0, W1
0x039C	0x470060  	ADD	W14, #0, W0
0x039E	0xBE880A  	MOV.D	W10, [W0]
L__UART1_Init83:
0x03A0	0xE90081  	DEC	W1, W1
0x03A2	0x350003  	BRA LT	L__UART1_Init84
0x03A4	0xD01810  	SL	[W0], [W0++]
0x03A6	0xD29010  	RLC	[W0], [W0--]
0x03A8	0x37FFFB  	BRA	L__UART1_Init83
L__UART1_Init84:
;__Lib_UART_12_p24_p33.c,168 :: 		
0x03AA	0xBE9F82  	PUSH.D	W2
0x03AC	0xBE9F8A  	PUSH.D	W10
0x03AE	0xBE0002  	MOV.D	W2, W0
0x03B0	0x90010E  	MOV	[W14+0], W2
0x03B2	0x90019E  	MOV	[W14+2], W3
0x03B4	0xEB0200  	CLR	W4
0x03B6	0x07FF34  	RCALL	__Modulus_32x32
0x03B8	0xBE054F  	POP.D	W10
0x03BA	0xBE014F  	POP.D	W2
0x03BC	0x980720  	MOV	W0, [W14+4]
0x03BE	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_12_p24_p33.c,169 :: 		
0x03C0	0xBE9F8A  	PUSH.D	W10
; tmp end address is: 4 (W2)
0x03C2	0xBE0002  	MOV.D	W2, W0
0x03C4	0x90010E  	MOV	[W14+0], W2
0x03C6	0x90019E  	MOV	[W14+2], W3
0x03C8	0xEB0200  	CLR	W4
0x03CA	0x07FF5D  	RCALL	__Divide_32x32
0x03CC	0xBE054F  	POP.D	W10
; tmp start address is: 6 (W3)
0x03CE	0x780180  	MOV	W0, W3
0x03D0	0x780201  	MOV	W1, W4
;__Lib_UART_12_p24_p33.c,171 :: 		
0x03D2	0x470060  	ADD	W14, #0, W0
0x03D4	0xD10150  	LSR	[++W0], W2
0x03D6	0xD380C0  	RRC	[--W0], W1
0x03D8	0x470064  	ADD	W14, #4, W0
0x03DA	0xE10830  	CP	W1, [W0++]
0x03DC	0xE19020  	CPB	W2, [W0--]
0x03DE	0x310007  	BRA GEU	L__UART1_Init62
L__UART1_Init85:
;__Lib_UART_12_p24_p33.c,172 :: 		
0x03E0	0x418061  	ADD	W3, #1, W0
0x03E2	0x4A00E0  	ADDC	W4, #0, W1
; tmp end address is: 6 (W3)
; tmp start address is: 10 (W5)
0x03E4	0x780280  	MOV	W0, W5
0x03E6	0x780301  	MOV	W1, W6
; tmp end address is: 10 (W5)
0x03E8	0x780105  	MOV	W5, W2
0x03EA	0x780186  	MOV	W6, W3
0x03EC	0x370002  	BRA	L_UART1_Init13
L__UART1_Init62:
;__Lib_UART_12_p24_p33.c,171 :: 		
0x03EE	0x780103  	MOV	W3, W2
0x03F0	0x780184  	MOV	W4, W3
;__Lib_UART_12_p24_p33.c,172 :: 		
L_UART1_Init13:
;__Lib_UART_12_p24_p33.c,175 :: 		
; tmp start address is: 4 (W2)
0x03F2	0x718002  	IOR	W3, W2, W0
0x03F4	0x3A0033  	BRA NZ	L__UART1_Init64
L__UART1_Init86:
; tmp end address is: 4 (W2)
;__Lib_UART_12_p24_p33.c,177 :: 		
0x03F6	0x07FF7C  	RCALL	_Get_Fosc_kHz
; tmp start address is: 4 (W2)
0x03F8	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,179 :: 		
0x03FA	0x203E80  	MOV	#1000, W0
0x03FC	0x200001  	MOV	#0, W1
0x03FE	0x07FF00  	RCALL	__Multiply_32x32
0x0400	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,181 :: 		
0x0402	0x07FF79  	RCALL	_Get_Fosc_Per_Cyc
0x0404	0xDE0041  	LSR	W0, #1, W0
0x0406	0xECA000  	INC2	W0
0x0408	0x780080  	MOV	W0, W1
0x040A	0x470060  	ADD	W14, #0, W0
0x040C	0xBE880A  	MOV.D	W10, [W0]
L__UART1_Init87:
0x040E	0xE90081  	DEC	W1, W1
0x0410	0x350003  	BRA LT	L__UART1_Init88
0x0412	0xD01810  	SL	[W0], [W0++]
0x0414	0xD29010  	RLC	[W0], [W0--]
0x0416	0x37FFFB  	BRA	L__UART1_Init87
L__UART1_Init88:
;__Lib_UART_12_p24_p33.c,183 :: 		
0x0418	0xBE9F82  	PUSH.D	W2
0x041A	0xBE0002  	MOV.D	W2, W0
0x041C	0x90010E  	MOV	[W14+0], W2
0x041E	0x90019E  	MOV	[W14+2], W3
0x0420	0xEB0200  	CLR	W4
0x0422	0x07FEFE  	RCALL	__Modulus_32x32
0x0424	0xBE014F  	POP.D	W2
0x0426	0x980720  	MOV	W0, [W14+4]
0x0428	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_12_p24_p33.c,184 :: 		
0x042A	0xBE0002  	MOV.D	W2, W0
0x042C	0x90010E  	MOV	[W14+0], W2
0x042E	0x90019E  	MOV	[W14+2], W3
0x0430	0xEB0200  	CLR	W4
0x0432	0x07FF29  	RCALL	__Divide_32x32
; tmp end address is: 4 (W2)
; tmp start address is: 6 (W3)
0x0434	0x780180  	MOV	W0, W3
0x0436	0x780201  	MOV	W1, W4
;__Lib_UART_12_p24_p33.c,186 :: 		
0x0438	0x470060  	ADD	W14, #0, W0
0x043A	0xD10150  	LSR	[++W0], W2
0x043C	0xD380C0  	RRC	[--W0], W1
0x043E	0x470064  	ADD	W14, #4, W0
0x0440	0xE10830  	CP	W1, [W0++]
0x0442	0xE19020  	CPB	W2, [W0--]
0x0444	0x310007  	BRA GEU	L__UART1_Init63
L__UART1_Init89:
;__Lib_UART_12_p24_p33.c,187 :: 		
0x0446	0x418061  	ADD	W3, #1, W0
0x0448	0x4A00E0  	ADDC	W4, #0, W1
; tmp end address is: 6 (W3)
; tmp start address is: 10 (W5)
0x044A	0x780280  	MOV	W0, W5
0x044C	0x780301  	MOV	W1, W6
; tmp end address is: 10 (W5)
0x044E	0x780105  	MOV	W5, W2
0x0450	0x780186  	MOV	W6, W3
0x0452	0x370002  	BRA	L_UART1_Init15
L__UART1_Init63:
;__Lib_UART_12_p24_p33.c,186 :: 		
0x0454	0x780103  	MOV	W3, W2
0x0456	0x780184  	MOV	W4, W3
;__Lib_UART_12_p24_p33.c,187 :: 		
L_UART1_Init15:
;__Lib_UART_12_p24_p33.c,189 :: 		
; tmp start address is: 4 (W2)
0x0458	0xA86220  	BSET	U1MODE, #3
; tmp end address is: 4 (W2)
;__Lib_UART_12_p24_p33.c,190 :: 		
0x045A	0x370000  	BRA	L_UART1_Init14
L__UART1_Init64:
;__Lib_UART_12_p24_p33.c,175 :: 		
;__Lib_UART_12_p24_p33.c,190 :: 		
L_UART1_Init14:
;__Lib_UART_12_p24_p33.c,192 :: 		
; tmp start address is: 4 (W2)
0x045C	0x510061  	SUB	W2, #1, W0
0x045E	0x5980E0  	SUBB	W3, #0, W1
; tmp end address is: 4 (W2)
; tmp start address is: 0 (W0)
0x0460	0x881140  	MOV	W0, U1BRG
; tmp end address is: 0 (W0)
;__Lib_UART_12_p24_p33.c,195 :: 		
0x0462	0xA92222  	BCLR	U1STA, #1
;__Lib_UART_12_p24_p33.c,197 :: 		
0x0464	0xA8E221  	BSET	U1MODE, #15
;__Lib_UART_12_p24_p33.c,198 :: 		
0x0466	0xA84223  	BSET	U1STA, #10
;__Lib_UART_12_p24_p33.c,200 :: 		
0x0468	0x07FED4  	RCALL	_Delay_100ms
0x046A	0x07FED3  	RCALL	_Delay_100ms
;__Lib_UART_12_p24_p33.c,202 :: 		
L_end_UART1_Init:
0x046C	0xFA8000  	ULNK
0x046E	0x060000  	RETURN
; end of _UART1_Init
_Get_Fosc_kHz:
;__Lib_Delays.c,38 :: 		unsigned long Get_Fosc_kHz() {
;__Lib_Delays.c,39 :: 		return Clock_kHz();
0x02F0	0x238800  	MOV	#14464, W0
0x02F2	0x200011  	MOV	#1, W1
;__Lib_Delays.c,40 :: 		}
L_end_Get_Fosc_kHz:
0x02F4	0x060000  	RETURN
; end of _Get_Fosc_kHz
_Get_Fosc_Per_Cyc:
;__Lib_Delays.c,63 :: 		unsigned int Get_Fosc_Per_Cyc() {
;__Lib_Delays.c,64 :: 		return __FOSC_PER_CYC;
0x02F6	0x200020  	MOV	#2, W0
;__Lib_Delays.c,65 :: 		}
L_end_Get_Fosc_Per_Cyc:
0x02F8	0x060000  	RETURN
; end of _Get_Fosc_Per_Cyc
_Delay_100ms:
;__Lib_Delays.c,666 :: 		void Delay_100ms()
;__Lib_Delays.c,668 :: 		Delay_ms(100);
0x0212	0x2000D8  	MOV	#13, W8
0x0214	0x235077  	MOV	#13575, W7
L_Delay_100ms33:
0x0216	0xED200E  	DEC	W7
0x0218	0x3AFFFE  	BRA NZ	L_Delay_100ms33
0x021A	0xED2010  	DEC	W8
0x021C	0x3AFFFC  	BRA NZ	L_Delay_100ms33
;__Lib_Delays.c,669 :: 		}
L_end_Delay_100ms:
0x021E	0x060000  	RETURN
; end of _Delay_100ms
__Multiply_32x32:
0x0200	0xFA0000  	LNK	#0
;__Lib_Math.c,43 :: 		
;__Lib_Math.c,46 :: 		
0x0202	0xB80A02  	MUL.UU	W1, W2, W4
;__Lib_Math.c,47 :: 		
0x0204	0x880050  	MOV	W0, W5
;__Lib_Math.c,48 :: 		
0x0206	0xB80002  	MUL.UU	W0, W2, W0
;__Lib_Math.c,49 :: 		
0x0208	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,50 :: 		
0x020A	0xB82A03  	MUL.UU	W5, W3, W4
;__Lib_Math.c,51 :: 		
0x020C	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,54 :: 		
L_end__Multiply_32x32:
0x020E	0xFA8000  	ULNK
0x0210	0x060000  	RETURN
; end of __Multiply_32x32
__Modulus_32x32:
0x0220	0xFA0000  	LNK	#0
;__Lib_Math.c,162 :: 		
;__Lib_Math.c,164 :: 		
0x0222	0x070002  	RCALL	Modulus_32x32___testsus
;__Lib_Math.c,166 :: 		
0x0224	0x000000040274  	GOTO	the_end_Modulus_32x32
;__Lib_Math.c,171 :: 		
Modulus_32x32___testsus:
;__Lib_Math.c,172 :: 		
0x0228	0xE20008  	CP0	W4
;__Lib_Math.c,173 :: 		
0x022A	0x3A0002  	BRA NZ	Modulus_32x32___modsi3
;__Lib_Math.c,175 :: 		
0x022C	0x070010  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,176 :: 		
0x022E	0x060000  	RETURN
;__Lib_Math.c,178 :: 		
Modulus_32x32___modsi3:
;__Lib_Math.c,179 :: 		
0x0230	0x781F81  	MOV	W1, [W15++]
;__Lib_Math.c,180 :: 		
0x0232	0xE20002  	CP0	W1
;__Lib_Math.c,181 :: 		
0x0234	0x3D0002  	BRA GE	Modulus_32x32_modtestb
;__Lib_Math.c,182 :: 		
0x0236	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,183 :: 		
0x0238	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,184 :: 		
Modulus_32x32_modtestb:
;__Lib_Math.c,185 :: 		
0x023A	0xE20006  	CP0	W3
;__Lib_Math.c,186 :: 		
0x023C	0x3D0002  	BRA GE	Modulus_32x32_calcrem
;__Lib_Math.c,187 :: 		
0x023E	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,188 :: 		
0x0240	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,189 :: 		
Modulus_32x32_calcrem:
;__Lib_Math.c,190 :: 		
0x0242	0x070005  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,191 :: 		
0x0244	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,192 :: 		
0x0246	0x3B0002  	BRA NN	Modulus_32x32_exitr
;__Lib_Math.c,193 :: 		
0x0248	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,194 :: 		
0x024A	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,195 :: 		
Modulus_32x32_exitr:
;__Lib_Math.c,196 :: 		
0x024C	0x060000  	RETURN
;__Lib_Math.c,197 :: 		
Modulus_32x32___umodsi3:
;__Lib_Math.c,198 :: 		
0x024E	0x070002  	RCALL	Modulus_32x32___udivsi3
;__Lib_Math.c,199 :: 		
0x0250	0xBE8004  	MOV.D	W4, W0
;__Lib_Math.c,200 :: 		
0x0252	0x060000  	RETURN
;__Lib_Math.c,201 :: 		
Modulus_32x32___udivsi3:
;__Lib_Math.c,202 :: 		
0x0254	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,203 :: 		
0x0256	0x200206  	MOV	#32, W6
;__Lib_Math.c,204 :: 		
Modulus_32x32_nextbit:
;__Lib_Math.c,205 :: 		
0x0258	0xD00000  	SL	W0, W0
;__Lib_Math.c,206 :: 		
0x025A	0xD28081  	RLC	W1, W1
;__Lib_Math.c,207 :: 		
0x025C	0xD28204  	RLC	W4, W4
;__Lib_Math.c,208 :: 		
0x025E	0xD28285  	RLC	W5, W5
;__Lib_Math.c,209 :: 		
0x0260	0xA80000  	BSET	W0, #0
;__Lib_Math.c,210 :: 		
0x0262	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,211 :: 		
0x0264	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,212 :: 		
0x0266	0x3B0003  	BRA NN	Modulus_32x32_iterate
;__Lib_Math.c,213 :: 		
0x0268	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,214 :: 		
0x026A	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,215 :: 		
0x026C	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,216 :: 		
Modulus_32x32_iterate:
;__Lib_Math.c,217 :: 		
0x026E	0xE90306  	DEC	W6, W6
;__Lib_Math.c,218 :: 		
0x0270	0x3AFFF3  	BRA NZ	Modulus_32x32_nextbit
;__Lib_Math.c,219 :: 		
0x0272	0x060000  	RETURN
;__Lib_Math.c,222 :: 		
the_end_Modulus_32x32:
;__Lib_Math.c,225 :: 		
L_end__Modulus_32x32:
0x0274	0xFA8000  	ULNK
0x0276	0x060000  	RETURN
; end of __Modulus_32x32
__Divide_32x32:
0x0286	0xFA0000  	LNK	#0
;__Lib_Math.c,78 :: 		
;__Lib_Math.c,81 :: 		
0x0288	0x070002  	RCALL	Divide_32x32___testsus
;__Lib_Math.c,83 :: 		
0x028A	0x0000000402D4  	GOTO	the_end_Divide_32x32
;__Lib_Math.c,88 :: 		
Divide_32x32___testsus:
;__Lib_Math.c,89 :: 		
0x028E	0xE20008  	CP0	W4
;__Lib_Math.c,90 :: 		
0x0290	0x3A0002  	BRA NZ	Divide_32x32___divsi3
;__Lib_Math.c,92 :: 		
0x0292	0x070010  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,93 :: 		
0x0294	0x060000  	RETURN
;__Lib_Math.c,95 :: 		
Divide_32x32___divsi3:
;__Lib_Math.c,96 :: 		
0x0296	0x689F83  	XOR	W1, W3, [W15++]
;__Lib_Math.c,97 :: 		
0x0298	0xE20002  	CP0	W1
;__Lib_Math.c,98 :: 		
0x029A	0x3D0002  	BRA GE	Divide_32x32_divtestb
;__Lib_Math.c,99 :: 		
0x029C	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,100 :: 		
0x029E	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,101 :: 		
Divide_32x32_divtestb:
;__Lib_Math.c,102 :: 		
0x02A0	0xE20006  	CP0	W3
;__Lib_Math.c,103 :: 		
0x02A2	0x3D0002  	BRA GE	Divide_32x32_calcquot
;__Lib_Math.c,104 :: 		
0x02A4	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,105 :: 		
0x02A6	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,106 :: 		
Divide_32x32_calcquot:
;__Lib_Math.c,107 :: 		
0x02A8	0x070005  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,108 :: 		
0x02AA	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,109 :: 		
0x02AC	0x3B0002  	BRA NN	Divide_32x32_returnq
;__Lib_Math.c,110 :: 		
0x02AE	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,111 :: 		
0x02B0	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,112 :: 		
Divide_32x32_returnq:
;__Lib_Math.c,113 :: 		
0x02B2	0x060000  	RETURN
;__Lib_Math.c,114 :: 		
Divide_32x32___udivsi3:
;__Lib_Math.c,115 :: 		
0x02B4	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,116 :: 		
0x02B6	0x200206  	MOV	#32, W6
;__Lib_Math.c,117 :: 		
Divide_32x32_nextbit:
;__Lib_Math.c,118 :: 		
0x02B8	0xD00000  	SL	W0, W0
;__Lib_Math.c,119 :: 		
0x02BA	0xD28081  	RLC	W1, W1
;__Lib_Math.c,120 :: 		
0x02BC	0xD28204  	RLC	W4, W4
;__Lib_Math.c,121 :: 		
0x02BE	0xD28285  	RLC	W5, W5
;__Lib_Math.c,122 :: 		
0x02C0	0xA80000  	BSET	W0, #0
;__Lib_Math.c,123 :: 		
0x02C2	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,124 :: 		
0x02C4	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,125 :: 		
0x02C6	0x3B0003  	BRA NN	Divide_32x32_iterate
;__Lib_Math.c,126 :: 		
0x02C8	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,127 :: 		
0x02CA	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,128 :: 		
0x02CC	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,129 :: 		
Divide_32x32_iterate:
;__Lib_Math.c,130 :: 		
0x02CE	0xE90306  	DEC	W6, W6
;__Lib_Math.c,131 :: 		
0x02D0	0x3AFFF3  	BRA NZ	Divide_32x32_nextbit
;__Lib_Math.c,132 :: 		
0x02D2	0x060000  	RETURN
;__Lib_Math.c,135 :: 		
the_end_Divide_32x32:
;__Lib_Math.c,138 :: 		
L_end__Divide_32x32:
0x02D4	0xFA8000  	ULNK
0x02D6	0x060000  	RETURN
; end of __Divide_32x32
_SPI1_Init_Advanced:
0x0340	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,123 :: 		
; slave_select start address is: 2 (W1)
0x0342	0x97B8CE  	MOV	[W14-8], W1
; data_sample start address is: 8 (W4)
0x0344	0x97BA3E  	MOV	[W14-10], W4
; clock_idle start address is: 4 (W2)
0x0346	0x97B92E  	MOV	[W14-12], W2
; edge start address is: 6 (W3)
0x0348	0x97B99E  	MOV	[W14-14], W3
;__Lib_SPI_12.c,126 :: 		
0x034A	0xEF2240  	CLR	SPI1STAT
;__Lib_SPI_12.c,127 :: 		
0x034C	0xEF2242  	CLR	SPI1CON
;__Lib_SPI_12.c,129 :: 		
0x034E	0x2FFFF0  	MOV	#lo_addr(_SPI1_Read), W0
0x0350	0x88DE10  	MOV	W0, _SPI_Rd_Ptr
;__Lib_SPI_12.c,130 :: 		
0x0352	0x2FFFF0  	MOV	#lo_addr(_SPI1_Write), W0
0x0354	0x88DE20  	MOV	W0, _SPI_Wr_Ptr
;__Lib_SPI_12.c,132 :: 		
0x0356	0x75000B  	IOR	W10, W11, W0
0x0358	0x70000C  	IOR	W0, W12, W0
0x035A	0x70000D  	IOR	W0, W13, W0
0x035C	0x700001  	IOR	W0, W1, W0
; slave_select end address is: 2 (W1)
0x035E	0x700004  	IOR	W0, W4, W0
; data_sample end address is: 8 (W4)
;__Lib_SPI_12.c,133 :: 		
0x0360	0x700082  	IOR	W0, W2, W1
; clock_idle end address is: 4 (W2)
0x0362	0x202420  	MOV	#lo_addr(SPI1CON), W0
0x0364	0x708803  	IOR	W1, W3, [W0]
; edge end address is: 6 (W3)
;__Lib_SPI_12.c,135 :: 		
0x0366	0xA9C240  	BCLR	SPI1STAT, #6
;__Lib_SPI_12.c,136 :: 		
0x0368	0xA8E241  	BSET	SPI1STAT, #15
;__Lib_SPI_12.c,138 :: 		
L_end_SPI1_Init_Advanced:
0x036A	0xFA8000  	ULNK
0x036C	0x060000  	RETURN
; end of _SPI1_Init_Advanced
_SPI2_Init:
0x0470	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,205 :: 		
;__Lib_SPI_12.c,207 :: 		
0x0472	0x202D80  	MOV	#lo_addr(_SPI2_Read), W0
0x0474	0x88DE10  	MOV	W0, _SPI_Rd_Ptr
;__Lib_SPI_12.c,208 :: 		
0x0476	0x203380  	MOV	#lo_addr(_SPI2_Write), W0
0x0478	0x88DE20  	MOV	W0, _SPI_Wr_Ptr
;__Lib_SPI_12.c,210 :: 		
0x047A	0xEF2260  	CLR	SPI2STAT
;__Lib_SPI_12.c,211 :: 		
0x047C	0xEF2262  	CLR	SPI2CON
;__Lib_SPI_12.c,213 :: 		
0x047E	0xA8A262  	BSET	SPI2CON, #5
;__Lib_SPI_12.c,214 :: 		
0x0480	0xA9C262  	BCLR	SPI2CON, #6
;__Lib_SPI_12.c,216 :: 		
0x0482	0x2001C1  	MOV	#28, W1
0x0484	0x202620  	MOV	#lo_addr(SPI2CON), W0
0x0486	0x708810  	IOR	W1, [W0], [W0]
;__Lib_SPI_12.c,218 :: 		
0x0488	0x2FFFC1  	MOV	#65532, W1
0x048A	0x202620  	MOV	#lo_addr(SPI2CON), W0
0x048C	0x608810  	AND	W1, [W0], [W0]
;__Lib_SPI_12.c,219 :: 		
0x048E	0xA80263  	BSET	SPI2CON, #8
;__Lib_SPI_12.c,221 :: 		
0x0490	0xA9C260  	BCLR	SPI2STAT, #6
;__Lib_SPI_12.c,222 :: 		
0x0492	0xA8E261  	BSET	SPI2STAT, #15
;__Lib_SPI_12.c,224 :: 		
L_end_SPI2_Init:
0x0494	0xFA8000  	ULNK
0x0496	0x060000  	RETURN
; end of _SPI2_Init
_ConfigurarGPS:
;tiempo_gps.c,5 :: 		void ConfigurarGPS(){
;tiempo_gps.c,6 :: 		UART1_Write_Text("$PMTK605*31\r\n");
0x071E	0x781F8A  	PUSH	W10
0x0720	0x781F8B  	PUSH	W11
0x0722	0x21091A  	MOV	#lo_addr(?lstr1_Acelerografo), W10
0x0724	0x07FDEA  	RCALL	_UART1_Write_Text
;tiempo_gps.c,7 :: 		UART1_Write_Text("$PMTK220,1000*1F\r\n");
0x0726	0x21015A  	MOV	#lo_addr(?lstr2_Acelerografo), W10
0x0728	0x07FDE8  	RCALL	_UART1_Write_Text
;tiempo_gps.c,8 :: 		UART1_Write_Text("$PMTK251,115200*1F\r\n");
0x072A	0x21000A  	MOV	#lo_addr(?lstr3_Acelerografo), W10
0x072C	0x07FDE6  	RCALL	_UART1_Write_Text
;tiempo_gps.c,9 :: 		Delay_ms(1000);                                                            //Tiempo necesario para que se de efecto el cambio de configuracion
0x072E	0x2007B8  	MOV	#123, W8
0x0730	0x212497  	MOV	#4681, W7
L_ConfigurarGPS18:
0x0732	0xED200E  	DEC	W7
0x0734	0x3AFFFE  	BRA NZ	L_ConfigurarGPS18
0x0736	0xED2010  	DEC	W8
0x0738	0x3AFFFC  	BRA NZ	L_ConfigurarGPS18
;tiempo_gps.c,10 :: 		UART1_Init(115200);
0x073A	0x2C200A  	MOV	#49664, W10
0x073C	0x20001B  	MOV	#1, W11
0x073E	0x07FE17  	RCALL	_UART1_Init
;tiempo_gps.c,11 :: 		UART1_Write_Text("$PMTK313,1*2E\r\n");
0x0740	0x21048A  	MOV	#lo_addr(?lstr4_Acelerografo), W10
0x0742	0x07FDDB  	RCALL	_UART1_Write_Text
;tiempo_gps.c,12 :: 		UART1_Write_Text("$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n");
0x0744	0x21061A  	MOV	#lo_addr(?lstr5_Acelerografo), W10
0x0746	0x07FDD9  	RCALL	_UART1_Write_Text
;tiempo_gps.c,13 :: 		UART1_Write_Text("$PMTK319,1*24\r\n");
0x0748	0x2109FA  	MOV	#lo_addr(?lstr6_Acelerografo), W10
0x074A	0x07FDD7  	RCALL	_UART1_Write_Text
;tiempo_gps.c,14 :: 		UART1_Write_Text("$PMTK413*34\r\n");
0x074C	0x21028A  	MOV	#lo_addr(?lstr7_Acelerografo), W10
0x074E	0x07FDD5  	RCALL	_UART1_Write_Text
;tiempo_gps.c,15 :: 		UART1_Write_Text("$PMTK513,1*28\r\n");
0x0750	0x21038A  	MOV	#lo_addr(?lstr8_Acelerografo), W10
0x0752	0x07FDD3  	RCALL	_UART1_Write_Text
;tiempo_gps.c,16 :: 		Delay_ms(1000);
0x0754	0x2007B8  	MOV	#123, W8
0x0756	0x212497  	MOV	#4681, W7
L_ConfigurarGPS20:
0x0758	0xED200E  	DEC	W7
0x075A	0x3AFFFE  	BRA NZ	L_ConfigurarGPS20
0x075C	0xED2010  	DEC	W8
0x075E	0x3AFFFC  	BRA NZ	L_ConfigurarGPS20
;tiempo_gps.c,17 :: 		}
L_end_ConfigurarGPS:
0x0760	0x7805CF  	POP	W11
0x0762	0x78054F  	POP	W10
0x0764	0x060000  	RETURN
; end of _ConfigurarGPS
_UART1_Write_Text:
0x02FA	0xFA0000  	LNK	#0
;__Lib_UART_12_p24_p33.c,76 :: 		
;__Lib_UART_12_p24_p33.c,77 :: 		
; counter start address is: 2 (W1)
0x02FC	0xEF2002  	CLR	W1
;__Lib_UART_12_p24_p33.c,79 :: 		
; data_ start address is: 0 (W0)
0x02FE	0x78401A  	MOV.B	[W10], W0
; counter end address is: 2 (W1)
; data_ end address is: 0 (W0)
;__Lib_UART_12_p24_p33.c,80 :: 		
L_UART1_Write_Text2:
; data_ start address is: 0 (W0)
; counter start address is: 2 (W1)
0x0300	0xE10460  	CP.B	W0, #0
0x0302	0x32000A  	BRA Z	L_UART1_Write_Text3
L__UART1_Write_Text71:
;__Lib_UART_12_p24_p33.c,81 :: 		
0x0304	0x781F8A  	PUSH	W10
; data_ end address is: 0 (W0)
0x0306	0xFB8500  	ZE	W0, W10
0x0308	0x07FFB7  	RCALL	_UART1_Write
0x030A	0x78054F  	POP	W10
;__Lib_UART_12_p24_p33.c,82 :: 		
0x030C	0x40C061  	ADD.B	W1, #1, W0
0x030E	0x784080  	MOV.B	W0, W1
;__Lib_UART_12_p24_p33.c,83 :: 		
0x0310	0xFB8000  	ZE	W0, W0
0x0312	0x450000  	ADD	W10, W0, W0
; data_ start address is: 0 (W0)
0x0314	0x784010  	MOV.B	[W0], W0
;__Lib_UART_12_p24_p33.c,84 :: 		
; counter end address is: 2 (W1)
; data_ end address is: 0 (W0)
0x0316	0x37FFF4  	BRA	L_UART1_Write_Text2
L_UART1_Write_Text3:
;__Lib_UART_12_p24_p33.c,85 :: 		
L_end_UART1_Write_Text:
0x0318	0xFA8000  	ULNK
0x031A	0x060000  	RETURN
; end of _UART1_Write_Text
_UART1_Write:
0x0278	0xFA0000  	LNK	#0
;__Lib_UART_12_p24_p33.c,70 :: 		
;__Lib_UART_12_p24_p33.c,71 :: 		
L_UART1_Write0:
0x027A	0xAF0223  	BTSC	U1STA, #8
0x027C	0x370001  	BRA	L_UART1_Write1
0x027E	0x37FFFD  	BRA	L_UART1_Write0
L_UART1_Write1:
;__Lib_UART_12_p24_p33.c,72 :: 		
0x0280	0x88112A  	MOV	W10, U1TXREG
;__Lib_UART_12_p24_p33.c,73 :: 		
L_end_UART1_Write:
0x0282	0xFA8000  	ULNK
0x0284	0x060000  	RETURN
; end of _UART1_Write
_ADXL355_init:
;adxl355_spi.c,106 :: 		void ADXL355_init(short tMuestreo){
;adxl355_spi.c,107 :: 		ADXL355_write_byte(Reset,0x52);                                             //Resetea el dispositivo
0x06BC	0x781F8A  	PUSH	W10
0x06BE	0x781F8B  	PUSH	W11
0x06C0	0x781F8A  	PUSH	W10
0x06C2	0xB3C52B  	MOV.B	#82, W11
0x06C4	0xB3C2FA  	MOV.B	#47, W10
0x06C6	0x07FE2A  	RCALL	_ADXL355_write_byte
;adxl355_spi.c,108 :: 		Delay_ms(10);
0x06C8	0x200028  	MOV	#2, W8
0x06CA	0x238807  	MOV	#14464, W7
L_ADXL355_init0:
0x06CC	0xED200E  	DEC	W7
0x06CE	0x3AFFFE  	BRA NZ	L_ADXL355_init0
0x06D0	0xED2010  	DEC	W8
0x06D2	0x3AFFFC  	BRA NZ	L_ADXL355_init0
0x06D4	0x000000  	NOP
0x06D6	0x000000  	NOP
;adxl355_spi.c,109 :: 		ADXL355_write_byte(POWER_CTL, DRDY_OFF|STANDBY);
0x06D8	0xB3C05B  	MOV.B	#5, W11
0x06DA	0xB3C2DA  	MOV.B	#45, W10
0x06DC	0x07FE1F  	RCALL	_ADXL355_write_byte
;adxl355_spi.c,110 :: 		ADXL355_write_byte(Range, _2G);
0x06DE	0xB3C01B  	MOV.B	#1, W11
0x06E0	0xB3C2CA  	MOV.B	#44, W10
0x06E2	0x07FE1C  	RCALL	_ADXL355_write_byte
0x06E4	0x78054F  	POP	W10
;adxl355_spi.c,111 :: 		switch (tMuestreo){
0x06E6	0x370010  	BRA	L_ADXL355_init2
;adxl355_spi.c,112 :: 		case 1:
L_ADXL355_init4:
;adxl355_spi.c,113 :: 		ADXL355_write_byte(Filter, NO_HIGH_PASS_FILTER|_62_5_Hz);       //ODR=250Hz 1
0x06E8	0xB3C04B  	MOV.B	#4, W11
0x06EA	0xB3C28A  	MOV.B	#40, W10
0x06EC	0x07FE17  	RCALL	_ADXL355_write_byte
;adxl355_spi.c,114 :: 		break;
0x06EE	0x370014  	BRA	L_ADXL355_init3
;adxl355_spi.c,115 :: 		case 2:
L_ADXL355_init5:
;adxl355_spi.c,116 :: 		ADXL355_write_byte(Filter, NO_HIGH_PASS_FILTER|_31_25_Hz);      //ODR=125Hz 2
0x06F0	0xB3C05B  	MOV.B	#5, W11
0x06F2	0xB3C28A  	MOV.B	#40, W10
0x06F4	0x07FE13  	RCALL	_ADXL355_write_byte
;adxl355_spi.c,117 :: 		break;
0x06F6	0x370010  	BRA	L_ADXL355_init3
;adxl355_spi.c,118 :: 		case 4:
L_ADXL355_init6:
;adxl355_spi.c,119 :: 		ADXL355_write_byte(Filter, NO_HIGH_PASS_FILTER|_15_625_Hz);     //ODR=62.5Hz 4
0x06F8	0xB3C06B  	MOV.B	#6, W11
0x06FA	0xB3C28A  	MOV.B	#40, W10
0x06FC	0x07FE0F  	RCALL	_ADXL355_write_byte
;adxl355_spi.c,120 :: 		break;
0x06FE	0x37000C  	BRA	L_ADXL355_init3
;adxl355_spi.c,121 :: 		case 8:
L_ADXL355_init7:
;adxl355_spi.c,122 :: 		ADXL355_write_byte(Filter, NO_HIGH_PASS_FILTER|_7_813_Hz );     //ODR=31.25Hz 8
0x0700	0xB3C07B  	MOV.B	#7, W11
0x0702	0xB3C28A  	MOV.B	#40, W10
0x0704	0x07FE0B  	RCALL	_ADXL355_write_byte
;adxl355_spi.c,123 :: 		break;
0x0706	0x370008  	BRA	L_ADXL355_init3
;adxl355_spi.c,124 :: 		}
L_ADXL355_init2:
0x0708	0xE15461  	CP.B	W10, #1
0x070A	0x32FFEE  	BRA Z	L_ADXL355_init4
L__ADXL355_init148:
0x070C	0xE15462  	CP.B	W10, #2
0x070E	0x32FFF0  	BRA Z	L_ADXL355_init5
L__ADXL355_init149:
0x0710	0xE15464  	CP.B	W10, #4
0x0712	0x32FFF2  	BRA Z	L_ADXL355_init6
L__ADXL355_init150:
0x0714	0xE15468  	CP.B	W10, #8
0x0716	0x32FFF4  	BRA Z	L_ADXL355_init7
L__ADXL355_init151:
L_ADXL355_init3:
;adxl355_spi.c,125 :: 		}
L_end_ADXL355_init:
0x0718	0x7805CF  	POP	W11
0x071A	0x78054F  	POP	W10
0x071C	0x060000  	RETURN
; end of _ADXL355_init
_ADXL355_write_byte:
;adxl355_spi.c,128 :: 		void ADXL355_write_byte(unsigned char address, unsigned char value){
;adxl355_spi.c,129 :: 		address = (address<<1)&0xFE;
0x031C	0x781F8A  	PUSH	W10
0x031E	0xFB800A  	ZE	W10, W0
0x0320	0xDD00C1  	SL	W0, #1, W1
0x0322	0x200FE0  	MOV	#254, W0
0x0324	0x608000  	AND	W1, W0, W0
0x0326	0x784500  	MOV.B	W0, W10
;adxl355_spi.c,130 :: 		CS_ADXL355=0;
0x0328	0xA96E04  	BCLR	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,131 :: 		SPI2_Write(address);
0x032A	0xFB8500  	ZE	W0, W10
0x032C	0x070005  	RCALL	_SPI2_Write
;adxl355_spi.c,132 :: 		SPI2_Write(value);
0x032E	0xFB850B  	ZE	W11, W10
0x0330	0x070003  	RCALL	_SPI2_Write
;adxl355_spi.c,133 :: 		CS_ADXL355=1;
0x0332	0xA86E04  	BSET	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,134 :: 		}
L_end_ADXL355_write_byte:
0x0334	0x78054F  	POP	W10
0x0336	0x060000  	RETURN
; end of _ADXL355_write_byte
_SPI2_Write:
0x0338	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,175 :: 		
;__Lib_SPI_12.c,176 :: 		
0x033A	0x07FFCE  	RCALL	_SPI2_Read
;__Lib_SPI_12.c,183 :: 		
L_end_SPI2_Write:
0x033C	0xFA8000  	ULNK
0x033E	0x060000  	RETURN
; end of _SPI2_Write
_SPI2_Read:
0x02D8	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,163 :: 		
;__Lib_SPI_12.c,165 :: 		
0x02DA	0xA9C260  	BCLR	SPI2STAT, #6
;__Lib_SPI_12.c,167 :: 		
L_SPI2_Read4:
0x02DC	0xAE2260  	BTSS	SPI2STAT, #1
0x02DE	0x370001  	BRA	L_SPI2_Read5
0x02E0	0x37FFFD  	BRA	L_SPI2_Read4
L_SPI2_Read5:
;__Lib_SPI_12.c,168 :: 		
0x02E2	0x88134A  	MOV	W10, SPI2BUF
;__Lib_SPI_12.c,169 :: 		
L_SPI2_Read6:
0x02E4	0xAF0260  	BTSC	SPI2STAT, #0
0x02E6	0x370001  	BRA	L_SPI2_Read7
0x02E8	0x37FFFD  	BRA	L_SPI2_Read6
L_SPI2_Read7:
;__Lib_SPI_12.c,171 :: 		
0x02EA	0xBF8268  	MOV	SPI2BUF, WREG
;__Lib_SPI_12.c,173 :: 		
L_end_SPI2_Read:
0x02EC	0xFA8000  	ULNK
0x02EE	0x060000  	RETURN
; end of _SPI2_Read
0x0E4E	0x210001  	MOV	#lo_addr(?lstr3_Acelerografo), W1
0x0E50	0x280000  	MOV	#32768, W0
0x0E52	0x090056  	REPEAT	#86
0x0E54	0x7818B0  	MOV	[W0++], [W1++]
0x0E56	0x7858B0  	MOV.B	[W0++], [W1++]
0x0E58	0x060000  	RETURN
_int_1:
0x0C82	0xF80034  	PUSH	DSWPAG
0x0C84	0xF80032  	PUSH	DSRPAG
0x0C86	0xF80036  	PUSH	RCOUNT
0x0C88	0x781F80  	PUSH	W0
0x0C8A	0x200020  	MOV	#2, W0
0x0C8C	0x09000C  	REPEAT	#12
0x0C8E	0x781FB0  	PUSH	[W0++]
;Acelerografo.c,352 :: 		void int_1() org IVT_ADDR_INT1INTERRUPT {
;Acelerografo.c,354 :: 		INT1IF_bit = 0;                                                            //Limpia la bandera de interrupcion externa INT1
0x0C90	0xA98802  	BCLR	INT1IF_bit, BitPos(INT1IF_bit+0)
;Acelerografo.c,356 :: 		if (banInicio==1){
0x0C92	0x21BE50  	MOV	#lo_addr(_banInicio), W0
0x0C94	0x784010  	MOV.B	[W0], W0
0x0C96	0xE10461  	CP.B	W0, #1
0x0C98	0x3A0001  	BRA NZ	L_int_171
L__int_1193:
;Acelerografo.c,357 :: 		Muestrear();
0x0C9A	0x07FBFE  	RCALL	_Muestrear
;Acelerografo.c,358 :: 		}
L_int_171:
;Acelerografo.c,360 :: 		}
L_end_int_1:
0x0C9C	0x2001A0  	MOV	#26, W0
0x0C9E	0x09000C  	REPEAT	#12
0x0CA0	0x78104F  	POP	[W0--]
0x0CA2	0x78004F  	POP	W0
0x0CA4	0xF90036  	POP	RCOUNT
0x0CA6	0xF90032  	POP	DSRPAG
0x0CA8	0xF90034  	POP	DSWPAG
0x0CAA	0x064000  	RETFIE
; end of _int_1
_Muestrear:
;Acelerografo.c,216 :: 		void Muestrear(){
;Acelerografo.c,218 :: 		if (banCiclo==0){
0x0498	0x781F8A  	PUSH	W10
0x049A	0x781F8B  	PUSH	W11
0x049C	0x21BD30  	MOV	#lo_addr(_banCiclo), W0
0x049E	0x784010  	MOV.B	[W0], W0
0x04A0	0xE10460  	CP.B	W0, #0
0x04A2	0x3A0005  	BRA NZ	L_Muestrear28
L__Muestrear167:
;Acelerografo.c,220 :: 		ADXL355_write_byte(POWER_CTL, DRDY_OFF|STANDBY);                       //Coloco el ADXL en modo STANDBY para pausar las conversiones y limpiar el FIFO
0x04A4	0xB3C05B  	MOV.B	#5, W11
0x04A6	0xB3C2DA  	MOV.B	#45, W10
0x04A8	0x07FF39  	RCALL	_ADXL355_write_byte
;Acelerografo.c,221 :: 		T1CON.TON = 1;                                                         //Enciende el Timer1
0x04AA	0xA8E105  	BSET	T1CON, #15
;Acelerografo.c,223 :: 		} else if (banCiclo==1) {
0x04AC	0x370097  	BRA	L_Muestrear29
L_Muestrear28:
0x04AE	0x21BD30  	MOV	#lo_addr(_banCiclo), W0
0x04B0	0x784010  	MOV.B	[W0], W0
0x04B2	0xE10461  	CP.B	W0, #1
0x04B4	0x3A0093  	BRA NZ	L_Muestrear30
L__Muestrear168:
;Acelerografo.c,225 :: 		banCiclo = 2;                                                          //Limpia la bandera de ciclo completo
0x04B6	0x21BD31  	MOV	#lo_addr(_banCiclo), W1
0x04B8	0xB3C020  	MOV.B	#2, W0
0x04BA	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,227 :: 		tramaCompleta[0] = contCiclos;                                         //LLena el primer elemento de la tramaCompleta con el contador de ciclos
0x04BC	0x210AF1  	MOV	#lo_addr(_tramaCompleta), W1
0x04BE	0x21BEB0  	MOV	#lo_addr(_contCiclos), W0
0x04C0	0x784890  	MOV.B	[W0], [W1]
;Acelerografo.c,228 :: 		numFIFO = ADXL355_read_byte(FIFO_ENTRIES);
0x04C2	0xB3C05A  	MOV.B	#5, W10
0x04C4	0x0700EE  	RCALL	_ADXL355_read_byte
0x04C6	0x21BF81  	MOV	#lo_addr(_numFIFO), W1
0x04C8	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,229 :: 		numSetsFIFO = (numFIFO)/3;                                             //Lee el numero de sets disponibles en el FIFO
0x04CA	0xFB8000  	ZE	W0, W0
0x04CC	0x200032  	MOV	#3, W2
0x04CE	0x090011  	REPEAT	#17
0x04D0	0xD80002  	DIV.S	W0, W2
0x04D2	0x780080  	MOV	W0, W1
0x04D4	0x21BF90  	MOV	#lo_addr(_numSetsFIFO), W0
0x04D6	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,232 :: 		for (x=0;x<numSetsFIFO;x++){
0x04D8	0xEF2000  	CLR	W0
0x04DA	0x88DEC0  	MOV	W0, _x
L_Muestrear31:
0x04DC	0x21BF90  	MOV	#lo_addr(_numSetsFIFO), W0
0x04DE	0xFB8090  	ZE	[W0], W1
0x04E0	0x21BD80  	MOV	#lo_addr(_x), W0
0x04E2	0xE10810  	CP	W1, [W0]
0x04E4	0x36001A  	BRA LEU	L_Muestrear32
L__Muestrear169:
;Acelerografo.c,233 :: 		ADXL355_read_FIFO(datosLeidos);                                    //Lee una sola posicion del FIFO
0x04E6	0x21058A  	MOV	#lo_addr(_datosLeidos), W10
0x04E8	0x070086  	RCALL	_ADXL355_read_FIFO
;Acelerografo.c,234 :: 		for (y=0;y<9;y++){
0x04EA	0xEF2000  	CLR	W0
0x04EC	0x88DF60  	MOV	W0, _y
L_Muestrear34:
0x04EE	0x80DF60  	MOV	_y, W0
0x04F0	0xE10069  	CP	W0, #9
0x04F2	0x31000F  	BRA GEU	L_Muestrear35
L__Muestrear170:
;Acelerografo.c,235 :: 		datosFIFO[y+(x*9)] = datosLeidos[y];                           //LLena la trama datosFIFO
0x04F4	0x80DEC1  	MOV	_x, W1
0x04F6	0x200090  	MOV	#9, W0
0x04F8	0xB80900  	MUL.UU	W1, W0, W2
0x04FA	0x21BEC0  	MOV	#lo_addr(_y), W0
0x04FC	0x410090  	ADD	W2, [W0], W1
0x04FE	0x21A790  	MOV	#lo_addr(_datosFIFO), W0
0x0500	0x400101  	ADD	W0, W1, W2
0x0502	0x210581  	MOV	#lo_addr(_datosLeidos), W1
0x0504	0x21BEC0  	MOV	#lo_addr(_y), W0
0x0506	0x408010  	ADD	W1, [W0], W0
0x0508	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,234 :: 		for (y=0;y<9;y++){
0x050A	0x200011  	MOV	#1, W1
0x050C	0x21BEC0  	MOV	#lo_addr(_y), W0
0x050E	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,236 :: 		}
0x0510	0x37FFEE  	BRA	L_Muestrear34
L_Muestrear35:
;Acelerografo.c,232 :: 		for (x=0;x<numSetsFIFO;x++){
0x0512	0x200011  	MOV	#1, W1
0x0514	0x21BD80  	MOV	#lo_addr(_x), W0
0x0516	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,237 :: 		}
0x0518	0x37FFE1  	BRA	L_Muestrear31
L_Muestrear32:
;Acelerografo.c,240 :: 		for (x=0;x<(numSetsFIFO*9);x++){
0x051A	0xEF2000  	CLR	W0
0x051C	0x88DEC0  	MOV	W0, _x
L_Muestrear37:
0x051E	0x21BF90  	MOV	#lo_addr(_numSetsFIFO), W0
0x0520	0xFB8090  	ZE	[W0], W1
0x0522	0x200090  	MOV	#9, W0
0x0524	0xB98900  	MUL.SS	W1, W0, W2
0x0526	0x21BD80  	MOV	#lo_addr(_x), W0
0x0528	0xE11010  	CP	W2, [W0]
0x052A	0x360036  	BRA LEU	L_Muestrear38
L__Muestrear171:
;Acelerografo.c,241 :: 		if ((x==0)||(x%9==0)){
0x052C	0x80DEC0  	MOV	_x, W0
0x052E	0xE10060  	CP	W0, #0
0x0530	0x320008  	BRA Z	L__Muestrear118
L__Muestrear172:
0x0532	0x80DEC0  	MOV	_x, W0
0x0534	0x200092  	MOV	#9, W2
0x0536	0x090011  	REPEAT	#17
0x0538	0xD88002  	DIV.U	W0, W2
0x053A	0x780001  	MOV	W1, W0
0x053C	0xE10060  	CP	W0, #0
0x053E	0x320001  	BRA Z	L__Muestrear117
L__Muestrear173:
0x0540	0x37001B  	BRA	L_Muestrear42
L__Muestrear118:
L__Muestrear117:
;Acelerografo.c,242 :: 		tramaCompleta[contFIFO+contMuestras+x] = contMuestras;          //Funciona bien
0x0542	0x21BEA0  	MOV	#lo_addr(_contMuestras), W0
0x0544	0xFB8090  	ZE	[W0], W1
0x0546	0x21BF60  	MOV	#lo_addr(_contFIFO), W0
0x0548	0x408090  	ADD	W1, [W0], W1
0x054A	0x21BD80  	MOV	#lo_addr(_x), W0
0x054C	0x408090  	ADD	W1, [W0], W1
0x054E	0x210AF0  	MOV	#lo_addr(_tramaCompleta), W0
0x0550	0x400081  	ADD	W0, W1, W1
0x0552	0x21BEA0  	MOV	#lo_addr(_contMuestras), W0
0x0554	0x784890  	MOV.B	[W0], [W1]
;Acelerografo.c,243 :: 		tramaCompleta[contFIFO+contMuestras+x+1] = datosFIFO[x];
0x0556	0x21BEA0  	MOV	#lo_addr(_contMuestras), W0
0x0558	0xFB8090  	ZE	[W0], W1
0x055A	0x21BF60  	MOV	#lo_addr(_contFIFO), W0
0x055C	0x408090  	ADD	W1, [W0], W1
0x055E	0x21BD80  	MOV	#lo_addr(_x), W0
0x0560	0x408010  	ADD	W1, [W0], W0
0x0562	0x4000E1  	ADD	W0, #1, W1
0x0564	0x210AF0  	MOV	#lo_addr(_tramaCompleta), W0
0x0566	0x400101  	ADD	W0, W1, W2
0x0568	0x21A791  	MOV	#lo_addr(_datosFIFO), W1
0x056A	0x21BD80  	MOV	#lo_addr(_x), W0
0x056C	0x408010  	ADD	W1, [W0], W0
0x056E	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,244 :: 		contMuestras++;
0x0570	0xB3C011  	MOV.B	#1, W1
0x0572	0x21BEA0  	MOV	#lo_addr(_contMuestras), W0
0x0574	0x40C810  	ADD.B	W1, [W0], [W0]
;Acelerografo.c,245 :: 		} else {
0x0576	0x37000C  	BRA	L_Muestrear43
L_Muestrear42:
;Acelerografo.c,246 :: 		tramaCompleta[contFIFO+contMuestras+x] = datosFIFO[x];
0x0578	0x21BEA0  	MOV	#lo_addr(_contMuestras), W0
0x057A	0xFB8090  	ZE	[W0], W1
0x057C	0x21BF60  	MOV	#lo_addr(_contFIFO), W0
0x057E	0x408090  	ADD	W1, [W0], W1
0x0580	0x21BD80  	MOV	#lo_addr(_x), W0
0x0582	0x408090  	ADD	W1, [W0], W1
0x0584	0x210AF0  	MOV	#lo_addr(_tramaCompleta), W0
0x0586	0x400101  	ADD	W0, W1, W2
0x0588	0x21A791  	MOV	#lo_addr(_datosFIFO), W1
0x058A	0x21BD80  	MOV	#lo_addr(_x), W0
0x058C	0x408010  	ADD	W1, [W0], W0
0x058E	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,247 :: 		}
L_Muestrear43:
;Acelerografo.c,240 :: 		for (x=0;x<(numSetsFIFO*9);x++){
0x0590	0x200011  	MOV	#1, W1
0x0592	0x21BD80  	MOV	#lo_addr(_x), W0
0x0594	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,248 :: 		}
0x0596	0x37FFC3  	BRA	L_Muestrear37
L_Muestrear38:
;Acelerografo.c,252 :: 		for (x=0;x<6;x++){
0x0598	0xEF2000  	CLR	W0
0x059A	0x88DEC0  	MOV	W0, _x
L_Muestrear44:
0x059C	0x80DEC0  	MOV	_x, W0
0x059E	0xE10066  	CP	W0, #6
0x05A0	0x31000D  	BRA GEU	L_Muestrear45
L__Muestrear174:
;Acelerografo.c,253 :: 		tramaCompleta[2500+x] = tiempo[x];
0x05A2	0x209C41  	MOV	#2500, W1
0x05A4	0x21BD80  	MOV	#lo_addr(_x), W0
0x05A6	0x408090  	ADD	W1, [W0], W1
0x05A8	0x210AF0  	MOV	#lo_addr(_tramaCompleta), W0
0x05AA	0x400101  	ADD	W0, W1, W2
0x05AC	0x21BDF1  	MOV	#lo_addr(_tiempo), W1
0x05AE	0x21BD80  	MOV	#lo_addr(_x), W0
0x05B0	0x408010  	ADD	W1, [W0], W0
0x05B2	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,252 :: 		for (x=0;x<6;x++){
0x05B4	0x200011  	MOV	#1, W1
0x05B6	0x21BD80  	MOV	#lo_addr(_x), W0
0x05B8	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,254 :: 		}
0x05BA	0x37FFF0  	BRA	L_Muestrear44
L_Muestrear45:
;Acelerografo.c,256 :: 		contMuestras = 0;                                                      //Limpia el contador de muestras
0x05BC	0x21BEA1  	MOV	#lo_addr(_contMuestras), W1
0x05BE	0xEF2000  	CLR	W0
0x05C0	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,257 :: 		contFIFO = 0;                                                          //Limpia el contador de FIFOs
0x05C2	0xEF2000  	CLR	W0
0x05C4	0x88DFB0  	MOV	W0, _contFIFO
;Acelerografo.c,258 :: 		T1CON.TON = 1;                                                         //Enciende el Timer1
0x05C6	0xA8E105  	BSET	T1CON, #15
;Acelerografo.c,260 :: 		banLec = 1;                                                            //Activa la bandera de lectura para enviar la trama
0x05C8	0x21BD21  	MOV	#lo_addr(_banLec), W1
0x05CA	0xB3C010  	MOV.B	#1, W0
0x05CC	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,261 :: 		RP1 = 1;                                                               //Genera el pulso P1 para producir la interrupcion en la RPi
0x05CE	0xA88E04  	BSET	LATA4_bit, BitPos(LATA4_bit+0)
;Acelerografo.c,262 :: 		Delay_us(20);
0x05D0	0x200A07  	MOV	#160, W7
L_Muestrear47:
0x05D2	0xED200E  	DEC	W7
0x05D4	0x3AFFFE  	BRA NZ	L_Muestrear47
0x05D6	0x000000  	NOP
0x05D8	0x000000  	NOP
;Acelerografo.c,263 :: 		RP1 = 0;
0x05DA	0xA98E04  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;Acelerografo.c,265 :: 		}
L_Muestrear30:
L_Muestrear29:
;Acelerografo.c,267 :: 		contCiclos++;                                                              //Incrementa el contador de ciclos
0x05DC	0xB3C011  	MOV.B	#1, W1
0x05DE	0x21BEB0  	MOV	#lo_addr(_contCiclos), W0
0x05E0	0x40C810  	ADD.B	W1, [W0], [W0]
;Acelerografo.c,269 :: 		if (ADXL355_read_byte(POWER_CTL)&0x01==1){
0x05E2	0xB3C2DA  	MOV.B	#45, W10
0x05E4	0x07005E  	RCALL	_ADXL355_read_byte
0x05E6	0xAE0000  	BTSS	W0, #0
0x05E8	0x370003  	BRA	L_Muestrear49
;Acelerografo.c,270 :: 		ADXL355_write_byte(POWER_CTL, DRDY_OFF|MEASURING);                      //Coloca el ADXL en modo medicion
0x05EA	0xB3C04B  	MOV.B	#4, W11
0x05EC	0xB3C2DA  	MOV.B	#45, W10
0x05EE	0x07FE96  	RCALL	_ADXL355_write_byte
;Acelerografo.c,271 :: 		}
L_Muestrear49:
;Acelerografo.c,275 :: 		}
L_end_Muestrear:
0x05F0	0x7805CF  	POP	W11
0x05F2	0x78054F  	POP	W10
0x05F4	0x060000  	RETURN
; end of _Muestrear
_ADXL355_read_byte:
;adxl355_spi.c,137 :: 		unsigned char ADXL355_read_byte(unsigned char address){
;adxl355_spi.c,138 :: 		unsigned char value = 0x00;
0x06A2	0x781F8A  	PUSH	W10
;adxl355_spi.c,139 :: 		address=(address<<1)|0x01;
0x06A4	0xFB800A  	ZE	W10, W0
0x06A6	0xDD0041  	SL	W0, #1, W0
0x06A8	0x700061  	IOR	W0, #1, W0
0x06AA	0x784500  	MOV.B	W0, W10
;adxl355_spi.c,140 :: 		CS_ADXL355=0;
0x06AC	0xA96E04  	BCLR	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,141 :: 		SPI2_Write(address);
0x06AE	0xFB8500  	ZE	W0, W10
0x06B0	0x07FE43  	RCALL	_SPI2_Write
;adxl355_spi.c,142 :: 		value=SPI2_Read(0);
0x06B2	0xEF2014  	CLR	W10
0x06B4	0x07FE11  	RCALL	_SPI2_Read
;adxl355_spi.c,143 :: 		CS_ADXL355=1;
0x06B6	0xA86E04  	BSET	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,144 :: 		return value;
;adxl355_spi.c,145 :: 		}
;adxl355_spi.c,144 :: 		return value;
;adxl355_spi.c,145 :: 		}
L_end_ADXL355_read_byte:
0x06B8	0x78054F  	POP	W10
0x06BA	0x060000  	RETURN
; end of _ADXL355_read_byte
_ADXL355_read_FIFO:
0x05F6	0xFA0002  	LNK	#2
;adxl355_spi.c,167 :: 		unsigned int ADXL355_read_FIFO(unsigned char *vectorFIFO){
;adxl355_spi.c,170 :: 		CS_ADXL355 = 0;
0x05F8	0x781F8A  	PUSH	W10
0x05FA	0xA96E04  	BCLR	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,171 :: 		SPI2_Write(add);
0x05FC	0x781F8A  	PUSH	W10
0x05FE	0x20023A  	MOV	#35, W10
0x0600	0x07FE9B  	RCALL	_SPI2_Write
0x0602	0x78054F  	POP	W10
;adxl355_spi.c,173 :: 		vectorFIFO[0] = SPI2_Read(0);
0x0604	0x78000A  	MOV	W10, W0
0x0606	0x980700  	MOV	W0, [W14+0]
0x0608	0x781F8A  	PUSH	W10
0x060A	0xEF2014  	CLR	W10
0x060C	0x07FE65  	RCALL	_SPI2_Read
0x060E	0x78054F  	POP	W10
0x0610	0x90008E  	MOV	[W14+0], W1
0x0612	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,174 :: 		vectorFIFO[1] = SPI2_Read(1);
0x0614	0x450061  	ADD	W10, #1, W0
0x0616	0x980700  	MOV	W0, [W14+0]
0x0618	0x781F8A  	PUSH	W10
0x061A	0x20001A  	MOV	#1, W10
0x061C	0x07FE5D  	RCALL	_SPI2_Read
0x061E	0x78054F  	POP	W10
0x0620	0x90008E  	MOV	[W14+0], W1
0x0622	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,175 :: 		vectorFIFO[2] = SPI2_Read(2);
0x0624	0x450062  	ADD	W10, #2, W0
0x0626	0x980700  	MOV	W0, [W14+0]
0x0628	0x781F8A  	PUSH	W10
0x062A	0x20002A  	MOV	#2, W10
0x062C	0x07FE55  	RCALL	_SPI2_Read
0x062E	0x78054F  	POP	W10
0x0630	0x90008E  	MOV	[W14+0], W1
0x0632	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,177 :: 		vectorFIFO[3] = SPI2_Read(0);
0x0634	0x450063  	ADD	W10, #3, W0
0x0636	0x980700  	MOV	W0, [W14+0]
0x0638	0x781F8A  	PUSH	W10
0x063A	0xEF2014  	CLR	W10
0x063C	0x07FE4D  	RCALL	_SPI2_Read
0x063E	0x78054F  	POP	W10
0x0640	0x90008E  	MOV	[W14+0], W1
0x0642	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,178 :: 		vectorFIFO[4] = SPI2_Read(1);
0x0644	0x450064  	ADD	W10, #4, W0
0x0646	0x980700  	MOV	W0, [W14+0]
0x0648	0x781F8A  	PUSH	W10
0x064A	0x20001A  	MOV	#1, W10
0x064C	0x07FE45  	RCALL	_SPI2_Read
0x064E	0x78054F  	POP	W10
0x0650	0x90008E  	MOV	[W14+0], W1
0x0652	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,179 :: 		vectorFIFO[5] = SPI2_Read(2);
0x0654	0x450065  	ADD	W10, #5, W0
0x0656	0x980700  	MOV	W0, [W14+0]
0x0658	0x781F8A  	PUSH	W10
0x065A	0x20002A  	MOV	#2, W10
0x065C	0x07FE3D  	RCALL	_SPI2_Read
0x065E	0x78054F  	POP	W10
0x0660	0x90008E  	MOV	[W14+0], W1
0x0662	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,181 :: 		vectorFIFO[6] = SPI2_Read(0);
0x0664	0x450066  	ADD	W10, #6, W0
0x0666	0x980700  	MOV	W0, [W14+0]
0x0668	0x781F8A  	PUSH	W10
0x066A	0xEF2014  	CLR	W10
0x066C	0x07FE35  	RCALL	_SPI2_Read
0x066E	0x78054F  	POP	W10
0x0670	0x90008E  	MOV	[W14+0], W1
0x0672	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,182 :: 		vectorFIFO[7] = SPI2_Read(1);
0x0674	0x450067  	ADD	W10, #7, W0
0x0676	0x980700  	MOV	W0, [W14+0]
0x0678	0x781F8A  	PUSH	W10
0x067A	0x20001A  	MOV	#1, W10
0x067C	0x07FE2D  	RCALL	_SPI2_Read
0x067E	0x78054F  	POP	W10
0x0680	0x90008E  	MOV	[W14+0], W1
0x0682	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,183 :: 		vectorFIFO[8] = SPI2_Read(2);
0x0684	0x450068  	ADD	W10, #8, W0
0x0686	0x980700  	MOV	W0, [W14+0]
0x0688	0x20002A  	MOV	#2, W10
0x068A	0x07FE26  	RCALL	_SPI2_Read
0x068C	0x90008E  	MOV	[W14+0], W1
0x068E	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,184 :: 		CS_ADXL355 = 1;
0x0690	0xA86E04  	BSET	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,185 :: 		Delay_us(5);
0x0692	0x200287  	MOV	#40, W7
L_ADXL355_read_FIFO16:
0x0694	0xED200E  	DEC	W7
0x0696	0x3AFFFE  	BRA NZ	L_ADXL355_read_FIFO16
0x0698	0x000000  	NOP
0x069A	0x000000  	NOP
;adxl355_spi.c,187 :: 		}
;adxl355_spi.c,186 :: 		return;
;adxl355_spi.c,187 :: 		}
L_end_ADXL355_read_FIFO:
0x069C	0x78054F  	POP	W10
0x069E	0xFA8000  	ULNK
0x06A0	0x060000  	RETURN
; end of _ADXL355_read_FIFO
_urx_1:
0x0CAC	0xF80034  	PUSH	DSWPAG
0x0CAE	0xF80032  	PUSH	DSRPAG
0x0CB0	0xF80036  	PUSH	RCOUNT
0x0CB2	0x781F80  	PUSH	W0
0x0CB4	0x200020  	MOV	#2, W0
0x0CB6	0x09000C  	REPEAT	#12
0x0CB8	0x781FB0  	PUSH	[W0++]
;Acelerografo.c,416 :: 		void urx_1() org  IVT_ADDR_U1RXINTERRUPT {
;Acelerografo.c,418 :: 		U1RXIF_bit = 0;                                                            //Limpia la bandera de interrupcion por UART
0x0CBA	0xA96801  	BCLR	U1RXIF_bit, BitPos(U1RXIF_bit+0)
;Acelerografo.c,420 :: 		byteGPS = U1RXREG;                                                         //Lee el byte de la trama enviada por el GPS
0x0CBC	0x21BF51  	MOV	#lo_addr(_byteGPS), W1
0x0CBE	0xBFC226  	MOV.B	U1RXREG, WREG
0x0CC0	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,421 :: 		OERR_bit = 0;                                                              //Limpia este bit para limpiar el FIFO UART
0x0CC2	0xA92222  	BCLR	OERR_bit, BitPos(OERR_bit+0)
;Acelerografo.c,423 :: 		if (banTIGPS==0){
0x0CC4	0x21BD00  	MOV	#lo_addr(_banTIGPS), W0
0x0CC6	0x784010  	MOV.B	[W0], W0
0x0CC8	0xE10460  	CP.B	W0, #0
0x0CCA	0x3A000B  	BRA NZ	L_urx_186
L__urx_1203:
;Acelerografo.c,424 :: 		if ((byteGPS==0x24)&&(i_gps==0)){                                       //Verifica si el primer byte recibido es el simbolo "$" que indica el inicio de una trama GPS
0x0CCC	0x21BF50  	MOV	#lo_addr(_byteGPS), W0
0x0CCE	0x784090  	MOV.B	[W0], W1
0x0CD0	0xB3C240  	MOV.B	#36, W0
0x0CD2	0xE10C00  	CP.B	W1, W0
0x0CD4	0x3A0006  	BRA NZ	L__urx_1138
L__urx_1204:
0x0CD6	0x80DF70  	MOV	_i_gps, W0
0x0CD8	0xE10060  	CP	W0, #0
0x0CDA	0x3A0003  	BRA NZ	L__urx_1137
L__urx_1205:
L__urx_1136:
;Acelerografo.c,425 :: 		banTIGPS = 1;                                                        //Activa la bandera de inicio de trama
0x0CDC	0x21BD01  	MOV	#lo_addr(_banTIGPS), W1
0x0CDE	0xB3C010  	MOV.B	#1, W0
0x0CE0	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,424 :: 		if ((byteGPS==0x24)&&(i_gps==0)){                                       //Verifica si el primer byte recibido es el simbolo "$" que indica el inicio de una trama GPS
L__urx_1138:
L__urx_1137:
;Acelerografo.c,427 :: 		}
L_urx_186:
;Acelerografo.c,429 :: 		if (banTIGPS==1){
0x0CE2	0x21BD00  	MOV	#lo_addr(_banTIGPS), W0
0x0CE4	0x784010  	MOV.B	[W0], W0
0x0CE6	0xE10461  	CP.B	W0, #1
0x0CE8	0x3A0030  	BRA NZ	L_urx_190
L__urx_1206:
;Acelerografo.c,430 :: 		if (byteGPS!=0x2A){                                                     //0x2A = "*"
0x0CEA	0x21BF50  	MOV	#lo_addr(_byteGPS), W0
0x0CEC	0x784090  	MOV.B	[W0], W1
0x0CEE	0xB3C2A0  	MOV.B	#42, W0
0x0CF0	0xE10C00  	CP.B	W1, W0
0x0CF2	0x320020  	BRA Z	L_urx_191
L__urx_1207:
;Acelerografo.c,431 :: 		tramaGPS[i_gps] = byteGPS;                                           //LLena la tramaGPS hasta recibir el ultimo simbolo ("*") de la trama GPS
0x0CF4	0x21B7C1  	MOV	#lo_addr(_tramaGPS), W1
0x0CF6	0x21BEE0  	MOV	#lo_addr(_i_gps), W0
0x0CF8	0x408090  	ADD	W1, [W0], W1
0x0CFA	0x21BF50  	MOV	#lo_addr(_byteGPS), W0
0x0CFC	0x784890  	MOV.B	[W0], [W1]
;Acelerografo.c,432 :: 		banTFGPS = 0;                                                        //Limpia la bandera de final de trama
0x0CFE	0x21BD41  	MOV	#lo_addr(_banTFGPS), W1
0x0D00	0xEF2000  	CLR	W0
0x0D02	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,433 :: 		if (i_gps<70){
0x0D04	0x200461  	MOV	#70, W1
0x0D06	0x21BEE0  	MOV	#lo_addr(_i_gps), W0
0x0D08	0xE10810  	CP	W1, [W0]
0x0D0A	0x360003  	BRA LEU	L_urx_192
L__urx_1208:
;Acelerografo.c,434 :: 		i_gps++;                                                          //Incrementa el valor del subindice mientras sea menor a 70
0x0D0C	0x200011  	MOV	#1, W1
0x0D0E	0x21BEE0  	MOV	#lo_addr(_i_gps), W0
0x0D10	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,435 :: 		}
L_urx_192:
;Acelerografo.c,436 :: 		if ((i_gps>1)&&(tramaGPS[1]!=0x47)){                                 //Verifica si el segundo elemento guardado es diferente de G
0x0D12	0x80DF70  	MOV	_i_gps, W0
0x0D14	0xE10061  	CP	W0, #1
0x0D16	0x36000D  	BRA LEU	L__urx_1140
L__urx_1209:
0x0D18	0x21B7D0  	MOV	#lo_addr(_tramaGPS+1), W0
0x0D1A	0x784090  	MOV.B	[W0], W1
0x0D1C	0xB3C470  	MOV.B	#71, W0
0x0D1E	0xE10C00  	CP.B	W1, W0
0x0D20	0x320008  	BRA Z	L__urx_1139
L__urx_1210:
L__urx_1135:
;Acelerografo.c,437 :: 		i_gps = 0;                                                        //Limpia el subindice para almacenar la trama desde el principio
0x0D22	0xEF2000  	CLR	W0
0x0D24	0x88DF70  	MOV	W0, _i_gps
;Acelerografo.c,438 :: 		banTIGPS = 0;                                                     //Limpia la bandera de inicio de trama
0x0D26	0x21BD01  	MOV	#lo_addr(_banTIGPS), W1
0x0D28	0xEF2000  	CLR	W0
0x0D2A	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,439 :: 		banTCGPS = 0;                                                     //Limpia la bandera de trama completa
0x0D2C	0x21BDA1  	MOV	#lo_addr(_banTCGPS), W1
0x0D2E	0xEF2000  	CLR	W0
0x0D30	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,436 :: 		if ((i_gps>1)&&(tramaGPS[1]!=0x47)){                                 //Verifica si el segundo elemento guardado es diferente de G
L__urx_1140:
L__urx_1139:
;Acelerografo.c,441 :: 		} else {
0x0D32	0x37000B  	BRA	L_urx_196
L_urx_191:
;Acelerografo.c,442 :: 		tramaGPS[i_gps] = byteGPS;
0x0D34	0x21B7C1  	MOV	#lo_addr(_tramaGPS), W1
0x0D36	0x21BEE0  	MOV	#lo_addr(_i_gps), W0
0x0D38	0x408090  	ADD	W1, [W0], W1
0x0D3A	0x21BF50  	MOV	#lo_addr(_byteGPS), W0
0x0D3C	0x784890  	MOV.B	[W0], [W1]
;Acelerografo.c,443 :: 		banTIGPS = 2;                                                        //Cambia el estado de la bandera de inicio de trama para no permitir que se almacene mas datos en la trama
0x0D3E	0x21BD01  	MOV	#lo_addr(_banTIGPS), W1
0x0D40	0xB3C020  	MOV.B	#2, W0
0x0D42	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,444 :: 		banTCGPS = 1;                                                        //Activa la bandera de trama completa
0x0D44	0x21BDA1  	MOV	#lo_addr(_banTCGPS), W1
0x0D46	0xB3C010  	MOV.B	#1, W0
0x0D48	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,445 :: 		}
L_urx_196:
;Acelerografo.c,446 :: 		}
L_urx_190:
;Acelerografo.c,448 :: 		if (banTCGPS==1){
0x0D4A	0x21BDA0  	MOV	#lo_addr(_banTCGPS), W0
0x0D4C	0x784010  	MOV.B	[W0], W0
0x0D4E	0xE10461  	CP.B	W0, #1
0x0D50	0x3A0076  	BRA NZ	L_urx_197
L__urx_1211:
;Acelerografo.c,449 :: 		if ( tramaGPS[1]==0x47 && tramaGPS[2]==0x50 && tramaGPS[3]==0x52 && tramaGPS[4]==0x4D && tramaGPS[5]==0x43 && tramaGPS[18]==0x41 ){      //"GPRMC" y "A"
0x0D52	0x21B7D0  	MOV	#lo_addr(_tramaGPS+1), W0
0x0D54	0x784090  	MOV.B	[W0], W1
0x0D56	0xB3C470  	MOV.B	#71, W0
0x0D58	0xE10C00  	CP.B	W1, W0
0x0D5A	0x3A006D  	BRA NZ	L__urx_1146
L__urx_1212:
0x0D5C	0x21B7E0  	MOV	#lo_addr(_tramaGPS+2), W0
0x0D5E	0x784090  	MOV.B	[W0], W1
0x0D60	0xB3C500  	MOV.B	#80, W0
0x0D62	0xE10C00  	CP.B	W1, W0
0x0D64	0x3A0068  	BRA NZ	L__urx_1145
L__urx_1213:
0x0D66	0x21B7F0  	MOV	#lo_addr(_tramaGPS+3), W0
0x0D68	0x784090  	MOV.B	[W0], W1
0x0D6A	0xB3C520  	MOV.B	#82, W0
0x0D6C	0xE10C00  	CP.B	W1, W0
0x0D6E	0x3A0063  	BRA NZ	L__urx_1144
L__urx_1214:
0x0D70	0x21B800  	MOV	#lo_addr(_tramaGPS+4), W0
0x0D72	0x784090  	MOV.B	[W0], W1
0x0D74	0xB3C4D0  	MOV.B	#77, W0
0x0D76	0xE10C00  	CP.B	W1, W0
0x0D78	0x3A005E  	BRA NZ	L__urx_1143
L__urx_1215:
0x0D7A	0x21B810  	MOV	#lo_addr(_tramaGPS+5), W0
0x0D7C	0x784090  	MOV.B	[W0], W1
0x0D7E	0xB3C430  	MOV.B	#67, W0
0x0D80	0xE10C00  	CP.B	W1, W0
0x0D82	0x3A0059  	BRA NZ	L__urx_1142
L__urx_1216:
0x0D84	0x21B8E0  	MOV	#lo_addr(_tramaGPS+18), W0
0x0D86	0x784090  	MOV.B	[W0], W1
0x0D88	0xB3C410  	MOV.B	#65, W0
0x0D8A	0xE10C00  	CP.B	W1, W0
0x0D8C	0x3A0054  	BRA NZ	L__urx_1141
L__urx_1217:
L__urx_1134:
;Acelerografo.c,450 :: 		for (x=0;x<6;x++){
0x0D8E	0xEF2000  	CLR	W0
0x0D90	0x88DEC0  	MOV	W0, _x
L_urx_1101:
0x0D92	0x80DEC0  	MOV	_x, W0
0x0D94	0xE10066  	CP	W0, #6
0x0D96	0x31000C  	BRA GEU	L_urx_1102
L__urx_1218:
;Acelerografo.c,451 :: 		datosGPS[x] = tramaGPS[7+x];                                     //Guarda los datos de hhmmss
0x0D98	0x21B6C1  	MOV	#lo_addr(_datosGPS), W1
0x0D9A	0x21BD80  	MOV	#lo_addr(_x), W0
0x0D9C	0x408110  	ADD	W1, [W0], W2
0x0D9E	0x80DEC0  	MOV	_x, W0
0x0DA0	0x4000E7  	ADD	W0, #7, W1
0x0DA2	0x21B7C0  	MOV	#lo_addr(_tramaGPS), W0
0x0DA4	0x400001  	ADD	W0, W1, W0
0x0DA6	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,450 :: 		for (x=0;x<6;x++){
0x0DA8	0x200011  	MOV	#1, W1
0x0DAA	0x21BD80  	MOV	#lo_addr(_x), W0
0x0DAC	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,452 :: 		}
0x0DAE	0x37FFF1  	BRA	L_urx_1101
L_urx_1102:
;Acelerografo.c,453 :: 		for (x=50;x<60;x++){
0x0DB0	0x200320  	MOV	#50, W0
0x0DB2	0x88DEC0  	MOV	W0, _x
L_urx_1104:
0x0DB4	0x2003C1  	MOV	#60, W1
0x0DB6	0x21BD80  	MOV	#lo_addr(_x), W0
0x0DB8	0xE10810  	CP	W1, [W0]
0x0DBA	0x36001F  	BRA LEU	L_urx_1105
L__urx_1219:
;Acelerografo.c,454 :: 		if (tramaGPS[x]==0x2C){                                          //Busca el simbolo "," a partir de la posicion 50
0x0DBC	0x21B7C1  	MOV	#lo_addr(_tramaGPS), W1
0x0DBE	0x21BD80  	MOV	#lo_addr(_x), W0
0x0DC0	0x408010  	ADD	W1, [W0], W0
0x0DC2	0x784090  	MOV.B	[W0], W1
0x0DC4	0xB3C2C0  	MOV.B	#44, W0
0x0DC6	0xE10C00  	CP.B	W1, W0
0x0DC8	0x3A0014  	BRA NZ	L_urx_1107
L__urx_1220:
;Acelerografo.c,455 :: 		for (y=0;y<6;y++){
0x0DCA	0xEF2000  	CLR	W0
0x0DCC	0x88DF60  	MOV	W0, _y
L_urx_1108:
0x0DCE	0x80DF60  	MOV	_y, W0
0x0DD0	0xE10066  	CP	W0, #6
0x0DD2	0x31000F  	BRA GEU	L_urx_1109
L__urx_1221:
;Acelerografo.c,456 :: 		datosGPS[6+y] = tramaGPS[x+y+1];                         //Guarda los datos de DDMMAA en la trama datosGPS
0x0DD4	0x80DF60  	MOV	_y, W0
0x0DD6	0x4000E6  	ADD	W0, #6, W1
0x0DD8	0x21B6C0  	MOV	#lo_addr(_datosGPS), W0
0x0DDA	0x400101  	ADD	W0, W1, W2
0x0DDC	0x80DEC1  	MOV	_x, W1
0x0DDE	0x21BEC0  	MOV	#lo_addr(_y), W0
0x0DE0	0x408010  	ADD	W1, [W0], W0
0x0DE2	0x4000E1  	ADD	W0, #1, W1
0x0DE4	0x21B7C0  	MOV	#lo_addr(_tramaGPS), W0
0x0DE6	0x400001  	ADD	W0, W1, W0
0x0DE8	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,455 :: 		for (y=0;y<6;y++){
0x0DEA	0x200011  	MOV	#1, W1
0x0DEC	0x21BEC0  	MOV	#lo_addr(_y), W0
0x0DEE	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,457 :: 		}
0x0DF0	0x37FFEE  	BRA	L_urx_1108
L_urx_1109:
;Acelerografo.c,458 :: 		}
L_urx_1107:
;Acelerografo.c,453 :: 		for (x=50;x<60;x++){
0x0DF2	0x200011  	MOV	#1, W1
0x0DF4	0x21BD80  	MOV	#lo_addr(_x), W0
0x0DF6	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,459 :: 		}
0x0DF8	0x37FFDD  	BRA	L_urx_1104
L_urx_1105:
;Acelerografo.c,478 :: 		tiempo[0] = 11;                                                            //Hora
0x0DFA	0x21BDF1  	MOV	#lo_addr(_tiempo), W1
0x0DFC	0xB3C0B0  	MOV.B	#11, W0
0x0DFE	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,479 :: 		tiempo[1] = 12;                                                            //Minuto
0x0E00	0x21BE01  	MOV	#lo_addr(_tiempo+1), W1
0x0E02	0xB3C0C0  	MOV.B	#12, W0
0x0E04	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,480 :: 		tiempo[2] = 13;                                                            //Segundo
0x0E06	0x21BE11  	MOV	#lo_addr(_tiempo+2), W1
0x0E08	0xB3C0D0  	MOV.B	#13, W0
0x0E0A	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,481 :: 		tiempo[3] = 31;                                                            //Dia
0x0E0C	0x21BE21  	MOV	#lo_addr(_tiempo+3), W1
0x0E0E	0xB3C1F0  	MOV.B	#31, W0
0x0E10	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,482 :: 		tiempo[4] = 12;                                                            //Mes
0x0E12	0x21BE31  	MOV	#lo_addr(_tiempo+4), W1
0x0E14	0xB3C0C0  	MOV.B	#12, W0
0x0E16	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,483 :: 		tiempo[5] = 19;                                                            //Año
0x0E18	0x21BE41  	MOV	#lo_addr(_tiempo+5), W1
0x0E1A	0xB3C130  	MOV.B	#19, W0
0x0E1C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,487 :: 		U1RXIE_bit = 0;                                                      //Apaga la interrupcion por UARTRx
0x0E1E	0xA96821  	BCLR	U1RXIE_bit, BitPos(U1RXIE_bit+0)
;Acelerografo.c,488 :: 		banSetReloj = 1;                                                     //Activa la bandera para hacer uso de la hora GPS
0x0E20	0x21BCE1  	MOV	#lo_addr(_banSetReloj), W1
0x0E22	0xB3C010  	MOV.B	#1, W0
0x0E24	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,489 :: 		RP2 = 1;                                                             //Genera el pulso P2 para producir la interrupcion en la RPi
0x0E26	0xA88E14  	BSET	LATB4_bit, BitPos(LATB4_bit+0)
;Acelerografo.c,490 :: 		Delay_us(20);
0x0E28	0x200A07  	MOV	#160, W7
L_urx_1111:
0x0E2A	0xED200E  	DEC	W7
0x0E2C	0x3AFFFE  	BRA NZ	L_urx_1111
0x0E2E	0x000000  	NOP
0x0E30	0x000000  	NOP
;Acelerografo.c,491 :: 		RP2 = 0;
0x0E32	0xA98E14  	BCLR	LATB4_bit, BitPos(LATB4_bit+0)
;Acelerografo.c,493 :: 		} else {
0x0E34	0x370004  	BRA	L_urx_1113
;Acelerografo.c,449 :: 		if ( tramaGPS[1]==0x47 && tramaGPS[2]==0x50 && tramaGPS[3]==0x52 && tramaGPS[4]==0x4D && tramaGPS[5]==0x43 && tramaGPS[18]==0x41 ){      //"GPRMC" y "A"
L__urx_1146:
L__urx_1145:
L__urx_1144:
L__urx_1143:
L__urx_1142:
L__urx_1141:
;Acelerografo.c,495 :: 		U1RXIE_bit = 0;                                                      //Apaga la interrupcion por UARTRx
0x0E36	0xA96821  	BCLR	U1RXIE_bit, BitPos(U1RXIE_bit+0)
;Acelerografo.c,496 :: 		banSetReloj = 0;                                                     //Limpia la bandera para permitir otra peticion de toma de datos del GPS
0x0E38	0x21BCE1  	MOV	#lo_addr(_banSetReloj), W1
0x0E3A	0xEF2000  	CLR	W0
0x0E3C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,497 :: 		}
L_urx_1113:
;Acelerografo.c,499 :: 		}
L_urx_197:
;Acelerografo.c,501 :: 		}
L_end_urx_1:
0x0E3E	0x2001A0  	MOV	#26, W0
0x0E40	0x09000C  	REPEAT	#12
0x0E42	0x78104F  	POP	[W0--]
0x0E44	0x78004F  	POP	W0
0x0E46	0xF90036  	POP	RCOUNT
0x0E48	0xF90032  	POP	DSRPAG
0x0E4A	0xF90034  	POP	DSWPAG
0x0E4C	0x064000  	RETFIE
; end of _urx_1
_spi_1:
0x08EA	0xF80034  	PUSH	DSWPAG
0x08EC	0xF80032  	PUSH	DSRPAG
0x08EE	0xF80036  	PUSH	RCOUNT
0x08F0	0x781F80  	PUSH	W0
0x08F2	0x200020  	MOV	#2, W0
0x08F4	0x09000C  	REPEAT	#12
0x08F6	0x781FB0  	PUSH	[W0++]
;Acelerografo.c,284 :: 		void spi_1() org  IVT_ADDR_SPI1INTERRUPT {
;Acelerografo.c,286 :: 		SPI1IF_bit = 0;                                                            //Limpia la bandera de interrupcion por SPI
0x08F8	0xA94801  	BCLR	SPI1IF_bit, BitPos(SPI1IF_bit+0)
;Acelerografo.c,287 :: 		buffer = SPI1BUF;                                                          //Guarda el contenido del bufeer (lectura)
0x08FA	0x21B791  	MOV	#lo_addr(_buffer), W1
0x08FC	0xBFC248  	MOV.B	SPI1BUF, WREG
0x08FE	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,290 :: 		if (banMuestrear==0){
0x0900	0x21BDB0  	MOV	#lo_addr(_banMuestrear), W0
0x0902	0x784010  	MOV.B	[W0], W0
0x0904	0xE10460  	CP.B	W0, #0
0x0906	0x3A0009  	BRA NZ	L_spi_150
L__spi_1176:
;Acelerografo.c,291 :: 		if (buffer==0xA0){
0x0908	0x21B790  	MOV	#lo_addr(_buffer), W0
0x090A	0x784090  	MOV.B	[W0], W1
0x090C	0xB3CA00  	MOV.B	#160, W0
0x090E	0xE10C00  	CP.B	W1, W0
0x0910	0x3A0004  	BRA NZ	L_spi_151
L__spi_1177:
;Acelerografo.c,292 :: 		banMuestrear = 1;                                                    //Cambia el estado de la bandera para que no inicie el muestreo mas de una vez de manera consecutiva
0x0912	0x21BDB1  	MOV	#lo_addr(_banMuestrear), W1
0x0914	0xB3C010  	MOV.B	#1, W0
0x0916	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,293 :: 		INT1IE_bit = 1;                                                      //Habilita la interrupcion externa INT1
0x0918	0xA88822  	BSET	INT1IE_bit, BitPos(INT1IE_bit+0)
;Acelerografo.c,294 :: 		}
L_spi_151:
;Acelerografo.c,295 :: 		}
L_spi_150:
;Acelerografo.c,298 :: 		if (banMuestrear==1){
0x091A	0x21BDB0  	MOV	#lo_addr(_banMuestrear), W0
0x091C	0x784010  	MOV.B	[W0], W0
0x091E	0xE10461  	CP.B	W0, #1
0x0920	0x3A0009  	BRA NZ	L_spi_152
L__spi_1178:
;Acelerografo.c,299 :: 		if (buffer==0xAF){
0x0922	0x21B790  	MOV	#lo_addr(_buffer), W0
0x0924	0x784090  	MOV.B	[W0], W1
0x0926	0xB3CAF0  	MOV.B	#175, W0
0x0928	0xE10C00  	CP.B	W1, W0
0x092A	0x3A0004  	BRA NZ	L_spi_153
L__spi_1179:
;Acelerografo.c,300 :: 		banMuestrear = 0;                                                    //Cambia el estado de la bandera para permitir que inicie el muestreo de nuevo en el futuro
0x092C	0x21BDB1  	MOV	#lo_addr(_banMuestrear), W1
0x092E	0xEF2000  	CLR	W0
0x0930	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,301 :: 		INT1IE_bit = 0;                                                      //Desabilita la interrupcion externa INT1
0x0932	0xA98822  	BCLR	INT1IE_bit, BitPos(INT1IE_bit+0)
;Acelerografo.c,302 :: 		}
L_spi_153:
;Acelerografo.c,303 :: 		}
L_spi_152:
;Acelerografo.c,306 :: 		if (banSetReloj==0){
0x0934	0x21BCE0  	MOV	#lo_addr(_banSetReloj), W0
0x0936	0x784010  	MOV.B	[W0], W0
0x0938	0xE10460  	CP.B	W0, #0
0x093A	0x3A0010  	BRA NZ	L_spi_154
L__spi_1180:
;Acelerografo.c,307 :: 		if (buffer==0xC0){
0x093C	0x21B790  	MOV	#lo_addr(_buffer), W0
0x093E	0x784090  	MOV.B	[W0], W1
0x0940	0xB3CC00  	MOV.B	#192, W0
0x0942	0xE10C00  	CP.B	W1, W0
0x0944	0x3A000B  	BRA NZ	L_spi_155
L__spi_1181:
;Acelerografo.c,308 :: 		banTIGPS = 0;                                                        //Limpia la bandera de inicio de trama  del GPS
0x0946	0x21BD01  	MOV	#lo_addr(_banTIGPS), W1
0x0948	0xEF2000  	CLR	W0
0x094A	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,309 :: 		banTCGPS = 0;                                                        //Limpia la bandera de trama completa
0x094C	0x21BDA1  	MOV	#lo_addr(_banTCGPS), W1
0x094E	0xEF2000  	CLR	W0
0x0950	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,310 :: 		i_gps = 0;                                                           //Limpia el subindice de la trama GPS
0x0952	0xEF2000  	CLR	W0
0x0954	0x88DF70  	MOV	W0, _i_gps
;Acelerografo.c,312 :: 		if (U1RXIE_bit==0){
0x0956	0xAF6821  	BTSC	U1RXIE_bit, BitPos(U1RXIE_bit+0)
0x0958	0x370001  	BRA	L_spi_156
;Acelerografo.c,313 :: 		U1RXIE_bit = 1;
0x095A	0xA86821  	BSET	U1RXIE_bit, BitPos(U1RXIE_bit+0)
;Acelerografo.c,314 :: 		}
L_spi_156:
;Acelerografo.c,315 :: 		}
L_spi_155:
;Acelerografo.c,316 :: 		}
L_spi_154:
;Acelerografo.c,319 :: 		if (banSetReloj==1){
0x095C	0x21BCE0  	MOV	#lo_addr(_banSetReloj), W0
0x095E	0x784010  	MOV.B	[W0], W0
0x0960	0xE10461  	CP.B	W0, #1
0x0962	0x3A000B  	BRA NZ	L_spi_157
L__spi_1182:
;Acelerografo.c,320 :: 		banSetReloj = 2;
0x0964	0x21BCE1  	MOV	#lo_addr(_banSetReloj), W1
0x0966	0xB3C020  	MOV.B	#2, W0
0x0968	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,321 :: 		j = 0;
0x096A	0xEF2000  	CLR	W0
0x096C	0x88DBD0  	MOV	W0, _j
;Acelerografo.c,322 :: 		SPI1BUF = tiempo[j];
0x096E	0x21BDF1  	MOV	#lo_addr(_tiempo), W1
0x0970	0x21B7A0  	MOV	#lo_addr(_j), W0
0x0972	0x408010  	ADD	W1, [W0], W0
0x0974	0x784010  	MOV.B	[W0], W0
0x0976	0xFB8000  	ZE	W0, W0
0x0978	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,323 :: 		}
L_spi_157:
;Acelerografo.c,324 :: 		if ((banSetReloj==2)&&(buffer!=0xC1)){
0x097A	0x21BCE0  	MOV	#lo_addr(_banSetReloj), W0
0x097C	0x784010  	MOV.B	[W0], W0
0x097E	0xE10462  	CP.B	W0, #2
0x0980	0x3A000E  	BRA NZ	L__spi_1124
L__spi_1183:
0x0982	0x21B790  	MOV	#lo_addr(_buffer), W0
0x0984	0x784090  	MOV.B	[W0], W1
0x0986	0xB3CC10  	MOV.B	#193, W0
0x0988	0xE10C00  	CP.B	W1, W0
0x098A	0x320009  	BRA Z	L__spi_1123
L__spi_1184:
L__spi_1122:
;Acelerografo.c,325 :: 		SPI1BUF = tiempo[j];
0x098C	0x21BDF1  	MOV	#lo_addr(_tiempo), W1
0x098E	0x21B7A0  	MOV	#lo_addr(_j), W0
0x0990	0x408010  	ADD	W1, [W0], W0
0x0992	0x784010  	MOV.B	[W0], W0
0x0994	0xFB8000  	ZE	W0, W0
0x0996	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,326 :: 		j++;
0x0998	0x200011  	MOV	#1, W1
0x099A	0x21B7A0  	MOV	#lo_addr(_j), W0
0x099C	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,324 :: 		if ((banSetReloj==2)&&(buffer!=0xC1)){
L__spi_1124:
L__spi_1123:
;Acelerografo.c,328 :: 		if ((banSetReloj==2)&&(buffer==0xC1)){                                     //Si detecta el delimitador de final de trama:
0x099E	0x21BCE0  	MOV	#lo_addr(_banSetReloj), W0
0x09A0	0x784010  	MOV.B	[W0], W0
0x09A2	0xE10462  	CP.B	W0, #2
0x09A4	0x3A000A  	BRA NZ	L__spi_1126
L__spi_1185:
0x09A6	0x21B790  	MOV	#lo_addr(_buffer), W0
0x09A8	0x784090  	MOV.B	[W0], W1
0x09AA	0xB3CC10  	MOV.B	#193, W0
0x09AC	0xE10C00  	CP.B	W1, W0
0x09AE	0x3A0005  	BRA NZ	L__spi_1125
L__spi_1186:
L__spi_1121:
;Acelerografo.c,329 :: 		banSetReloj = 0;                                                        //Limpia la bandera de lectura
0x09B0	0x21BCE1  	MOV	#lo_addr(_banSetReloj), W1
0x09B2	0xEF2000  	CLR	W0
0x09B4	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,330 :: 		SPI1BUF = 0xFF;
0x09B6	0x200FF0  	MOV	#255, W0
0x09B8	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,328 :: 		if ((banSetReloj==2)&&(buffer==0xC1)){                                     //Si detecta el delimitador de final de trama:
L__spi_1126:
L__spi_1125:
;Acelerografo.c,334 :: 		if (banLec==1){                                                            //Verifica si la bandera de inicio de trama esta activa
0x09BA	0x21BD20  	MOV	#lo_addr(_banLec), W0
0x09BC	0x784010  	MOV.B	[W0], W0
0x09BE	0xE10461  	CP.B	W0, #1
0x09C0	0x3A000B  	BRA NZ	L_spi_164
L__spi_1187:
;Acelerografo.c,335 :: 		banLec = 2;                                                             //Activa la bandera de lectura
0x09C2	0x21BD21  	MOV	#lo_addr(_banLec), W1
0x09C4	0xB3C020  	MOV.B	#2, W0
0x09C6	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,336 :: 		i = 0;
0x09C8	0xEF2000  	CLR	W0
0x09CA	0x88DEB0  	MOV	W0, _i
;Acelerografo.c,337 :: 		SPI1BUF = tramaCompleta[i];
0x09CC	0x210AF1  	MOV	#lo_addr(_tramaCompleta), W1
0x09CE	0x21BD60  	MOV	#lo_addr(_i), W0
0x09D0	0x408010  	ADD	W1, [W0], W0
0x09D2	0x784010  	MOV.B	[W0], W0
0x09D4	0xFB8000  	ZE	W0, W0
0x09D6	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,338 :: 		}
L_spi_164:
;Acelerografo.c,339 :: 		if ((banLec==2)&&(buffer!=0xB1)){
0x09D8	0x21BD20  	MOV	#lo_addr(_banLec), W0
0x09DA	0x784010  	MOV.B	[W0], W0
0x09DC	0xE10462  	CP.B	W0, #2
0x09DE	0x3A000E  	BRA NZ	L__spi_1128
L__spi_1188:
0x09E0	0x21B790  	MOV	#lo_addr(_buffer), W0
0x09E2	0x784090  	MOV.B	[W0], W1
0x09E4	0xB3CB10  	MOV.B	#177, W0
0x09E6	0xE10C00  	CP.B	W1, W0
0x09E8	0x320009  	BRA Z	L__spi_1127
L__spi_1189:
L__spi_1120:
;Acelerografo.c,340 :: 		SPI1BUF = tramaCompleta[i];
0x09EA	0x210AF1  	MOV	#lo_addr(_tramaCompleta), W1
0x09EC	0x21BD60  	MOV	#lo_addr(_i), W0
0x09EE	0x408010  	ADD	W1, [W0], W0
0x09F0	0x784010  	MOV.B	[W0], W0
0x09F2	0xFB8000  	ZE	W0, W0
0x09F4	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,341 :: 		i++;
0x09F6	0x200011  	MOV	#1, W1
0x09F8	0x21BD60  	MOV	#lo_addr(_i), W0
0x09FA	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,339 :: 		if ((banLec==2)&&(buffer!=0xB1)){
L__spi_1128:
L__spi_1127:
;Acelerografo.c,343 :: 		if ((banLec==2)&&(buffer==0xB1)){                                          //Si detecta el delimitador de final de trama:
0x09FC	0x21BD20  	MOV	#lo_addr(_banLec), W0
0x09FE	0x784010  	MOV.B	[W0], W0
0x0A00	0xE10462  	CP.B	W0, #2
0x0A02	0x3A000A  	BRA NZ	L__spi_1130
L__spi_1190:
0x0A04	0x21B790  	MOV	#lo_addr(_buffer), W0
0x0A06	0x784090  	MOV.B	[W0], W1
0x0A08	0xB3CB10  	MOV.B	#177, W0
0x0A0A	0xE10C00  	CP.B	W1, W0
0x0A0C	0x3A0005  	BRA NZ	L__spi_1129
L__spi_1191:
L__spi_1119:
;Acelerografo.c,344 :: 		banLec = 0;                                                             //Limpia la bandera de lectura
0x0A0E	0x21BD21  	MOV	#lo_addr(_banLec), W1
0x0A10	0xEF2000  	CLR	W0
0x0A12	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,345 :: 		SPI1BUF = 0xFF;
0x0A14	0x200FF0  	MOV	#255, W0
0x0A16	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,343 :: 		if ((banLec==2)&&(buffer==0xB1)){                                          //Si detecta el delimitador de final de trama:
L__spi_1130:
L__spi_1129:
;Acelerografo.c,347 :: 		}
L_end_spi_1:
0x0A18	0x2001A0  	MOV	#26, W0
0x0A1A	0x09000C  	REPEAT	#12
0x0A1C	0x78104F  	POP	[W0--]
0x0A1E	0x78004F  	POP	W0
0x0A20	0xF90036  	POP	RCOUNT
0x0A22	0xF90032  	POP	DSRPAG
0x0A24	0xF90034  	POP	DSWPAG
0x0A26	0x064000  	RETFIE
; end of _spi_1
_Timer2Int:
0x0B4C	0xF80034  	PUSH	DSWPAG
0x0B4E	0xF80032  	PUSH	DSRPAG
0x0B50	0xF80036  	PUSH	RCOUNT
0x0B52	0x781F80  	PUSH	W0
0x0B54	0x200020  	MOV	#2, W0
0x0B56	0x09000C  	REPEAT	#12
0x0B58	0x781FB0  	PUSH	[W0++]
;Acelerografo.c,407 :: 		void Timer2Int() org IVT_ADDR_T2INTERRUPT{
;Acelerografo.c,409 :: 		T2IF_bit = 0;
0x0B5A	0xA9E800  	BCLR	T2IF_bit, BitPos(T2IF_bit+0)
;Acelerografo.c,411 :: 		}
L_end_Timer2Int:
0x0B5C	0x2001A0  	MOV	#26, W0
0x0B5E	0x09000C  	REPEAT	#12
0x0B60	0x78104F  	POP	[W0--]
0x0B62	0x78004F  	POP	W0
0x0B64	0xF90036  	POP	RCOUNT
0x0B66	0xF90032  	POP	DSRPAG
0x0B68	0xF90034  	POP	DSWPAG
0x0B6A	0x064000  	RETFIE
; end of _Timer2Int
_Timer1Int:
0x0A28	0xF80034  	PUSH	DSWPAG
0x0A2A	0xF80032  	PUSH	DSRPAG
0x0A2C	0xF80036  	PUSH	RCOUNT
0x0A2E	0x781F80  	PUSH	W0
0x0A30	0x200020  	MOV	#2, W0
0x0A32	0x09000C  	REPEAT	#12
0x0A34	0x781FB0  	PUSH	[W0++]
;Acelerografo.c,364 :: 		void Timer1Int() org IVT_ADDR_T1INTERRUPT{
;Acelerografo.c,366 :: 		T1IF_bit = 0;                                                              //Limpia la bandera de interrupcion por desbordamiento del Timer1
0x0A36	0x781F8A  	PUSH	W10
0x0A38	0xA96800  	BCLR	T1IF_bit, BitPos(T1IF_bit+0)
;Acelerografo.c,368 :: 		numFIFO = ADXL355_read_byte(FIFO_ENTRIES); //75                            //Lee el numero de muestras disponibles en el FIFO
0x0A3A	0xB3C05A  	MOV.B	#5, W10
0x0A3C	0x07FE32  	RCALL	_ADXL355_read_byte
0x0A3E	0x21BF81  	MOV	#lo_addr(_numFIFO), W1
0x0A40	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,369 :: 		numSetsFIFO = (numFIFO)/3;                 //25                            //Lee el numero de sets disponibles en el FIFO
0x0A42	0xFB8000  	ZE	W0, W0
0x0A44	0x200032  	MOV	#3, W2
0x0A46	0x090011  	REPEAT	#17
0x0A48	0xD80002  	DIV.S	W0, W2
0x0A4A	0x780080  	MOV	W0, W1
0x0A4C	0x21BF90  	MOV	#lo_addr(_numSetsFIFO), W0
0x0A4E	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,373 :: 		for (x=0;x<numSetsFIFO;x++){
0x0A50	0xEF2000  	CLR	W0
0x0A52	0x88DEC0  	MOV	W0, _x
L_Timer1Int72:
0x0A54	0x21BF90  	MOV	#lo_addr(_numSetsFIFO), W0
0x0A56	0xFB8090  	ZE	[W0], W1
0x0A58	0x21BD80  	MOV	#lo_addr(_x), W0
0x0A5A	0xE10810  	CP	W1, [W0]
0x0A5C	0x36001A  	BRA LEU	L_Timer1Int73
L__Timer1Int195:
;Acelerografo.c,374 :: 		ADXL355_read_FIFO(datosLeidos);                                        //Lee una sola posicion del FIFO
0x0A5E	0x21058A  	MOV	#lo_addr(_datosLeidos), W10
0x0A60	0x07FDCA  	RCALL	_ADXL355_read_FIFO
;Acelerografo.c,375 :: 		for (y=0;y<9;y++){
0x0A62	0xEF2000  	CLR	W0
0x0A64	0x88DF60  	MOV	W0, _y
L_Timer1Int75:
0x0A66	0x80DF60  	MOV	_y, W0
0x0A68	0xE10069  	CP	W0, #9
0x0A6A	0x31000F  	BRA GEU	L_Timer1Int76
L__Timer1Int196:
;Acelerografo.c,376 :: 		datosFIFO[y+(x*9)] = datosLeidos[y];                               //LLena la trama datosFIFO
0x0A6C	0x80DEC1  	MOV	_x, W1
0x0A6E	0x200090  	MOV	#9, W0
0x0A70	0xB80900  	MUL.UU	W1, W0, W2
0x0A72	0x21BEC0  	MOV	#lo_addr(_y), W0
0x0A74	0x410090  	ADD	W2, [W0], W1
0x0A76	0x21A790  	MOV	#lo_addr(_datosFIFO), W0
0x0A78	0x400101  	ADD	W0, W1, W2
0x0A7A	0x210581  	MOV	#lo_addr(_datosLeidos), W1
0x0A7C	0x21BEC0  	MOV	#lo_addr(_y), W0
0x0A7E	0x408010  	ADD	W1, [W0], W0
0x0A80	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,375 :: 		for (y=0;y<9;y++){
0x0A82	0x200011  	MOV	#1, W1
0x0A84	0x21BEC0  	MOV	#lo_addr(_y), W0
0x0A86	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,377 :: 		}
0x0A88	0x37FFEE  	BRA	L_Timer1Int75
L_Timer1Int76:
;Acelerografo.c,373 :: 		for (x=0;x<numSetsFIFO;x++){
0x0A8A	0x200011  	MOV	#1, W1
0x0A8C	0x21BD80  	MOV	#lo_addr(_x), W0
0x0A8E	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,378 :: 		}
0x0A90	0x37FFE1  	BRA	L_Timer1Int72
L_Timer1Int73:
;Acelerografo.c,381 :: 		for (x=0;x<(numSetsFIFO*9);x++){      //0-224
0x0A92	0xEF2000  	CLR	W0
0x0A94	0x88DEC0  	MOV	W0, _x
L_Timer1Int78:
0x0A96	0x21BF90  	MOV	#lo_addr(_numSetsFIFO), W0
0x0A98	0xFB8090  	ZE	[W0], W1
0x0A9A	0x200090  	MOV	#9, W0
0x0A9C	0xB98900  	MUL.SS	W1, W0, W2
0x0A9E	0x21BD80  	MOV	#lo_addr(_x), W0
0x0AA0	0xE11010  	CP	W2, [W0]
0x0AA2	0x360036  	BRA LEU	L_Timer1Int79
L__Timer1Int197:
;Acelerografo.c,382 :: 		if ((x==0)||(x%9==0)){
0x0AA4	0x80DEC0  	MOV	_x, W0
0x0AA6	0xE10060  	CP	W0, #0
0x0AA8	0x320008  	BRA Z	L__Timer1Int133
L__Timer1Int198:
0x0AAA	0x80DEC0  	MOV	_x, W0
0x0AAC	0x200092  	MOV	#9, W2
0x0AAE	0x090011  	REPEAT	#17
0x0AB0	0xD88002  	DIV.U	W0, W2
0x0AB2	0x780001  	MOV	W1, W0
0x0AB4	0xE10060  	CP	W0, #0
0x0AB6	0x320001  	BRA Z	L__Timer1Int132
L__Timer1Int199:
0x0AB8	0x37001B  	BRA	L_Timer1Int83
L__Timer1Int133:
L__Timer1Int132:
;Acelerografo.c,383 :: 		tramaCompleta[contFIFO+contMuestras+x] = contMuestras;
0x0ABA	0x21BEA0  	MOV	#lo_addr(_contMuestras), W0
0x0ABC	0xFB8090  	ZE	[W0], W1
0x0ABE	0x21BF60  	MOV	#lo_addr(_contFIFO), W0
0x0AC0	0x408090  	ADD	W1, [W0], W1
0x0AC2	0x21BD80  	MOV	#lo_addr(_x), W0
0x0AC4	0x408090  	ADD	W1, [W0], W1
0x0AC6	0x210AF0  	MOV	#lo_addr(_tramaCompleta), W0
0x0AC8	0x400081  	ADD	W0, W1, W1
0x0ACA	0x21BEA0  	MOV	#lo_addr(_contMuestras), W0
0x0ACC	0x784890  	MOV.B	[W0], [W1]
;Acelerografo.c,384 :: 		tramaCompleta[contFIFO+contMuestras+x+1] = datosFIFO[x];
0x0ACE	0x21BEA0  	MOV	#lo_addr(_contMuestras), W0
0x0AD0	0xFB8090  	ZE	[W0], W1
0x0AD2	0x21BF60  	MOV	#lo_addr(_contFIFO), W0
0x0AD4	0x408090  	ADD	W1, [W0], W1
0x0AD6	0x21BD80  	MOV	#lo_addr(_x), W0
0x0AD8	0x408010  	ADD	W1, [W0], W0
0x0ADA	0x4000E1  	ADD	W0, #1, W1
0x0ADC	0x210AF0  	MOV	#lo_addr(_tramaCompleta), W0
0x0ADE	0x400101  	ADD	W0, W1, W2
0x0AE0	0x21A791  	MOV	#lo_addr(_datosFIFO), W1
0x0AE2	0x21BD80  	MOV	#lo_addr(_x), W0
0x0AE4	0x408010  	ADD	W1, [W0], W0
0x0AE6	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,385 :: 		contMuestras++;
0x0AE8	0xB3C011  	MOV.B	#1, W1
0x0AEA	0x21BEA0  	MOV	#lo_addr(_contMuestras), W0
0x0AEC	0x40C810  	ADD.B	W1, [W0], [W0]
;Acelerografo.c,386 :: 		} else {
0x0AEE	0x37000C  	BRA	L_Timer1Int84
L_Timer1Int83:
;Acelerografo.c,387 :: 		tramaCompleta[contFIFO+contMuestras+x] = datosFIFO[x];
0x0AF0	0x21BEA0  	MOV	#lo_addr(_contMuestras), W0
0x0AF2	0xFB8090  	ZE	[W0], W1
0x0AF4	0x21BF60  	MOV	#lo_addr(_contFIFO), W0
0x0AF6	0x408090  	ADD	W1, [W0], W1
0x0AF8	0x21BD80  	MOV	#lo_addr(_x), W0
0x0AFA	0x408090  	ADD	W1, [W0], W1
0x0AFC	0x210AF0  	MOV	#lo_addr(_tramaCompleta), W0
0x0AFE	0x400101  	ADD	W0, W1, W2
0x0B00	0x21A791  	MOV	#lo_addr(_datosFIFO), W1
0x0B02	0x21BD80  	MOV	#lo_addr(_x), W0
0x0B04	0x408010  	ADD	W1, [W0], W0
0x0B06	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,388 :: 		}
L_Timer1Int84:
;Acelerografo.c,381 :: 		for (x=0;x<(numSetsFIFO*9);x++){      //0-224
0x0B08	0x200011  	MOV	#1, W1
0x0B0A	0x21BD80  	MOV	#lo_addr(_x), W0
0x0B0C	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,389 :: 		}
0x0B0E	0x37FFC3  	BRA	L_Timer1Int78
L_Timer1Int79:
;Acelerografo.c,391 :: 		contFIFO = (contMuestras*9);                                               //Incrementa el contador de FIFOs
0x0B10	0x21BEA0  	MOV	#lo_addr(_contMuestras), W0
0x0B12	0xFB8090  	ZE	[W0], W1
0x0B14	0x200090  	MOV	#9, W0
0x0B16	0xB98800  	MUL.SS	W1, W0, W0
0x0B18	0x88DFB0  	MOV	W0, _contFIFO
;Acelerografo.c,393 :: 		contTimer1++;                                                              //Incrementa una unidad cada vez que entra a la interrupcion por Timer1
0x0B1A	0xB3C011  	MOV.B	#1, W1
0x0B1C	0x21BF40  	MOV	#lo_addr(_contTimer1), W0
0x0B1E	0x40C810  	ADD.B	W1, [W0], [W0]
;Acelerografo.c,395 :: 		if (contTimer1==numTMR1){                                                  //Verifica si se cumplio el numero de interrupciones por TMR1 para la tasa de muestreo seleccionada
0x0B20	0x21BF40  	MOV	#lo_addr(_contTimer1), W0
0x0B22	0xFB8090  	ZE	[W0], W1
0x0B24	0x21BDE0  	MOV	#lo_addr(_numTMR1), W0
0x0B26	0xFB0010  	SE	[W0], W0
0x0B28	0xE10800  	CP	W1, W0
0x0B2A	0x3A0007  	BRA NZ	L_Timer1Int85
L__Timer1Int200:
;Acelerografo.c,396 :: 		T1CON.TON = 0;                                                          //Apaga el Timer1
0x0B2C	0xA9E105  	BCLR	T1CON, #15
;Acelerografo.c,397 :: 		banCiclo = 1;                                                           //Activa la bandera que indica que se completo un ciclo de medicion
0x0B2E	0x21BD31  	MOV	#lo_addr(_banCiclo), W1
0x0B30	0xB3C010  	MOV.B	#1, W0
0x0B32	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,398 :: 		contTimer1 = 0;                                                         //Limpia el contador de interrupciones por Timer1
0x0B34	0x21BF41  	MOV	#lo_addr(_contTimer1), W1
0x0B36	0xEF2000  	CLR	W0
0x0B38	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,399 :: 		}
L_Timer1Int85:
;Acelerografo.c,403 :: 		}
L_end_Timer1Int:
0x0B3A	0x78054F  	POP	W10
0x0B3C	0x2001A0  	MOV	#26, W0
0x0B3E	0x09000C  	REPEAT	#12
0x0B40	0x78104F  	POP	[W0--]
0x0B42	0x78004F  	POP	W0
0x0B44	0xF90036  	POP	RCOUNT
0x0B46	0xF90032  	POP	DSRPAG
0x0B48	0xF90034  	POP	DSWPAG
0x0B4A	0x064000  	RETFIE
; end of _Timer1Int
;,0 :: _initBlock_0 [40]
; Containing: ?ICS?lstr3_Acelerografo [21]
;             ?ICS?lstr2_Acelerografo [19]
0x8000	0x5024 ;_initBlock_0+0 : ?ICS?lstr3_Acelerografo at 0x8000
0x8002	0x544D ;_initBlock_0+2
0x8004	0x324B ;_initBlock_0+4
0x8006	0x3135 ;_initBlock_0+6
0x8008	0x312C ;_initBlock_0+8
0x800A	0x3531 ;_initBlock_0+10
0x800C	0x3032 ;_initBlock_0+12
0x800E	0x2A30 ;_initBlock_0+14
0x8010	0x4631 ;_initBlock_0+16
0x8012	0x0A0D ;_initBlock_0+18
0x8014	0x2400 ;_initBlock_0+20 : ?ICS?lstr2_Acelerografo at 0x8015
0x8016	0x4D50 ;_initBlock_0+22
0x8018	0x4B54 ;_initBlock_0+24
0x801A	0x3232 ;_initBlock_0+26
0x801C	0x2C30 ;_initBlock_0+28
0x801E	0x3031 ;_initBlock_0+30
0x8020	0x3030 ;_initBlock_0+32
0x8022	0x312A ;_initBlock_0+34
0x8024	0x0D46 ;_initBlock_0+36
0x8026	0x000A ;_initBlock_0+38
; end of _initBlock_0
;Acelerografo.c,0 :: ?ICS?lstr7_Acelerografo [14]
0x8028	0x5024 ;?ICS?lstr7_Acelerografo+0
0x802A	0x544D ;?ICS?lstr7_Acelerografo+2
0x802C	0x344B ;?ICS?lstr7_Acelerografo+4
0x802E	0x3331 ;?ICS?lstr7_Acelerografo+6
0x8030	0x332A ;?ICS?lstr7_Acelerografo+8
0x8032	0x0D34 ;?ICS?lstr7_Acelerografo+10
0x8034	0x000A ;?ICS?lstr7_Acelerografo+12
; end of ?ICS?lstr7_Acelerografo
;Acelerografo.c,0 :: ?ICS_tiempoDeAjuste [2]
0x8036	0x000A ;?ICS_tiempoDeAjuste+0
; end of ?ICS_tiempoDeAjuste
;Acelerografo.c,0 :: ?ICS?lstr8_Acelerografo [16]
0x8038	0x5024 ;?ICS?lstr8_Acelerografo+0
0x803A	0x544D ;?ICS?lstr8_Acelerografo+2
0x803C	0x354B ;?ICS?lstr8_Acelerografo+4
0x803E	0x3331 ;?ICS?lstr8_Acelerografo+6
0x8040	0x312C ;?ICS?lstr8_Acelerografo+8
0x8042	0x322A ;?ICS?lstr8_Acelerografo+10
0x8044	0x0D38 ;?ICS?lstr8_Acelerografo+12
0x8046	0x000A ;?ICS?lstr8_Acelerografo+14
; end of ?ICS?lstr8_Acelerografo
;Acelerografo.c,0 :: ?ICS?lstr4_Acelerografo [16]
0x8048	0x5024 ;?ICS?lstr4_Acelerografo+0
0x804A	0x544D ;?ICS?lstr4_Acelerografo+2
0x804C	0x334B ;?ICS?lstr4_Acelerografo+4
0x804E	0x3331 ;?ICS?lstr4_Acelerografo+6
0x8050	0x312C ;?ICS?lstr4_Acelerografo+8
0x8052	0x322A ;?ICS?lstr4_Acelerografo+10
0x8054	0x0D45 ;?ICS?lstr4_Acelerografo+12
0x8056	0x000A ;?ICS?lstr4_Acelerografo+14
; end of ?ICS?lstr4_Acelerografo
;,0 :: _initBlock_5 [87]
; Containing: ?ICS_datosLeidos [9]
;             ?ICS?lstr5_Acelerografo [48]
;             ?ICS?lstr1_Acelerografo [14]
;             ?ICS?lstr6_Acelerografo [16]
0x8058	0x0000 ;_initBlock_5+0 : ?ICS_datosLeidos at 0x8058
0x805A	0x0000 ;_initBlock_5+2
0x805C	0x0000 ;_initBlock_5+4
0x805E	0x0000 ;_initBlock_5+6
0x8060	0x2400 ;_initBlock_5+8 : ?ICS?lstr5_Acelerografo at 0x8061
0x8062	0x4D50 ;_initBlock_5+10
0x8064	0x4B54 ;_initBlock_5+12
0x8066	0x3133 ;_initBlock_5+14
0x8068	0x2C34 ;_initBlock_5+16
0x806A	0x2C30 ;_initBlock_5+18
0x806C	0x2C31 ;_initBlock_5+20
0x806E	0x2C30 ;_initBlock_5+22
0x8070	0x2C30 ;_initBlock_5+24
0x8072	0x2C30 ;_initBlock_5+26
0x8074	0x2C30 ;_initBlock_5+28
0x8076	0x2C30 ;_initBlock_5+30
0x8078	0x2C30 ;_initBlock_5+32
0x807A	0x2C30 ;_initBlock_5+34
0x807C	0x2C30 ;_initBlock_5+36
0x807E	0x2C30 ;_initBlock_5+38
0x8080	0x2C30 ;_initBlock_5+40
0x8082	0x2C30 ;_initBlock_5+42
0x8084	0x2C30 ;_initBlock_5+44
0x8086	0x2C30 ;_initBlock_5+46
0x8088	0x2C30 ;_initBlock_5+48
0x808A	0x2A30 ;_initBlock_5+50
0x808C	0x3932 ;_initBlock_5+52
0x808E	0x0A0D ;_initBlock_5+54
0x8090	0x2400 ;_initBlock_5+56 : ?ICS?lstr1_Acelerografo at 0x8091
0x8092	0x4D50 ;_initBlock_5+58
0x8094	0x4B54 ;_initBlock_5+60
0x8096	0x3036 ;_initBlock_5+62
0x8098	0x2A35 ;_initBlock_5+64
0x809A	0x3133 ;_initBlock_5+66
0x809C	0x0A0D ;_initBlock_5+68
0x809E	0x2400 ;_initBlock_5+70 : ?ICS?lstr6_Acelerografo at 0x809F
0x80A0	0x4D50 ;_initBlock_5+72
0x80A2	0x4B54 ;_initBlock_5+74
0x80A4	0x3133 ;_initBlock_5+76
0x80A6	0x2C39 ;_initBlock_5+78
0x80A8	0x2A31 ;_initBlock_5+80
0x80AA	0x3432 ;_initBlock_5+82
0x80AC	0x0A0D ;_initBlock_5+84
0x80AE	0x00 ;_initBlock_5+86
; end of _initBlock_5
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0200      [18]    __Multiply_32x32
0x0212      [14]    _Delay_100ms
0x0220      [88]    __Modulus_32x32
0x0278      [14]    _UART1_Write
0x0286      [82]    __Divide_32x32
0x02D8      [24]    _SPI2_Read
0x02F0       [6]    _Get_Fosc_kHz
0x02F6       [4]    _Get_Fosc_Per_Cyc
0x02FA      [34]    _UART1_Write_Text
0x031C      [28]    _ADXL355_write_byte
0x0338       [8]    _SPI2_Write
0x0340      [46]    _SPI1_Init_Advanced
0x036E     [258]    _UART1_Init
0x0470      [40]    _SPI2_Init
0x0498     [350]    _Muestrear
0x05F6     [172]    _ADXL355_read_FIFO
0x06A2      [26]    _ADXL355_read_byte
0x06BC      [98]    _ADXL355_init
0x071E      [72]    _ConfigurarGPS
0x0766     [388]    _ConfiguracionPrincipal
0x08EA     [318]    _spi_1
0x0A28     [292]    _Timer1Int
0x0B4C      [32]    _Timer2Int
0x0B6C     [278]    _main
0x0C82      [42]    _int_1
0x0CAC     [418]    _urx_1
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0822       [0]    INT1IE_bit
0x0802       [0]    INT1IF_bit
0x084A       [1]    IPC5bits
0x0682       [2]    RPOR1bits
0x0260       [2]    SPI2STAT
0x06A0       [2]    RPINR0
0x0104       [2]    T1CON
0x0840       [2]    IPC0bits
0x0110       [2]    T2CON
0x0820       [0]    T2IE_bit
0x0820       [0]    T1IE_bit
0x0800       [0]    T1IF_bit
0x0102       [2]    PR1
0x06C4       [1]    RPINR18bits
0x0680       [2]    RPOR0bits
0x0820       [0]    U1RXIE_bit
0x0E10       [0]    TRISB12_bit
0x0E10       [0]    TRISB13_bit
0x08C2       [2]    INTCON2
0x0844       [2]    IPC2bits
0x0800       [0]    SPI1IF_bit
0x06CC       [2]    RPINR22bits
0x0684       [2]    RPOR2bits
0x0222       [2]    U1STAbits
0x0240       [2]    SPI1STAT
0x0820       [0]    SPI1IE_bit
0x10AF    [2506]    _tramaCompleta
0x1A79     [243]    _datosFIFO
0x0222       [2]    U1STA
0x0228       [2]    U1BRG
0x0224       [2]    U1TXREG
0x0800       [0]    U1RXIF_bit
0x1B6C      [13]    _datosGPS
0x1B79       [1]    _buffer
0x1B7A       [2]    _j
0x0226       [2]    U1RXREG
0x0222       [0]    OERR_bit
0x1B7C      [70]    _tramaGPS
0x0242       [2]    SPI1CON
0x1BC2       [2]    _SPI_Rd_Ptr
0x1BC4       [2]    _SPI_Wr_Ptr
0x0800       [0]    T2IF_bit
0x010C       [2]    PR2
0x0842       [2]    IPC1bits
0x0262       [2]    SPI2CON
0x1BC6       [2]    _UART_Rdy_Ptr
0x1BC8       [2]    _UART_Tx_Idle_Ptr
0x0220       [2]    U1MODE
0x0268       [2]    SPI2BUF
0x1BCA       [2]    _UART_Wr_Ptr
0x1BCC       [2]    _UART_Rd_Ptr
0x0E10       [0]    TRISB11_bit
0x1BCE       [1]    _banSetReloj
0x1BCF       [1]    _banSetGPS
0x1BD0       [1]    _banTIGPS
0x1BD1       [1]    _banTI
0x1BD2       [1]    _banLec
0x1BD3       [1]    _banCiclo
0x1BD4       [1]    _banTFGPS
0x1BD5       [1]    _banConf
0x1BD6       [2]    _i
0x1BD8       [2]    _x
0x1BDA       [1]    _banTCGPS
0x1BDB       [1]    _banMuestrear
0x1BDC       [1]    _banLeer
0x1BDD       [1]    _tasaMuestreo
0x1BDE       [1]    _numTMR1
0x1BDF       [6]    _tiempo
0x0E04       [0]    CS_ADXL355
0x0E04       [0]    LATA3_bit
0x0248       [2]    SPI1BUF
0x1BE5       [1]    _banInicio
0x0744       [2]    CLKDIVbits
0x0E04       [0]    LATA4_bit
0x0E14       [0]    RP2
0x0E14       [0]    LATB4_bit
0x0746       [2]    PLLFBDbits
0x0E00       [0]    TRISA4_bit
0x0E10       [0]    TRISB4_bit
0x0E10       [0]    TRISB10_bit
0x0E0E       [2]    ANSELA
0x0E1E       [2]    ANSELB
0x0E00       [0]    TRISA3_bit
0x1BE6       [4]    _segundoDeAjuste
0x1BEA       [1]    _contMuestras
0x1BEC       [2]    _y
0x1BEE       [2]    _i_gps
0x1BF0       [4]    _horaSistema
0x1BEB       [1]    _contCiclos
0x1BF4       [1]    _contTimer1
0x1BF5       [1]    _byteGPS
0x0E04       [0]    RP1
0x1BF6       [2]    _contFIFO
0x1BF8       [1]    _numFIFO
0x1BF9       [1]    _numSetsFIFO
0x1000      [21]    ?lstr3_Acelerografo
0x1015      [19]    ?lstr2_Acelerografo
0x1028      [14]    ?lstr7_Acelerografo
0x1036       [2]    _tiempoDeAjuste
0x1038      [16]    ?lstr8_Acelerografo
0x1048      [16]    ?lstr4_Acelerografo
0x1058       [9]    _datosLeidos
0x1061      [48]    ?lstr5_Acelerografo
0x1091      [14]    ?lstr1_Acelerografo
0x109F      [16]    ?lstr6_Acelerografo
0x0102       [2]    PR1
0x0104       [2]    T1CON
0x010C       [2]    PR2
0x0110       [2]    T2CON
0x0220       [2]    U1MODE
0x0222       [2]    U1STA
0x0224       [2]    U1TXREG
0x0226       [2]    U1RXREG
0x0228       [2]    U1BRG
0x0240       [2]    SPI1STAT
0x0242       [2]    SPI1CON
0x0248       [2]    SPI1BUF
0x0260       [2]    SPI2STAT
0x0262       [2]    SPI2CON
0x0268       [2]    SPI2BUF
0x0014       [2]    FARG_UART1_Write__data
0x0014       [2]    FARG_SPI2_Read_buffer
0x0014       [2]    FARG_UART1_Write_Text_uart_text
0x0014       [1]    FARG_ADXL355_write_byte_address
0x0016       [1]    FARG_ADXL355_write_byte_value
0x0014       [2]    FARG_SPI2_Write_data_out
0x0014       [2]    FARG_SPI1_Init_Advanced_master_mode
0x0016       [2]    FARG_SPI1_Init_Advanced_mode16
0x0018       [2]    FARG_SPI1_Init_Advanced_sec_prescaler
0x001A       [2]    FARG_SPI1_Init_Advanced_pri_prescaler
0x0014       [4]    FARG_UART1_Init_baud_rate
0x0014       [2]    FARG_ADXL355_read_FIFO_vectorFIFO
0x06A0       [2]    RPINR0
0x0014       [1]    FARG_ADXL355_read_byte_address
0x0014       [1]    FARG_ADXL355_init_tMuestreo
0x08C2       [2]    INTCON2
0x0E0E       [2]    ANSELA
0x0E1E       [2]    ANSELB
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x8000      [21]    ?ICS?lstr3_Acelerografo
0x8015      [19]    ?ICS?lstr2_Acelerografo
0x8028      [14]    ?ICS?lstr7_Acelerografo
0x8036       [2]    ?ICS_tiempoDeAjuste
0x8038      [16]    ?ICS?lstr8_Acelerografo
0x8048      [16]    ?ICS?lstr4_Acelerografo
0x8058       [9]    ?ICS_datosLeidos
0x8061      [48]    ?ICS?lstr5_Acelerografo
0x8091      [14]    ?ICS?lstr1_Acelerografo
0x809F      [16]    ?ICS?lstr6_Acelerografo
//** Label List: ** 
//----------------------------------------------
  L_ADXL355_init0
  L_ADXL355_init2
  L_ADXL355_init3
  L_ADXL355_init4
  L_ADXL355_init5
  L_ADXL355_init6
  L_ADXL355_init7
  L_ADXL355_read_data8
  L_ADXL355_read_data9
  L_ADXL355_read_data10
  L_ADXL355_read_data11
  L_ADXL355_read_data12
  L_ADXL355_read_data13
  L_ADXL355_read_data14
  L_ADXL355_read_data15
  L_ADXL355_read_FIFO16
  L_ConfigurarGPS18
  L_ConfigurarGPS20
  L_main22
  L_main23
  L_main24
  L_ConfiguracionPrincipal26
  L_Muestrear28
  L_Muestrear29
  L_Muestrear30
  L_Muestrear31
  L_Muestrear32
  L_Muestrear33
  L_Muestrear34
  L_Muestrear35
  L_Muestrear36
  L_Muestrear37
  L_Muestrear38
  L_Muestrear39
  L_Muestrear40
  L_Muestrear41
  L_Muestrear42
  L_Muestrear43
  L_Muestrear44
  L_Muestrear45
  L_Muestrear46
  L_Muestrear47
  L_Muestrear49
  L_spi_150
  L_spi_151
  L_spi_152
  L_spi_153
  L_spi_154
  L_spi_155
  L_spi_156
  L_spi_157
  L_spi_158
  L_spi_159
  L_spi_160
  L_spi_161
  L_spi_162
  L_spi_163
  L_spi_164
  L_spi_165
  L_spi_166
  L_spi_167
  L_spi_168
  L_spi_169
  L_spi_170
  L_int_171
  L_Timer1Int72
  L_Timer1Int73
  L_Timer1Int74
  L_Timer1Int75
  L_Timer1Int76
  L_Timer1Int77
  L_Timer1Int78
  L_Timer1Int79
  L_Timer1Int80
  L_Timer1Int81
  L_Timer1Int82
  L_Timer1Int83
  L_Timer1Int84
  L_Timer1Int85
  L_urx_186
  L_urx_187
  L_urx_188
  L_urx_189
  L_urx_190
  L_urx_191
  L_urx_192
  L_urx_193
  L_urx_194
  L_urx_195
  L_urx_196
  L_urx_197
  L_urx_198
  L_urx_199
  L_urx_1100
  L_urx_1101
  L_urx_1102
  L_urx_1103
  L_urx_1104
  L_urx_1105
  L_urx_1106
  L_urx_1107
  L_urx_1108
  L_urx_1109
  L_urx_1110
  L_urx_1111
  L_urx_1113
  L_InterrupcionP2114
  L__Muestrear116
  L__Muestrear117
  L__Muestrear118
  L__spi_1119
  L__spi_1120
  L__spi_1121
  L__spi_1122
  L__spi_1123
  L__spi_1124
  L__spi_1125
  L__spi_1126
  L__spi_1127
  L__spi_1128
  L__spi_1129
  L__spi_1130
  L__Timer1Int131
  L__Timer1Int132
  L__Timer1Int133
  L__urx_1134
  L__urx_1135
  L__urx_1136
  L__urx_1137
  L__urx_1138
  L__urx_1139
  L__urx_1140
  L__urx_1141
  L__urx_1142
  L__urx_1143
  L__urx_1144
  L__urx_1145
  L__urx_1146
  L_end_ADXL355_init
  _ADXL355_init
  L__ADXL355_init148
  L__ADXL355_init149
  L__ADXL355_init150
  L__ADXL355_init151
  L_end_ADXL355_write_byte
  _ADXL355_write_byte
  L_end_ADXL355_read_byte
  _ADXL355_read_byte
  L_end_ADXL355_read_data
  _ADXL355_read_data
  L__ADXL355_read_data155
  L__ADXL355_read_data156
  L__ADXL355_read_data157
  L_end_ADXL355_read_FIFO
  _ADXL355_read_FIFO
  L_end_ConfigurarGPS
  _ConfigurarGPS
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_Muestrear
  _Muestrear
  L__Muestrear167
  L__Muestrear168
  L__Muestrear169
  L__Muestrear170
  L__Muestrear171
  L__Muestrear172
  L__Muestrear173
  L__Muestrear174
  L_end_spi_1
  _spi_1
  L__spi_1176
  L__spi_1177
  L__spi_1178
  L__spi_1179
  L__spi_1180
  L__spi_1181
  L__spi_1182
  L__spi_1183
  L__spi_1184
  L__spi_1185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L_end_int_1
  _int_1
  L__int_1193
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int195
  L__Timer1Int196
  L__Timer1Int197
  L__Timer1Int198
  L__Timer1Int199
  L__Timer1Int200
  L_end_Timer2Int
  _Timer2Int
  L_end_urx_1
  _urx_1
  L__urx_1203
  L__urx_1204
  L__urx_1205
  L__urx_1206
  L__urx_1207
  L__urx_1208
  L__urx_1209
  L__urx_1210
  L__urx_1211
  L__urx_1212
  L__urx_1213
  L__urx_1214
  L__urx_1215
  L__urx_1216
  L__urx_1217
  L__urx_1218
  L__urx_1219
  L__urx_1220
  L__urx_1221
  L_end_InterrupcionP2
  _InterrupcionP2
  Delay_Cyc_loop
  Delay_Cyc_rez
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_ms3
  L_VDelay_ms4
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_Advanced_ms7
  L_VDelay_Advanced_ms8
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_Delay_1us11
  L_Delay_10us13
  L_Delay_22us15
  L_Delay_50us17
  L_Delay_80us19
  L_Delay_500us21
  L_Delay_5500us23
  L_Delay_1ms25
  L_Delay_5ms27
  L_Delay_8ms29
  L_Delay_10ms31
  L_Delay_100ms33
  L_Delay_1sec35
  L_end_Get_Fosc_kHz
  _Get_Fosc_kHz
  L_end_Get_Fosc_Per_Cyc
  _Get_Fosc_Per_Cyc
  L_end_Delay_Cyc
  _Delay_Cyc
  L_end_Delay_Cyc_Long
  _Delay_Cyc_Long
  L_end_VDelay_ms
  _VDelay_ms
  L_end_VDelay_Advanced_ms
  _VDelay_Advanced_ms
  L_end_Delay_W0
  _Delay_W0
  L_end_Delay_1us
  _Delay_1us
  L_end_Delay_10us
  _Delay_10us
  L_end_Delay_22us
  _Delay_22us
  L_end_Delay_50us
  _Delay_50us
  L_end_Delay_80us
  _Delay_80us
  L_end_Delay_500us
  _Delay_500us
  L_end_Delay_5500us
  _Delay_5500us
  L_end_Delay_1ms
  _Delay_1ms
  L_end_Delay_5ms
  _Delay_5ms
  L_end_Delay_8ms
  _Delay_8ms
  L_end_Delay_10ms
  _Delay_10ms
  L_end_Delay_100ms
  _Delay_100ms
  L_end_Delay_1sec
  _Delay_1sec
  Divide_32x32___testsus
  the_end_Divide_32x32
  Divide_32x32___divsi3
  Divide_32x32___udivsi3
  Divide_32x32_divtestb
  Divide_32x32_calcquot
  Divide_32x32_returnq
  Divide_32x32_nextbit
  Divide_32x32_iterate
  Modulus_32x32___testsus
  the_end_Modulus_32x32
  Modulus_32x32___modsi3
  Modulus_32x32___umodsi3
  Modulus_32x32_modtestb
  Modulus_32x32_calcrem
  Modulus_32x32_exitr
  Modulus_32x32___udivsi3
  Modulus_32x32_nextbit
  Modulus_32x32_iterate
  L_end__Multiply_32x32
  __Multiply_32x32
  L_end__Divide_32x32
  __Divide_32x32
  L_end__Modulus_32x32
  __Modulus_32x32
  L_SPI1_Read0
  L_SPI1_Read1
  L_SPI1_Read2
  L_SPI1_Read3
  L_SPI2_Read4
  L_SPI2_Read5
  L_SPI2_Read6
  L_SPI2_Read7
  L_end_SPI1_Read
  _SPI1_Read
  L_end_SPI1_Write
  _SPI1_Write
  L_end_SPI1_Init_Advanced
  _SPI1_Init_Advanced
  L_end_SPI1_Init
  _SPI1_Init
  L_end_SPI2_Read
  _SPI2_Read
  L_end_SPI2_Write
  _SPI2_Write
  L_end_SPI2_Init_Advanced
  _SPI2_Init_Advanced
  L_end_SPI2_Init
  _SPI2_Init
  L_end_SPI_Set_Active
  _SPI_Set_Active
  L_end_SPI_Read
  _SPI_Read
  L_end_SPI_Write
  _SPI_Write
  L_UART1_Write0
  L_UART1_Write1
  L_UART1_Write_Text2
  L_UART1_Write_Text3
  L_UART1_Read_Text4
  L_UART1_Read_Text5
  L_UART1_Read_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Init13
  L_UART1_Init14
  L_UART1_Init15
  L_UART1_Init_Advanced16
  L_UART1_Init_Advanced17
  L_UART1_Init_Advanced18
  L_UART1_Init_Advanced19
  L_UART1_Init_Advanced20
  L_UART1_Init_Advanced21
  L_UART1_Init_Advanced22
  L_UART1_Init_Advanced23
  L_UART1_Init_Advanced24
  L_UART2_Write25
  L_UART2_Write26
  L_UART2_Write_Text27
  L_UART2_Write_Text28
  L_UART2_Read_Text29
  L_UART2_Read_Text30
  L_UART2_Read_Text31
  L_UART2_Read_Text32
  L_UART2_Read_Text33
  L_UART2_Read_Text34
  L_UART2_Read_Text35
  L_UART2_Read_Text36
  L_UART2_Read_Text37
  L_UART2_Init38
  L_UART2_Init39
  L_UART2_Init40
  L_UART2_Init_Advanced41
  L_UART2_Init_Advanced42
  L_UART2_Init_Advanced43
  L_UART2_Init_Advanced44
  L_UART2_Init_Advanced45
  L_UART2_Init_Advanced46
  L_UART2_Init_Advanced47
  L_UART2_Init_Advanced48
  L_UART2_Init_Advanced49
  L_UART_Write_Text50
  L_UART_Write_Text51
  L_UART_Read_Text52
  L_UART_Read_Text53
  L_UART_Read_Text54
  L_UART_Read_Text55
  L_UART_Read_Text56
  L_UART_Read_Text57
  L_UART_Read_Text58
  L_UART_Read_Text59
  L_UART_Read_Text60
  L__UART1_Read_Text61
  L__UART1_Init62
  L__UART1_Init63
  L__UART1_Init64
  L__UART2_Read_Text65
  L__UART2_Init66
  L__UART2_Init67
  L__UART2_Init68
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L__UART1_Write_Text71
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L__UART1_Read_Text75
  L__UART1_Read_Text76
  L__UART1_Read_Text77
  L__UART1_Read_Text78
  L__UART1_Read_Text79
  L__UART1_Read_Text80
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Init
  _UART1_Init
  L__UART1_Init83
  L__UART1_Init84
  L__UART1_Init85
  L__UART1_Init86
  L__UART1_Init87
  L__UART1_Init88
  L__UART1_Init89
  L_end_UART1_Init_Advanced
  _UART1_Init_Advanced
  L__UART1_Init_Advanced91
  L__UART1_Init_Advanced92
  L__UART1_Init_Advanced93
  L__UART1_Init_Advanced94
  L__UART1_Init_Advanced95
  L__UART1_Init_Advanced96
  L__UART1_Init_Advanced97
  L__UART1_Init_Advanced98
  L__UART1_Init_Advanced99
  L__UART1_Init_Advanced100
  L__UART1_Init_Advanced101
  L__UART1_Init_Advanced102
  L__UART1_Init_Advanced103
  L__UART1_Init_Advanced104
  L__UART1_Init_Advanced105
  L_end_UART2_Write
  _UART2_Write
  L_end_UART2_Write_Text
  _UART2_Write_Text
  L__UART2_Write_Text108
  L_end_UART2_Data_Ready
  _UART2_Data_Ready
  L_end_UART2_Read
  _UART2_Read
  L_end_UART2_Read_Text
  _UART2_Read_Text
  L__UART2_Read_Text112
  L__UART2_Read_Text113
  L__UART2_Read_Text114
  L__UART2_Read_Text115
  L__UART2_Read_Text116
  L__UART2_Read_Text117
  L_end_UART2_Tx_Idle
  _UART2_Tx_Idle
  L_end_UART2_Init
  _UART2_Init
  L__UART2_Init120
  L__UART2_Init121
  L__UART2_Init122
  L__UART2_Init123
  L__UART2_Init124
  L__UART2_Init125
  L__UART2_Init126
  L_end_UART2_Init_Advanced
  _UART2_Init_Advanced
  L__UART2_Init_Advanced128
  L__UART2_Init_Advanced129
  L__UART2_Init_Advanced130
  L__UART2_Init_Advanced131
  L__UART2_Init_Advanced132
  L__UART2_Init_Advanced133
  L__UART2_Init_Advanced134
  L__UART2_Init_Advanced135
  L__UART2_Init_Advanced136
  L__UART2_Init_Advanced137
  L__UART2_Init_Advanced138
  L__UART2_Init_Advanced139
  L__UART2_Init_Advanced140
  L__UART2_Init_Advanced141
  L__UART2_Init_Advanced142
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L__UART_Write_Text146
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L__UART_Read_Text150
  L__UART_Read_Text151
  L__UART_Read_Text152
  L__UART_Read_Text153
  L__UART_Read_Text154
  L__UART_Read_Text155
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
  L_ADXL355_init0
  L_ADXL355_init2
  L_ADXL355_init3
  L_ADXL355_init4
  L_ADXL355_init5
  L_ADXL355_init6
  L_ADXL355_init7
  L_ADXL355_read_data8
  L_ADXL355_read_data9
  L_ADXL355_read_data10
  L_ADXL355_read_data11
  L_ADXL355_read_data12
  L_ADXL355_read_data13
  L_ADXL355_read_data14
  L_ADXL355_read_data15
  L_ADXL355_read_FIFO16
  L_ConfigurarGPS18
  L_ConfigurarGPS20
  L_main22
  L_main23
  L_main24
  L_ConfiguracionPrincipal26
  L_Muestrear28
  L_Muestrear29
  L_Muestrear30
  L_Muestrear31
  L_Muestrear32
  L_Muestrear33
  L_Muestrear34
  L_Muestrear35
  L_Muestrear36
  L_Muestrear37
  L_Muestrear38
  L_Muestrear39
  L_Muestrear40
  L_Muestrear41
  L_Muestrear42
  L_Muestrear43
  L_Muestrear44
  L_Muestrear45
  L_Muestrear46
  L_Muestrear47
  L_Muestrear49
  L_spi_150
  L_spi_151
  L_spi_152
  L_spi_153
  L_spi_154
  L_spi_155
  L_spi_156
  L_spi_157
  L_spi_158
  L_spi_159
  L_spi_160
  L_spi_161
  L_spi_162
  L_spi_163
  L_spi_164
  L_spi_165
  L_spi_166
  L_spi_167
  L_spi_168
  L_spi_169
  L_spi_170
  L_int_171
  L_Timer1Int72
  L_Timer1Int73
  L_Timer1Int74
  L_Timer1Int75
  L_Timer1Int76
  L_Timer1Int77
  L_Timer1Int78
  L_Timer1Int79
  L_Timer1Int80
  L_Timer1Int81
  L_Timer1Int82
  L_Timer1Int83
  L_Timer1Int84
  L_Timer1Int85
  L_urx_186
  L_urx_187
  L_urx_188
  L_urx_189
  L_urx_190
  L_urx_191
  L_urx_192
  L_urx_193
  L_urx_194
  L_urx_195
  L_urx_196
  L_urx_197
  L_urx_198
  L_urx_199
  L_urx_1100
  L_urx_1101
  L_urx_1102
  L_urx_1103
  L_urx_1104
  L_urx_1105
  L_urx_1106
  L_urx_1107
  L_urx_1108
  L_urx_1109
  L_urx_1110
  L_urx_1111
  L_urx_1113
  L_InterrupcionP2114
  L__Muestrear116
  L__Muestrear117
  L__Muestrear118
  L__spi_1119
  L__spi_1120
  L__spi_1121
  L__spi_1122
  L__spi_1123
  L__spi_1124
  L__spi_1125
  L__spi_1126
  L__spi_1127
  L__spi_1128
  L__spi_1129
  L__spi_1130
  L__Timer1Int131
  L__Timer1Int132
  L__Timer1Int133
  L__urx_1134
  L__urx_1135
  L__urx_1136
  L__urx_1137
  L__urx_1138
  L__urx_1139
  L__urx_1140
  L__urx_1141
  L__urx_1142
  L__urx_1143
  L__urx_1144
  L__urx_1145
  L__urx_1146
  L_end_ADXL355_init
  _ADXL355_init
  L__ADXL355_init148
  L__ADXL355_init149
  L__ADXL355_init150
  L__ADXL355_init151
  L_end_ADXL355_write_byte
  _ADXL355_write_byte
  L_end_ADXL355_read_byte
  _ADXL355_read_byte
  L_end_ADXL355_read_data
  _ADXL355_read_data
  L__ADXL355_read_data155
  L__ADXL355_read_data156
  L__ADXL355_read_data157
  L_end_ADXL355_read_FIFO
  _ADXL355_read_FIFO
  L_end_ConfigurarGPS
  _ConfigurarGPS
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_Muestrear
  _Muestrear
  L__Muestrear167
  L__Muestrear168
  L__Muestrear169
  L__Muestrear170
  L__Muestrear171
  L__Muestrear172
  L__Muestrear173
  L__Muestrear174
  L_end_spi_1
  _spi_1
  L__spi_1176
  L__spi_1177
  L__spi_1178
  L__spi_1179
  L__spi_1180
  L__spi_1181
  L__spi_1182
  L__spi_1183
  L__spi_1184
  L__spi_1185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L_end_int_1
  _int_1
  L__int_1193
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int195
  L__Timer1Int196
  L__Timer1Int197
  L__Timer1Int198
  L__Timer1Int199
  L__Timer1Int200
  L_end_Timer2Int
  _Timer2Int
  L_end_urx_1
  _urx_1
  L__urx_1203
  L__urx_1204
  L__urx_1205
  L__urx_1206
  L__urx_1207
  L__urx_1208
  L__urx_1209
  L__urx_1210
  L__urx_1211
  L__urx_1212
  L__urx_1213
  L__urx_1214
  L__urx_1215
  L__urx_1216
  L__urx_1217
  L__urx_1218
  L__urx_1219
  L__urx_1220
  L__urx_1221
  L_end_InterrupcionP2
  _InterrupcionP2
  L_ADXL355_init0
  L_ADXL355_init2
  L_ADXL355_init3
  L_ADXL355_init4
  L_ADXL355_init5
  L_ADXL355_init6
  L_ADXL355_init7
  L_ADXL355_read_data8
  L_ADXL355_read_data9
  L_ADXL355_read_data10
  L_ADXL355_read_data11
  L_ADXL355_read_data12
  L_ADXL355_read_data13
  L_ADXL355_read_data14
  L_ADXL355_read_data15
  L_ADXL355_read_FIFO16
  L_ConfigurarGPS18
  L_ConfigurarGPS20
  L_main22
  L_main23
  L_main24
  L_ConfiguracionPrincipal26
  L_Muestrear28
  L_Muestrear29
  L_Muestrear30
  L_Muestrear31
  L_Muestrear32
  L_Muestrear33
  L_Muestrear34
  L_Muestrear35
  L_Muestrear36
  L_Muestrear37
  L_Muestrear38
  L_Muestrear39
  L_Muestrear40
  L_Muestrear41
  L_Muestrear42
  L_Muestrear43
  L_Muestrear44
  L_Muestrear45
  L_Muestrear46
  L_Muestrear47
  L_Muestrear49
  L_spi_150
  L_spi_151
  L_spi_152
  L_spi_153
  L_spi_154
  L_spi_155
  L_spi_156
  L_spi_157
  L_spi_158
  L_spi_159
  L_spi_160
  L_spi_161
  L_spi_162
  L_spi_163
  L_spi_164
  L_spi_165
  L_spi_166
  L_spi_167
  L_spi_168
  L_spi_169
  L_spi_170
  L_int_171
  L_Timer1Int72
  L_Timer1Int73
  L_Timer1Int74
  L_Timer1Int75
  L_Timer1Int76
  L_Timer1Int77
  L_Timer1Int78
  L_Timer1Int79
  L_Timer1Int80
  L_Timer1Int81
  L_Timer1Int82
  L_Timer1Int83
  L_Timer1Int84
  L_Timer1Int85
  L_urx_186
  L_urx_187
  L_urx_188
  L_urx_189
  L_urx_190
  L_urx_191
  L_urx_192
  L_urx_193
  L_urx_194
  L_urx_195
  L_urx_196
  L_urx_197
  L_urx_198
  L_urx_199
  L_urx_1100
  L_urx_1101
  L_urx_1102
  L_urx_1103
  L_urx_1104
  L_urx_1105
  L_urx_1106
  L_urx_1107
  L_urx_1108
  L_urx_1109
  L_urx_1110
  L_urx_1111
  L_urx_1113
  L_InterrupcionP2114
  L__Muestrear116
  L__Muestrear117
  L__Muestrear118
  L__spi_1119
  L__spi_1120
  L__spi_1121
  L__spi_1122
  L__spi_1123
  L__spi_1124
  L__spi_1125
  L__spi_1126
  L__spi_1127
  L__spi_1128
  L__spi_1129
  L__spi_1130
  L__Timer1Int131
  L__Timer1Int132
  L__Timer1Int133
  L__urx_1134
  L__urx_1135
  L__urx_1136
  L__urx_1137
  L__urx_1138
  L__urx_1139
  L__urx_1140
  L__urx_1141
  L__urx_1142
  L__urx_1143
  L__urx_1144
  L__urx_1145
  L__urx_1146
  L_end_ADXL355_init
  _ADXL355_init
  L__ADXL355_init148
  L__ADXL355_init149
  L__ADXL355_init150
  L__ADXL355_init151
  L_end_ADXL355_write_byte
  _ADXL355_write_byte
  L_end_ADXL355_read_byte
  _ADXL355_read_byte
  L_end_ADXL355_read_data
  _ADXL355_read_data
  L__ADXL355_read_data155
  L__ADXL355_read_data156
  L__ADXL355_read_data157
  L_end_ADXL355_read_FIFO
  _ADXL355_read_FIFO
  L_end_ConfigurarGPS
  _ConfigurarGPS
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_Muestrear
  _Muestrear
  L__Muestrear167
  L__Muestrear168
  L__Muestrear169
  L__Muestrear170
  L__Muestrear171
  L__Muestrear172
  L__Muestrear173
  L__Muestrear174
  L_end_spi_1
  _spi_1
  L__spi_1176
  L__spi_1177
  L__spi_1178
  L__spi_1179
  L__spi_1180
  L__spi_1181
  L__spi_1182
  L__spi_1183
  L__spi_1184
  L__spi_1185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L_end_int_1
  _int_1
  L__int_1193
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int195
  L__Timer1Int196
  L__Timer1Int197
  L__Timer1Int198
  L__Timer1Int199
  L__Timer1Int200
  L_end_Timer2Int
  _Timer2Int
  L_end_urx_1
  _urx_1
  L__urx_1203
  L__urx_1204
  L__urx_1205
  L__urx_1206
  L__urx_1207
  L__urx_1208
  L__urx_1209
  L__urx_1210
  L__urx_1211
  L__urx_1212
  L__urx_1213
  L__urx_1214
  L__urx_1215
  L__urx_1216
  L__urx_1217
  L__urx_1218
  L__urx_1219
  L__urx_1220
  L__urx_1221
  L_end_InterrupcionP2
  _InterrupcionP2
  L_ADXL355_init0
  L_ADXL355_init2
  L_ADXL355_init3
  L_ADXL355_init4
  L_ADXL355_init5
  L_ADXL355_init6
  L_ADXL355_init7
  L_ADXL355_read_data8
  L_ADXL355_read_data9
  L_ADXL355_read_data10
  L_ADXL355_read_data11
  L_ADXL355_read_data12
  L_ADXL355_read_data13
  L_ADXL355_read_data14
  L_ADXL355_read_data15
  L_ADXL355_read_FIFO16
  L_ConfigurarGPS18
  L_ConfigurarGPS20
  L_main22
  L_main23
  L_main24
  L_ConfiguracionPrincipal26
  L_Muestrear28
  L_Muestrear29
  L_Muestrear30
  L_Muestrear31
  L_Muestrear32
  L_Muestrear33
  L_Muestrear34
  L_Muestrear35
  L_Muestrear36
  L_Muestrear37
  L_Muestrear38
  L_Muestrear39
  L_Muestrear40
  L_Muestrear41
  L_Muestrear42
  L_Muestrear43
  L_Muestrear44
  L_Muestrear45
  L_Muestrear46
  L_Muestrear47
  L_Muestrear49
  L_spi_150
  L_spi_151
  L_spi_152
  L_spi_153
  L_spi_154
  L_spi_155
  L_spi_156
  L_spi_157
  L_spi_158
  L_spi_159
  L_spi_160
  L_spi_161
  L_spi_162
  L_spi_163
  L_spi_164
  L_spi_165
  L_spi_166
  L_spi_167
  L_spi_168
  L_spi_169
  L_spi_170
  L_int_171
  L_Timer1Int72
  L_Timer1Int73
  L_Timer1Int74
  L_Timer1Int75
  L_Timer1Int76
  L_Timer1Int77
  L_Timer1Int78
  L_Timer1Int79
  L_Timer1Int80
  L_Timer1Int81
  L_Timer1Int82
  L_Timer1Int83
  L_Timer1Int84
  L_Timer1Int85
  L_urx_186
  L_urx_187
  L_urx_188
  L_urx_189
  L_urx_190
  L_urx_191
  L_urx_192
  L_urx_193
  L_urx_194
  L_urx_195
  L_urx_196
  L_urx_197
  L_urx_198
  L_urx_199
  L_urx_1100
  L_urx_1101
  L_urx_1102
  L_urx_1103
  L_urx_1104
  L_urx_1105
  L_urx_1106
  L_urx_1107
  L_urx_1108
  L_urx_1109
  L_urx_1110
  L_urx_1111
  L_urx_1113
  L_InterrupcionP2114
  L__Muestrear116
  L__Muestrear117
  L__Muestrear118
  L__spi_1119
  L__spi_1120
  L__spi_1121
  L__spi_1122
  L__spi_1123
  L__spi_1124
  L__spi_1125
  L__spi_1126
  L__spi_1127
  L__spi_1128
  L__spi_1129
  L__spi_1130
  L__Timer1Int131
  L__Timer1Int132
  L__Timer1Int133
  L__urx_1134
  L__urx_1135
  L__urx_1136
  L__urx_1137
  L__urx_1138
  L__urx_1139
  L__urx_1140
  L__urx_1141
  L__urx_1142
  L__urx_1143
  L__urx_1144
  L__urx_1145
  L__urx_1146
  L_end_ADXL355_init
  _ADXL355_init
  L__ADXL355_init148
  L__ADXL355_init149
  L__ADXL355_init150
  L__ADXL355_init151
  L_end_ADXL355_write_byte
  _ADXL355_write_byte
  L_end_ADXL355_read_byte
  _ADXL355_read_byte
  L_end_ADXL355_read_data
  _ADXL355_read_data
  L__ADXL355_read_data155
  L__ADXL355_read_data156
  L__ADXL355_read_data157
  L_end_ADXL355_read_FIFO
  _ADXL355_read_FIFO
  L_end_ConfigurarGPS
  _ConfigurarGPS
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_Muestrear
  _Muestrear
  L__Muestrear167
  L__Muestrear168
  L__Muestrear169
  L__Muestrear170
  L__Muestrear171
  L__Muestrear172
  L__Muestrear173
  L__Muestrear174
  L_end_spi_1
  _spi_1
  L__spi_1176
  L__spi_1177
  L__spi_1178
  L__spi_1179
  L__spi_1180
  L__spi_1181
  L__spi_1182
  L__spi_1183
  L__spi_1184
  L__spi_1185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L_end_int_1
  _int_1
  L__int_1193
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int195
  L__Timer1Int196
  L__Timer1Int197
  L__Timer1Int198
  L__Timer1Int199
  L__Timer1Int200
  L_end_Timer2Int
  _Timer2Int
  L_end_urx_1
  _urx_1
  L__urx_1203
  L__urx_1204
  L__urx_1205
  L__urx_1206
  L__urx_1207
  L__urx_1208
  L__urx_1209
  L__urx_1210
  L__urx_1211
  L__urx_1212
  L__urx_1213
  L__urx_1214
  L__urx_1215
  L__urx_1216
  L__urx_1217
  L__urx_1218
  L__urx_1219
  L__urx_1220
  L__urx_1221
  L_end_InterrupcionP2
  _InterrupcionP2
  L_ADXL355_init0
  L_ADXL355_init2
  L_ADXL355_init3
  L_ADXL355_init4
  L_ADXL355_init5
  L_ADXL355_init6
  L_ADXL355_init7
  L_ADXL355_read_data8
  L_ADXL355_read_data9
  L_ADXL355_read_data10
  L_ADXL355_read_data11
  L_ADXL355_read_data12
  L_ADXL355_read_data13
  L_ADXL355_read_data14
  L_ADXL355_read_data15
  L_ADXL355_read_FIFO16
  L_ConfigurarGPS18
  L_ConfigurarGPS20
  L_main22
  L_main23
  L_main24
  L_ConfiguracionPrincipal26
  L_Muestrear28
  L_Muestrear29
  L_Muestrear30
  L_Muestrear31
  L_Muestrear32
  L_Muestrear33
  L_Muestrear34
  L_Muestrear35
  L_Muestrear36
  L_Muestrear37
  L_Muestrear38
  L_Muestrear39
  L_Muestrear40
  L_Muestrear41
  L_Muestrear42
  L_Muestrear43
  L_Muestrear44
  L_Muestrear45
  L_Muestrear46
  L_Muestrear47
  L_Muestrear49
  L_spi_150
  L_spi_151
  L_spi_152
  L_spi_153
  L_spi_154
  L_spi_155
  L_spi_156
  L_spi_157
  L_spi_158
  L_spi_159
  L_spi_160
  L_spi_161
  L_spi_162
  L_spi_163
  L_spi_164
  L_spi_165
  L_spi_166
  L_spi_167
  L_spi_168
  L_spi_169
  L_spi_170
  L_int_171
  L_Timer1Int72
  L_Timer1Int73
  L_Timer1Int74
  L_Timer1Int75
  L_Timer1Int76
  L_Timer1Int77
  L_Timer1Int78
  L_Timer1Int79
  L_Timer1Int80
  L_Timer1Int81
  L_Timer1Int82
  L_Timer1Int83
  L_Timer1Int84
  L_Timer1Int85
  L_urx_186
  L_urx_187
  L_urx_188
  L_urx_189
  L_urx_190
  L_urx_191
  L_urx_192
  L_urx_193
  L_urx_194
  L_urx_195
  L_urx_196
  L_urx_197
  L_urx_198
  L_urx_199
  L_urx_1100
  L_urx_1101
  L_urx_1102
  L_urx_1103
  L_urx_1104
  L_urx_1105
  L_urx_1106
  L_urx_1107
  L_urx_1108
  L_urx_1109
  L_urx_1110
  L_urx_1111
  L_urx_1113
  L_InterrupcionP2114
  L__Muestrear116
  L__Muestrear117
  L__Muestrear118
  L__spi_1119
  L__spi_1120
  L__spi_1121
  L__spi_1122
  L__spi_1123
  L__spi_1124
  L__spi_1125
  L__spi_1126
  L__spi_1127
  L__spi_1128
  L__spi_1129
  L__spi_1130
  L__Timer1Int131
  L__Timer1Int132
  L__Timer1Int133
  L__urx_1134
  L__urx_1135
  L__urx_1136
  L__urx_1137
  L__urx_1138
  L__urx_1139
  L__urx_1140
  L__urx_1141
  L__urx_1142
  L__urx_1143
  L__urx_1144
  L__urx_1145
  L__urx_1146
  L_end_ADXL355_init
  _ADXL355_init
  L__ADXL355_init148
  L__ADXL355_init149
  L__ADXL355_init150
  L__ADXL355_init151
  L_end_ADXL355_write_byte
  _ADXL355_write_byte
  L_end_ADXL355_read_byte
  _ADXL355_read_byte
  L_end_ADXL355_read_data
  _ADXL355_read_data
  L__ADXL355_read_data155
  L__ADXL355_read_data156
  L__ADXL355_read_data157
  L_end_ADXL355_read_FIFO
  _ADXL355_read_FIFO
  L_end_ConfigurarGPS
  _ConfigurarGPS
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_Muestrear
  _Muestrear
  L__Muestrear167
  L__Muestrear168
  L__Muestrear169
  L__Muestrear170
  L__Muestrear171
  L__Muestrear172
  L__Muestrear173
  L__Muestrear174
  L_end_spi_1
  _spi_1
  L__spi_1176
  L__spi_1177
  L__spi_1178
  L__spi_1179
  L__spi_1180
  L__spi_1181
  L__spi_1182
  L__spi_1183
  L__spi_1184
  L__spi_1185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L_end_int_1
  _int_1
  L__int_1193
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int195
  L__Timer1Int196
  L__Timer1Int197
  L__Timer1Int198
  L__Timer1Int199
  L__Timer1Int200
  L_end_Timer2Int
  _Timer2Int
  L_end_urx_1
  _urx_1
  L__urx_1203
  L__urx_1204
  L__urx_1205
  L__urx_1206
  L__urx_1207
  L__urx_1208
  L__urx_1209
  L__urx_1210
  L__urx_1211
  L__urx_1212
  L__urx_1213
  L__urx_1214
  L__urx_1215
  L__urx_1216
  L__urx_1217
  L__urx_1218
  L__urx_1219
  L__urx_1220
  L__urx_1221
  L_end_InterrupcionP2
  _InterrupcionP2
  L_ADXL355_init0
  L_ADXL355_init2
  L_ADXL355_init3
  L_ADXL355_init4
  L_ADXL355_init5
  L_ADXL355_init6
  L_ADXL355_init7
  L_ADXL355_read_data8
  L_ADXL355_read_data9
  L_ADXL355_read_data10
  L_ADXL355_read_data11
  L_ADXL355_read_data12
  L_ADXL355_read_data13
  L_ADXL355_read_data14
  L_ADXL355_read_data15
  L_ADXL355_read_FIFO16
  L_ConfigurarGPS18
  L_ConfigurarGPS20
  L_main22
  L_main23
  L_main24
  L_ConfiguracionPrincipal26
  L_Muestrear28
  L_Muestrear29
  L_Muestrear30
  L_Muestrear31
  L_Muestrear32
  L_Muestrear33
  L_Muestrear34
  L_Muestrear35
  L_Muestrear36
  L_Muestrear37
  L_Muestrear38
  L_Muestrear39
  L_Muestrear40
  L_Muestrear41
  L_Muestrear42
  L_Muestrear43
  L_Muestrear44
  L_Muestrear45
  L_Muestrear46
  L_Muestrear47
  L_Muestrear49
  L_spi_150
  L_spi_151
  L_spi_152
  L_spi_153
  L_spi_154
  L_spi_155
  L_spi_156
  L_spi_157
  L_spi_158
  L_spi_159
  L_spi_160
  L_spi_161
  L_spi_162
  L_spi_163
  L_spi_164
  L_spi_165
  L_spi_166
  L_spi_167
  L_spi_168
  L_spi_169
  L_spi_170
  L_int_171
  L_Timer1Int72
  L_Timer1Int73
  L_Timer1Int74
  L_Timer1Int75
  L_Timer1Int76
  L_Timer1Int77
  L_Timer1Int78
  L_Timer1Int79
  L_Timer1Int80
  L_Timer1Int81
  L_Timer1Int82
  L_Timer1Int83
  L_Timer1Int84
  L_Timer1Int85
  L_urx_186
  L_urx_187
  L_urx_188
  L_urx_189
  L_urx_190
  L_urx_191
  L_urx_192
  L_urx_193
  L_urx_194
  L_urx_195
  L_urx_196
  L_urx_197
  L_urx_198
  L_urx_199
  L_urx_1100
  L_urx_1101
  L_urx_1102
  L_urx_1103
  L_urx_1104
  L_urx_1105
  L_urx_1106
  L_urx_1107
  L_urx_1108
  L_urx_1109
  L_urx_1110
  L_urx_1111
  L_urx_1113
  L_InterrupcionP2114
  L__Muestrear116
  L__Muestrear117
  L__Muestrear118
  L__spi_1119
  L__spi_1120
  L__spi_1121
  L__spi_1122
  L__spi_1123
  L__spi_1124
  L__spi_1125
  L__spi_1126
  L__spi_1127
  L__spi_1128
  L__spi_1129
  L__spi_1130
  L__Timer1Int131
  L__Timer1Int132
  L__Timer1Int133
  L__urx_1134
  L__urx_1135
  L__urx_1136
  L__urx_1137
  L__urx_1138
  L__urx_1139
  L__urx_1140
  L__urx_1141
  L__urx_1142
  L__urx_1143
  L__urx_1144
  L__urx_1145
  L__urx_1146
  L_end_ADXL355_init
  _ADXL355_init
  L__ADXL355_init148
  L__ADXL355_init149
  L__ADXL355_init150
  L__ADXL355_init151
  L_end_ADXL355_write_byte
  _ADXL355_write_byte
  L_end_ADXL355_read_byte
  _ADXL355_read_byte
  L_end_ADXL355_read_data
  _ADXL355_read_data
  L__ADXL355_read_data155
  L__ADXL355_read_data156
  L__ADXL355_read_data157
  L_end_ADXL355_read_FIFO
  _ADXL355_read_FIFO
  L_end_ConfigurarGPS
  _ConfigurarGPS
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_Muestrear
  _Muestrear
  L__Muestrear167
  L__Muestrear168
  L__Muestrear169
  L__Muestrear170
  L__Muestrear171
  L__Muestrear172
  L__Muestrear173
  L__Muestrear174
  L_end_spi_1
  _spi_1
  L__spi_1176
  L__spi_1177
  L__spi_1178
  L__spi_1179
  L__spi_1180
  L__spi_1181
  L__spi_1182
  L__spi_1183
  L__spi_1184
  L__spi_1185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L_end_int_1
  _int_1
  L__int_1193
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int195
  L__Timer1Int196
  L__Timer1Int197
  L__Timer1Int198
  L__Timer1Int199
  L__Timer1Int200
  L_end_Timer2Int
  _Timer2Int
  L_end_urx_1
  _urx_1
  L__urx_1203
  L__urx_1204
  L__urx_1205
  L__urx_1206
  L__urx_1207
  L__urx_1208
  L__urx_1209
  L__urx_1210
  L__urx_1211
  L__urx_1212
  L__urx_1213
  L__urx_1214
  L__urx_1215
  L__urx_1216
  L__urx_1217
  L__urx_1218
  L__urx_1219
  L__urx_1220
  L__urx_1221
  L_end_InterrupcionP2
  _InterrupcionP2
