;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 10/5/2019 12:29:10
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x000000040652  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x0004A2  	1186
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x000000  	0
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x0005C2  	1474
0x002A	0x000000  	0
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x00071E  	1822
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
0x0100	0x000000  	0
0x0102	0x000000  	0
0x0104	0x000000  	0
0x0106	0x000000  	0
0x0108	0x000000  	0
0x010A	0x000000  	0
0x010C	0x000000  	0
0x010E	0x000000  	0
0x0110	0x000000  	0
0x0112	0x000000  	0
0x0114	0x000000  	0
0x0116	0x000000  	0
0x0118	0x000000  	0
0x011A	0x000000  	0
0x011C	0x000000  	0
0x011E	0x000000  	0
0x0120	0x000000  	0
0x0122	0x000000  	0
0x0124	0x000000  	0
0x0126	0x000000  	0
0x0128	0x000000  	0
0x012A	0x000000  	0
0x012C	0x000000  	0
0x012E	0x000000  	0
0x0130	0x000000  	0
0x0132	0x000000  	0
0x0134	0x000000  	0
0x0136	0x000000  	0
0x0138	0x000000  	0
0x013A	0x000000  	0
0x013C	0x000000  	0
0x013E	0x000000  	0
0x0140	0x000000  	0
0x0142	0x000000  	0
0x0144	0x000000  	0
0x0146	0x000000  	0
0x0148	0x000000  	0
0x014A	0x000000  	0
0x014C	0x000000  	0
0x014E	0x000000  	0
0x0150	0x000000  	0
0x0152	0x000000  	0
0x0154	0x000000  	0
0x0156	0x000000  	0
0x0158	0x000000  	0
0x015A	0x000000  	0
0x015C	0x000000  	0
0x015E	0x000000  	0
0x0160	0x000000  	0
0x0162	0x000000  	0
0x0164	0x000000  	0
0x0166	0x000000  	0
0x0168	0x000000  	0
0x016A	0x000000  	0
0x016C	0x000000  	0
0x016E	0x000000  	0
0x0170	0x000000  	0
0x0172	0x000000  	0
0x0174	0x000000  	0
0x0176	0x000000  	0
0x0178	0x000000  	0
0x017A	0x000000  	0
0x017C	0x000000  	0
0x017E	0x000000  	0
0x0180	0x000000  	0
0x0182	0x000000  	0
0x0184	0x000000  	0
0x0186	0x000000  	0
0x0188	0x000000  	0
0x018A	0x000000  	0
0x018C	0x000000  	0
0x018E	0x000000  	0
0x0190	0x000000  	0
0x0192	0x000000  	0
0x0194	0x000000  	0
0x0196	0x000000  	0
0x0198	0x000000  	0
0x019A	0x000000  	0
0x019C	0x000000  	0
0x019E	0x000000  	0
0x01A0	0x000000  	0
0x01A2	0x000000  	0
0x01A4	0x000000  	0
0x01A6	0x000000  	0
0x01A8	0x000000  	0
0x01AA	0x000000  	0
0x01AC	0x000000  	0
0x01AE	0x000000  	0
0x01B0	0x000000  	0
0x01B2	0x000000  	0
0x01B4	0x000000  	0
0x01B6	0x000000  	0
0x01B8	0x000000  	0
0x01BA	0x000000  	0
0x01BC	0x000000  	0
0x01BE	0x000000  	0
0x01C0	0x000000  	0
0x01C2	0x000000  	0
0x01C4	0x000000  	0
0x01C6	0x000000  	0
0x01C8	0x000000  	0
0x01CA	0x000000  	0
0x01CC	0x000000  	0
0x01CE	0x000000  	0
0x01D0	0x000000  	0
0x01D2	0x000000  	0
0x01D4	0x000000  	0
0x01D6	0x000000  	0
0x01D8	0x000000  	0
0x01DA	0x000000  	0
0x01DC	0x000000  	0
0x01DE	0x000000  	0
0x01E0	0x000000  	0
0x01E2	0x000000  	0
0x01E4	0x000000  	0
0x01E6	0x000000  	0
0x01E8	0x000000  	0
0x01EA	0x000000  	0
0x01EC	0x000000  	0
0x01EE	0x000000  	0
0x01F0	0x000000  	0
0x01F2	0x000000  	0
0x01F4	0x000000  	0
0x01F6	0x000000  	0
0x01F8	0x000000  	0
0x01FA	0x000000  	0
0x01FC	0x000000  	0
0x01FE	0x000000  	0
_main:
0x0652	0x21AE6F  	MOV	#6886, W15
0x0654	0x27FFF0  	MOV	#32767, W0
0x0656	0xB7A020  	MOV	WREG, SPLIM
0x0658	0x202010  	MOV	#513, W0
0x065A	0xB7A032  	MOV	WREG, DSRPAG
0x065C	0x200040  	MOV	#4, W0
0x065E	0xB72044  	IOR	CORCON
0x0660	0x000000020898  	CALL	2200
;Acelerografo.c,264 :: 		void main() {
;Acelerografo.c,266 :: 		ConfiguracionPrincipal();
0x0664	0x07FE92  	RCALL	_ConfiguracionPrincipal
;Acelerografo.c,268 :: 		tiempo[0] = 19;                                    //Año
0x0666	0x21AD61  	MOV	#lo_addr(_tiempo), W1
0x0668	0xB3C130  	MOV.B	#19, W0
0x066A	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,269 :: 		tiempo[1] = 49;                                    //Dia
0x066C	0x21AD71  	MOV	#lo_addr(_tiempo+1), W1
0x066E	0xB3C310  	MOV.B	#49, W0
0x0670	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,270 :: 		tiempo[2] = 9;                                     //Hora
0x0672	0x21AD81  	MOV	#lo_addr(_tiempo+2), W1
0x0674	0xB3C090  	MOV.B	#9, W0
0x0676	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,271 :: 		tiempo[3] = 30;                                    //Minuto
0x0678	0x21AD91  	MOV	#lo_addr(_tiempo+3), W1
0x067A	0xB3C1E0  	MOV.B	#30, W0
0x067C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,272 :: 		tiempo[4] = 0;                                     //Segundo
0x067E	0x21ADA1  	MOV	#lo_addr(_tiempo+4), W1
0x0680	0xEF2000  	CLR	W0
0x0682	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,274 :: 		datosLeidos[0] = 111;
0x0684	0x210001  	MOV	#lo_addr(_datosLeidos), W1
0x0686	0xB3C6F0  	MOV.B	#111, W0
0x0688	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,275 :: 		datosLeidos[1] = 111;
0x068A	0x210011  	MOV	#lo_addr(_datosLeidos+1), W1
0x068C	0xB3C6F0  	MOV.B	#111, W0
0x068E	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,276 :: 		datosLeidos[2] = 111;
0x0690	0x210021  	MOV	#lo_addr(_datosLeidos+2), W1
0x0692	0xB3C6F0  	MOV.B	#111, W0
0x0694	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,277 :: 		datosLeidos[3] = 111;
0x0696	0x210031  	MOV	#lo_addr(_datosLeidos+3), W1
0x0698	0xB3C6F0  	MOV.B	#111, W0
0x069A	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,278 :: 		datosLeidos[4] = 111;
0x069C	0x210041  	MOV	#lo_addr(_datosLeidos+4), W1
0x069E	0xB3C6F0  	MOV.B	#111, W0
0x06A0	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,279 :: 		datosLeidos[5] = 111;
0x06A2	0x210051  	MOV	#lo_addr(_datosLeidos+5), W1
0x06A4	0xB3C6F0  	MOV.B	#111, W0
0x06A6	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,280 :: 		datosLeidos[6] = 111;
0x06A8	0x210061  	MOV	#lo_addr(_datosLeidos+6), W1
0x06AA	0xB3C6F0  	MOV.B	#111, W0
0x06AC	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,281 :: 		datosLeidos[7] = 111;
0x06AE	0x210071  	MOV	#lo_addr(_datosLeidos+7), W1
0x06B0	0xB3C6F0  	MOV.B	#111, W0
0x06B2	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,282 :: 		datosLeidos[8] = 111;
0x06B4	0x210081  	MOV	#lo_addr(_datosLeidos+8), W1
0x06B6	0xB3C6F0  	MOV.B	#111, W0
0x06B8	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,284 :: 		banTI = 0;
0x06BA	0x21ADD1  	MOV	#lo_addr(_banTI), W1
0x06BC	0xEF2000  	CLR	W0
0x06BE	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,285 :: 		banLec = 0;
0x06C0	0x21ADC1  	MOV	#lo_addr(_banLec), W1
0x06C2	0xEF2000  	CLR	W0
0x06C4	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,286 :: 		banCiclo = 0;
0x06C6	0x21ADB1  	MOV	#lo_addr(_banCiclo), W1
0x06C8	0xEF2000  	CLR	W0
0x06CA	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,288 :: 		i = 0;
0x06CC	0xEF2000  	CLR	W0
0x06CE	0x88D6A0  	MOV	W0, _i
;Acelerografo.c,289 :: 		x = 0;
0x06D0	0xEF2000  	CLR	W0
0x06D2	0x88D670  	MOV	W0, _x
;Acelerografo.c,290 :: 		y = 0;
0x06D4	0xEF2000  	CLR	W0
0x06D6	0x88D660  	MOV	W0, _y
;Acelerografo.c,292 :: 		contMuestras = 0;
0x06D8	0x21ACA1  	MOV	#lo_addr(_contMuestras), W1
0x06DA	0xEF2000  	CLR	W0
0x06DC	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,293 :: 		contCiclos = 0;
0x06DE	0x21ACB1  	MOV	#lo_addr(_contCiclos), W1
0x06E0	0xEF2000  	CLR	W0
0x06E2	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,294 :: 		contFIFO = 0;
0x06E4	0xEF2000  	CLR	W0
0x06E6	0x88D690  	MOV	W0, _contFIFO
;Acelerografo.c,295 :: 		numFIFO = 0;
0x06E8	0x21AD11  	MOV	#lo_addr(_numFIFO), W1
0x06EA	0xEF2000  	CLR	W0
0x06EC	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,296 :: 		numSetsFIFO = 0;
0x06EE	0x21AD01  	MOV	#lo_addr(_numSetsFIFO), W1
0x06F0	0xEF2000  	CLR	W0
0x06F2	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,297 :: 		contTimer1 = 0;
0x06F4	0x21ADF1  	MOV	#lo_addr(_contTimer1), W1
0x06F6	0xEF2000  	CLR	W0
0x06F8	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,299 :: 		RP1 = 0;
0x06FA	0xA98E04  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;Acelerografo.c,300 :: 		RP2 = 0;
0x06FC	0xA98E14  	BCLR	LATB4_bit, BitPos(LATB4_bit+0)
;Acelerografo.c,302 :: 		puntero_8 = &auxiliar;
0x06FE	0x21AE00  	MOV	#lo_addr(_auxiliar), W0
0x0700	0x88D720  	MOV	W0, _puntero_8
;Acelerografo.c,304 :: 		SPI1BUF = 0x00;
0x0702	0xEF2248  	CLR	SPI1BUF
;Acelerografo.c,310 :: 		banInicio = 1;
0x0704	0x21ADE1  	MOV	#lo_addr(_banInicio), W1
0x0706	0xB3C010  	MOV.B	#1, W0
0x0708	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,312 :: 		while(1){
L_main57:
;Acelerografo.c,314 :: 		Delay_ms(500);
0x070A	0x2003E8  	MOV	#62, W8
0x070C	0x209247  	MOV	#2340, W7
L_main59:
0x070E	0xED200E  	DEC	W7
0x0710	0x3AFFFE  	BRA NZ	L_main59
0x0712	0xED2010  	DEC	W8
0x0714	0x3AFFFC  	BRA NZ	L_main59
0x0716	0x000000  	NOP
0x0718	0x000000  	NOP
;Acelerografo.c,316 :: 		}
0x071A	0x37FFF7  	BRA	L_main57
;Acelerografo.c,318 :: 		}
L_end_main:
L__main_end_loop:
0x071C	0x37FFFF  	BRA	L__main_end_loop
; end of _main
_ConfiguracionPrincipal:
;Acelerografo.c,57 :: 		void ConfiguracionPrincipal(){
;Acelerografo.c,60 :: 		CLKDIVbits.FRCDIV = 0;                                                     //FIN=FRC/1
0x038A	0x781F8A  	PUSH	W10
0x038C	0x781F8B  	PUSH	W11
0x038E	0x781F8C  	PUSH	W12
0x0390	0x781F8D  	PUSH	W13
0x0392	0x803A21  	MOV	CLKDIVbits, W1
0x0394	0x2F8FF0  	MOV	#63743, W0
0x0396	0x608000  	AND	W1, W0, W0
0x0398	0xB7A744  	MOV	WREG, CLKDIVbits
;Acelerografo.c,61 :: 		CLKDIVbits.PLLPOST = 0;                                                    //N2=2
0x039A	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x039C	0x784090  	MOV.B	[W0], W1
0x039E	0xB3C3F0  	MOV.B	#63, W0
0x03A0	0x60C080  	AND.B	W1, W0, W1
0x03A2	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x03A4	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,62 :: 		CLKDIVbits.PLLPRE = 5;                                                     //N1=7
0x03A6	0xB3C050  	MOV.B	#5, W0
0x03A8	0x784080  	MOV.B	W0, W1
0x03AA	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x03AC	0x68C090  	XOR.B	W1, [W0], W1
0x03AE	0x60C0FF  	AND.B	W1, #31, W1
0x03B0	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x03B2	0x68C090  	XOR.B	W1, [W0], W1
0x03B4	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x03B6	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,63 :: 		PLLFBDbits.PLLDIV = 150;                                                   //M=152
0x03B8	0x200960  	MOV	#150, W0
0x03BA	0x780080  	MOV	W0, W1
0x03BC	0x207460  	MOV	#lo_addr(PLLFBDbits), W0
0x03BE	0x688090  	XOR	W1, [W0], W1
0x03C0	0x201FF0  	MOV	#511, W0
0x03C2	0x608080  	AND	W1, W0, W1
0x03C4	0x207460  	MOV	#lo_addr(PLLFBDbits), W0
0x03C6	0x688090  	XOR	W1, [W0], W1
0x03C8	0x883A31  	MOV	W1, PLLFBDbits
;Acelerografo.c,66 :: 		ANSELA = 0;                                                                //Configura PORTA como digital     *
0x03CA	0xEF2E0E  	CLR	ANSELA
;Acelerografo.c,67 :: 		ANSELB = 0;                                                                //Configura PORTB como digital     *
0x03CC	0xEF2E1E  	CLR	ANSELB
;Acelerografo.c,68 :: 		TRISA3_bit = 0;                                                            //Configura el pin A3 como salida  *
0x03CE	0xA96E00  	BCLR	TRISA3_bit, BitPos(TRISA3_bit+0)
;Acelerografo.c,69 :: 		TRISA4_bit = 0;                                                            //Configura el pin A4 como salida  *
0x03D0	0xA98E00  	BCLR	TRISA4_bit, BitPos(TRISA4_bit+0)
;Acelerografo.c,70 :: 		TRISB4_bit = 0;                                                            //Configura el pin B4 como salida  *
0x03D2	0xA98E10  	BCLR	TRISB4_bit, BitPos(TRISB4_bit+0)
;Acelerografo.c,71 :: 		TRISB10_bit = 1;                                                           //Configura el pin B10 como entrada *
0x03D4	0xA84E11  	BSET	TRISB10_bit, BitPos(TRISB10_bit+0)
;Acelerografo.c,72 :: 		TRISB11_bit = 1;                                                           //Configura el pin B11 como entrada *
0x03D6	0xA86E11  	BSET	TRISB11_bit, BitPos(TRISB11_bit+0)
;Acelerografo.c,73 :: 		TRISB12_bit = 1;                                                           //Configura el pin B12 como entrada *
0x03D8	0xA88E11  	BSET	TRISB12_bit, BitPos(TRISB12_bit+0)
;Acelerografo.c,74 :: 		TRISB13_bit = 1;                                                           //Configura el pin B13 como entrada *
0x03DA	0xA8AE11  	BSET	TRISB13_bit, BitPos(TRISB13_bit+0)
;Acelerografo.c,76 :: 		INTCON2.GIE = 1;                                                           //Habilita las interrupciones globales *
0x03DC	0xA8E8C3  	BSET	INTCON2, #15
;Acelerografo.c,83 :: 		SPI1STAT.SPIEN = 1;                                                        //Habilita el SPI1 *
0x03DE	0xA8E241  	BSET	SPI1STAT, #15
;Acelerografo.c,84 :: 		SPI1_Init_Advanced(_SPI_SLAVE, _SPI_8_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_1, _SPI_SS_ENABLE, _SPI_DATA_SAMPLE_END, _SPI_CLK_IDLE_HIGH, _SPI_ACTIVE_2_IDLE);        //*
0x03E0	0x20003D  	MOV	#3, W13
0x03E2	0x2001CC  	MOV	#28, W12
0x03E4	0xEF2016  	CLR	W11
0x03E6	0xEF2014  	CLR	W10
0x03E8	0xEF2000  	CLR	W0
0x03EA	0x781F80  	PUSH	W0
0x03EC	0x200400  	MOV	#64, W0
0x03EE	0x781F80  	PUSH	W0
0x03F0	0x202000  	MOV	#512, W0
0x03F2	0x781F80  	PUSH	W0
0x03F4	0x200800  	MOV	#128, W0
0x03F6	0x781F80  	PUSH	W0
0x03F8	0x07FF40  	RCALL	_SPI1_Init_Advanced
0x03FA	0xB1008F  	SUB	#8, W15
;Acelerografo.c,85 :: 		SPI1IE_bit = 1;                                                            //Habilita la interrupcion por SPI1  *
0x03FC	0xA84821  	BSET	SPI1IE_bit, BitPos(SPI1IE_bit+0)
;Acelerografo.c,86 :: 		SPI1IF_bit = 0;                                                            //Limpia la bandera de interrupcion por SPI *
0x03FE	0xA94801  	BCLR	SPI1IF_bit, BitPos(SPI1IF_bit+0)
;Acelerografo.c,87 :: 		IPC2bits.SPI1IP = 0x03;                                                    //Prioridad de la interrupcion SPI1
0x0400	0x203000  	MOV	#768, W0
0x0402	0x780080  	MOV	W0, W1
0x0404	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x0406	0x688090  	XOR	W1, [W0], W1
0x0408	0x207000  	MOV	#1792, W0
0x040A	0x608080  	AND	W1, W0, W1
0x040C	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x040E	0x688090  	XOR	W1, [W0], W1
0x0410	0x884221  	MOV	W1, IPC2bits
;Acelerografo.c,90 :: 		RPINR22bits.SDI2R = 0x21;                                                  //Configura el pin RB1/RPI33 como SDI2 *
0x0412	0xB3C210  	MOV.B	#33, W0
0x0414	0x784080  	MOV.B	W0, W1
0x0416	0x206CC0  	MOV	#lo_addr(RPINR22bits), W0
0x0418	0x68C090  	XOR.B	W1, [W0], W1
0x041A	0xB3C7F0  	MOV.B	#127, W0
0x041C	0x60C080  	AND.B	W1, W0, W1
0x041E	0x206CC0  	MOV	#lo_addr(RPINR22bits), W0
0x0420	0x68C090  	XOR.B	W1, [W0], W1
0x0422	0x206CC0  	MOV	#lo_addr(RPINR22bits), W0
0x0424	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,91 :: 		RPOR2bits.RP38R = 0x08;                                                    //Configura el SDO2 en el pin RB6/RP38 *
0x0426	0xB3C080  	MOV.B	#8, W0
0x0428	0x784080  	MOV.B	W0, W1
0x042A	0x206840  	MOV	#lo_addr(RPOR2bits), W0
0x042C	0x68C090  	XOR.B	W1, [W0], W1
0x042E	0xB3C3F0  	MOV.B	#63, W0
0x0430	0x60C080  	AND.B	W1, W0, W1
0x0432	0x206840  	MOV	#lo_addr(RPOR2bits), W0
0x0434	0x68C090  	XOR.B	W1, [W0], W1
0x0436	0x206840  	MOV	#lo_addr(RPOR2bits), W0
0x0438	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,92 :: 		RPOR1bits.RP37R = 0x09;                                                    //Configura el SCK2 en el pin RB5/RP37 *
0x043A	0x209000  	MOV	#2304, W0
0x043C	0x780080  	MOV	W0, W1
0x043E	0x206820  	MOV	#lo_addr(RPOR1bits), W0
0x0440	0x688090  	XOR	W1, [W0], W1
0x0442	0x23F000  	MOV	#16128, W0
0x0444	0x608080  	AND	W1, W0, W1
0x0446	0x206820  	MOV	#lo_addr(RPOR1bits), W0
0x0448	0x688090  	XOR	W1, [W0], W1
0x044A	0x883411  	MOV	W1, RPOR1bits
;Acelerografo.c,93 :: 		SPI2STAT.SPIEN = 1;                                                        //Habilita el SPI2 *
0x044C	0xA8E261  	BSET	SPI2STAT, #15
;Acelerografo.c,94 :: 		SPI2_Init();                                                               //Inicializa el modulo SPI2
0x044E	0x07FF01  	RCALL	_SPI2_Init
;Acelerografo.c,97 :: 		RPINR0 = 0x2E00;                                                           //Asigna INT1 al RB14/RPI46
0x0450	0x22E000  	MOV	#11776, W0
0x0452	0xB7A6A0  	MOV	WREG, RPINR0
;Acelerografo.c,98 :: 		INT1IE_bit = 1;                                                            //Habilita la interrupcion externa INT1
0x0454	0xA88822  	BSET	INT1IE_bit, BitPos(INT1IE_bit+0)
;Acelerografo.c,99 :: 		INT1IF_bit = 0;                                                            //Limpia la bandera de interrupcion externa INT1
0x0456	0xA98802  	BCLR	INT1IF_bit, BitPos(INT1IF_bit+0)
;Acelerografo.c,100 :: 		IPC5bits.INT1IP = 0x01;                                                    //Prioridad en la interrupocion externa 1
0x0458	0xB3C010  	MOV.B	#1, W0
0x045A	0x784080  	MOV.B	W0, W1
0x045C	0x2084A0  	MOV	#lo_addr(IPC5bits), W0
0x045E	0x68C090  	XOR.B	W1, [W0], W1
0x0460	0x60C0E7  	AND.B	W1, #7, W1
0x0462	0x2084A0  	MOV	#lo_addr(IPC5bits), W0
0x0464	0x68C090  	XOR.B	W1, [W0], W1
0x0466	0x2084A0  	MOV	#lo_addr(IPC5bits), W0
0x0468	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,103 :: 		T1CON = 0x0020;
0x046A	0x200200  	MOV	#32, W0
0x046C	0xB7A104  	MOV	WREG, T1CON
;Acelerografo.c,104 :: 		T1CON.TON = 0;                                                             //Apaga el Timer1
0x046E	0xA9E105  	BCLR	T1CON, #15
;Acelerografo.c,105 :: 		T1IE_bit = 1;                                                              //Habilita la interrupción de desbordamiento TMR1
0x0470	0xA86820  	BSET	T1IE_bit, BitPos(T1IE_bit+0)
;Acelerografo.c,106 :: 		T1IF_bit = 0;                                                              //Limpia la bandera de interrupcion del TMR2
0x0472	0xA96800  	BCLR	T1IF_bit, BitPos(T1IF_bit+0)
;Acelerografo.c,107 :: 		PR1 = 62500;                                                               //Carga el preload para un tiempo de 100ms
0x0474	0x2F4240  	MOV	#62500, W0
0x0476	0xB7A102  	MOV	WREG, PR1
;Acelerografo.c,108 :: 		IPC0bits.T1IP = 0x02;                                                      //Prioridad de la interrupcion por desbordamiento del TMR1
0x0478	0x220000  	MOV	#8192, W0
0x047A	0x780080  	MOV	W0, W1
0x047C	0x208400  	MOV	#lo_addr(IPC0bits), W0
0x047E	0x688090  	XOR	W1, [W0], W1
0x0480	0x270000  	MOV	#28672, W0
0x0482	0x608080  	AND	W1, W0, W1
0x0484	0x208400  	MOV	#lo_addr(IPC0bits), W0
0x0486	0x688090  	XOR	W1, [W0], W1
0x0488	0x884201  	MOV	W1, IPC0bits
;Acelerografo.c,110 :: 		ADXL355_init();
0x048A	0x07FEC6  	RCALL	_ADXL355_init
;Acelerografo.c,112 :: 		Delay_ms(100);                                                             //Espera hasta que se estabilicen los cambios
0x048C	0x2000D8  	MOV	#13, W8
0x048E	0x235077  	MOV	#13575, W7
L_ConfiguracionPrincipal12:
0x0490	0xED200E  	DEC	W7
0x0492	0x3AFFFE  	BRA NZ	L_ConfiguracionPrincipal12
0x0494	0xED2010  	DEC	W8
0x0496	0x3AFFFC  	BRA NZ	L_ConfiguracionPrincipal12
;Acelerografo.c,114 :: 		}
L_end_ConfiguracionPrincipal:
0x0498	0x7806CF  	POP	W13
0x049A	0x78064F  	POP	W12
0x049C	0x7805CF  	POP	W11
0x049E	0x78054F  	POP	W10
0x04A0	0x060000  	RETURN
; end of _ConfiguracionPrincipal
_SPI1_Init_Advanced:
0x027A	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,123 :: 		
; slave_select start address is: 2 (W1)
0x027C	0x97B8CE  	MOV	[W14-8], W1
; data_sample start address is: 8 (W4)
0x027E	0x97BA3E  	MOV	[W14-10], W4
; clock_idle start address is: 4 (W2)
0x0280	0x97B92E  	MOV	[W14-12], W2
; edge start address is: 6 (W3)
0x0282	0x97B99E  	MOV	[W14-14], W3
;__Lib_SPI_12.c,126 :: 		
0x0284	0xEF2240  	CLR	SPI1STAT
;__Lib_SPI_12.c,127 :: 		
0x0286	0xEF2242  	CLR	SPI1CON
;__Lib_SPI_12.c,129 :: 		
0x0288	0x2FFFF0  	MOV	#lo_addr(_SPI1_Read), W0
0x028A	0x888060  	MOV	W0, _SPI_Rd_Ptr
;__Lib_SPI_12.c,130 :: 		
0x028C	0x2FFFF0  	MOV	#lo_addr(_SPI1_Write), W0
0x028E	0x888050  	MOV	W0, _SPI_Wr_Ptr
;__Lib_SPI_12.c,132 :: 		
0x0290	0x75000B  	IOR	W10, W11, W0
0x0292	0x70000C  	IOR	W0, W12, W0
0x0294	0x70000D  	IOR	W0, W13, W0
0x0296	0x700001  	IOR	W0, W1, W0
; slave_select end address is: 2 (W1)
0x0298	0x700004  	IOR	W0, W4, W0
; data_sample end address is: 8 (W4)
;__Lib_SPI_12.c,133 :: 		
0x029A	0x700082  	IOR	W0, W2, W1
; clock_idle end address is: 4 (W2)
0x029C	0x202420  	MOV	#lo_addr(SPI1CON), W0
0x029E	0x708803  	IOR	W1, W3, [W0]
; edge end address is: 6 (W3)
;__Lib_SPI_12.c,135 :: 		
0x02A0	0xA9C240  	BCLR	SPI1STAT, #6
;__Lib_SPI_12.c,136 :: 		
0x02A2	0xA8E241  	BSET	SPI1STAT, #15
;__Lib_SPI_12.c,138 :: 		
L_end_SPI1_Init_Advanced:
0x02A4	0xFA8000  	ULNK
0x02A6	0x060000  	RETURN
; end of _SPI1_Init_Advanced
_SPI2_Init:
0x0252	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,205 :: 		
;__Lib_SPI_12.c,207 :: 		
0x0254	0x202000  	MOV	#lo_addr(_SPI2_Read), W0
0x0256	0x888060  	MOV	W0, _SPI_Rd_Ptr
;__Lib_SPI_12.c,208 :: 		
0x0258	0x2024A0  	MOV	#lo_addr(_SPI2_Write), W0
0x025A	0x888050  	MOV	W0, _SPI_Wr_Ptr
;__Lib_SPI_12.c,210 :: 		
0x025C	0xEF2260  	CLR	SPI2STAT
;__Lib_SPI_12.c,211 :: 		
0x025E	0xEF2262  	CLR	SPI2CON
;__Lib_SPI_12.c,213 :: 		
0x0260	0xA8A262  	BSET	SPI2CON, #5
;__Lib_SPI_12.c,214 :: 		
0x0262	0xA9C262  	BCLR	SPI2CON, #6
;__Lib_SPI_12.c,216 :: 		
0x0264	0x2001C1  	MOV	#28, W1
0x0266	0x202620  	MOV	#lo_addr(SPI2CON), W0
0x0268	0x708810  	IOR	W1, [W0], [W0]
;__Lib_SPI_12.c,218 :: 		
0x026A	0x2FFFC1  	MOV	#65532, W1
0x026C	0x202620  	MOV	#lo_addr(SPI2CON), W0
0x026E	0x608810  	AND	W1, [W0], [W0]
;__Lib_SPI_12.c,219 :: 		
0x0270	0xA80263  	BSET	SPI2CON, #8
;__Lib_SPI_12.c,221 :: 		
0x0272	0xA9C260  	BCLR	SPI2STAT, #6
;__Lib_SPI_12.c,222 :: 		
0x0274	0xA8E261  	BSET	SPI2STAT, #15
;__Lib_SPI_12.c,224 :: 		
L_end_SPI2_Init:
0x0276	0xFA8000  	ULNK
0x0278	0x060000  	RETURN
; end of _SPI2_Init
_ADXL355_init:
;adxl355_spi.c,104 :: 		void ADXL355_init(){
;adxl355_spi.c,105 :: 		ADXL355_write_byte(Reset,0x52);                                             //Resetea el dispositivo
0x0218	0x781F8A  	PUSH	W10
0x021A	0x781F8B  	PUSH	W11
0x021C	0xB3C52B  	MOV.B	#82, W11
0x021E	0xB3C2FA  	MOV.B	#47, W10
0x0220	0x0700A6  	RCALL	_ADXL355_write_byte
;adxl355_spi.c,106 :: 		Delay_ms(10);
0x0222	0x200028  	MOV	#2, W8
0x0224	0x238807  	MOV	#14464, W7
L_ADXL355_init0:
0x0226	0xED200E  	DEC	W7
0x0228	0x3AFFFE  	BRA NZ	L_ADXL355_init0
0x022A	0xED2010  	DEC	W8
0x022C	0x3AFFFC  	BRA NZ	L_ADXL355_init0
0x022E	0x000000  	NOP
0x0230	0x000000  	NOP
;adxl355_spi.c,107 :: 		ADXL355_write_byte(POWER_CTL, DRDY_OFF|STANDBY);
0x0232	0xB3C05B  	MOV.B	#5, W11
0x0234	0xB3C2DA  	MOV.B	#45, W10
0x0236	0x07009B  	RCALL	_ADXL355_write_byte
;adxl355_spi.c,108 :: 		ADXL355_write_byte(Filter, NO_HIGH_PASS_FILTER|_62_5_Hz);
0x0238	0xB3C04B  	MOV.B	#4, W11
0x023A	0xB3C28A  	MOV.B	#40, W10
0x023C	0x070098  	RCALL	_ADXL355_write_byte
;adxl355_spi.c,109 :: 		ADXL355_write_byte(Range, _2G);
0x023E	0xB3C01B  	MOV.B	#1, W11
0x0240	0xB3C2CA  	MOV.B	#44, W10
0x0242	0x070095  	RCALL	_ADXL355_write_byte
;adxl355_spi.c,110 :: 		}
L_end_ADXL355_init:
0x0244	0x7805CF  	POP	W11
0x0246	0x78054F  	POP	W10
0x0248	0x060000  	RETURN
; end of _ADXL355_init
_ADXL355_write_byte:
;adxl355_spi.c,113 :: 		void ADXL355_write_byte(unsigned char address, unsigned char value){
;adxl355_spi.c,114 :: 		address = (address<<1)&0xFE;
0x036E	0x781F8A  	PUSH	W10
0x0370	0xFB800A  	ZE	W10, W0
0x0372	0xDD00C1  	SL	W0, #1, W1
0x0374	0x200FE0  	MOV	#254, W0
0x0376	0x608000  	AND	W1, W0, W0
0x0378	0x784500  	MOV.B	W0, W10
;adxl355_spi.c,115 :: 		CS_ADXL355=0;
0x037A	0xA96E04  	BCLR	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,116 :: 		SPI2_Write(address);
0x037C	0xFB8500  	ZE	W0, W10
0x037E	0x07FF65  	RCALL	_SPI2_Write
;adxl355_spi.c,117 :: 		SPI2_Write(value);
0x0380	0xFB850B  	ZE	W11, W10
0x0382	0x07FF63  	RCALL	_SPI2_Write
;adxl355_spi.c,118 :: 		CS_ADXL355=1;
0x0384	0xA86E04  	BSET	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,119 :: 		}
L_end_ADXL355_write_byte:
0x0386	0x78054F  	POP	W10
0x0388	0x060000  	RETURN
; end of _ADXL355_write_byte
_SPI2_Write:
0x024A	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,175 :: 		
;__Lib_SPI_12.c,176 :: 		
0x024C	0x07FFD9  	RCALL	_SPI2_Read
;__Lib_SPI_12.c,183 :: 		
L_end_SPI2_Write:
0x024E	0xFA8000  	ULNK
0x0250	0x060000  	RETURN
; end of _SPI2_Write
_SPI2_Read:
0x0200	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,163 :: 		
;__Lib_SPI_12.c,165 :: 		
0x0202	0xA9C260  	BCLR	SPI2STAT, #6
;__Lib_SPI_12.c,167 :: 		
L_SPI2_Read4:
0x0204	0xAE2260  	BTSS	SPI2STAT, #1
0x0206	0x370001  	BRA	L_SPI2_Read5
0x0208	0x37FFFD  	BRA	L_SPI2_Read4
L_SPI2_Read5:
;__Lib_SPI_12.c,168 :: 		
0x020A	0x88134A  	MOV	W10, SPI2BUF
;__Lib_SPI_12.c,169 :: 		
L_SPI2_Read6:
0x020C	0xAF0260  	BTSC	SPI2STAT, #0
0x020E	0x370001  	BRA	L_SPI2_Read7
0x0210	0x37FFFD  	BRA	L_SPI2_Read6
L_SPI2_Read7:
;__Lib_SPI_12.c,171 :: 		
0x0212	0xBF8268  	MOV	SPI2BUF, WREG
;__Lib_SPI_12.c,173 :: 		
L_end_SPI2_Read:
0x0214	0xFA8000  	ULNK
0x0216	0x060000  	RETURN
; end of _SPI2_Read
0x0898	0x210001  	MOV	#lo_addr(_datosLeidos), W1
0x089A	0x280000  	MOV	#32768, W0
0x089C	0x090003  	REPEAT	#3
0x089E	0x7818B0  	MOV	[W0++], [W1++]
0x08A0	0x7858B0  	MOV.B	[W0++], [W1++]
0x08A2	0x060000  	RETURN
_int_1:
0x071E	0xF80034  	PUSH	DSWPAG
0x0720	0xF80032  	PUSH	DSRPAG
0x0722	0xF80036  	PUSH	RCOUNT
0x0724	0x781F80  	PUSH	W0
0x0726	0x200020  	MOV	#2, W0
0x0728	0x09000C  	REPEAT	#12
0x072A	0x781FB0  	PUSH	[W0++]
;Acelerografo.c,122 :: 		void int_1() org IVT_ADDR_INT1INTERRUPT {
;Acelerografo.c,124 :: 		INT1IF_bit = 0;                                                            //Limpia la bandera de interrupcion externa INT1
0x072C	0x781F8A  	PUSH	W10
0x072E	0x781F8B  	PUSH	W11
0x0730	0xA98802  	BCLR	INT1IF_bit, BitPos(INT1IF_bit+0)
;Acelerografo.c,128 :: 		if (banInicio==1){
0x0732	0x21ADE0  	MOV	#lo_addr(_banInicio), W0
0x0734	0x784010  	MOV.B	[W0], W0
0x0736	0xE10461  	CP.B	W0, #1
0x0738	0x3A00A5  	BRA NZ	L_int_114
L__int_183:
;Acelerografo.c,130 :: 		if (banCiclo==0){
0x073A	0x21ADB0  	MOV	#lo_addr(_banCiclo), W0
0x073C	0x784010  	MOV.B	[W0], W0
0x073E	0xE10460  	CP.B	W0, #0
0x0740	0x3A0004  	BRA NZ	L_int_115
L__int_184:
;Acelerografo.c,132 :: 		ADXL355_write_byte(POWER_CTL, DRDY_OFF|STANDBY);                   //Coloco el ADXL en modo STANDBY para pausar las conversiones y limpiar el FIFO
0x0742	0xB3C05B  	MOV.B	#5, W11
0x0744	0xB3C2DA  	MOV.B	#45, W10
0x0746	0x07FE13  	RCALL	_ADXL355_write_byte
;Acelerografo.c,134 :: 		} else {
0x0748	0x37008D  	BRA	L_int_116
L_int_115:
;Acelerografo.c,136 :: 		banCiclo = 0;                                                      //Limpia la bandera de ciclo completo
0x074A	0x21ADB1  	MOV	#lo_addr(_banCiclo), W1
0x074C	0xEF2000  	CLR	W0
0x074E	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,138 :: 		tramaCompleta[0] = contCiclos;                                     //LLena el primer elemento de la tramaCompleta con el contador de ciclos
0x0750	0x211011  	MOV	#lo_addr(_tramaCompleta), W1
0x0752	0x21ACB0  	MOV	#lo_addr(_contCiclos), W0
0x0754	0x784890  	MOV.B	[W0], [W1]
;Acelerografo.c,140 :: 		numFIFO = ADXL355_read_byte(FIFO_ENTRIES);
0x0756	0xB3C05A  	MOV.B	#5, W10
0x0758	0x07FDFD  	RCALL	_ADXL355_read_byte
0x075A	0x21AD11  	MOV	#lo_addr(_numFIFO), W1
0x075C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,142 :: 		numSetsFIFO = (numFIFO)/3;                                         //Lee el numero de sets disponibles en el FIFO
0x075E	0xFB8000  	ZE	W0, W0
0x0760	0x200032  	MOV	#3, W2
0x0762	0x090011  	REPEAT	#17
0x0764	0xD80002  	DIV.S	W0, W2
0x0766	0x780080  	MOV	W0, W1
0x0768	0x21AD00  	MOV	#lo_addr(_numSetsFIFO), W0
0x076A	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,145 :: 		for (x=0;x<numSetsFIFO;x++){
0x076C	0xEF2000  	CLR	W0
0x076E	0x88D670  	MOV	W0, _x
L_int_117:
0x0770	0x21AD00  	MOV	#lo_addr(_numSetsFIFO), W0
0x0772	0xFB8090  	ZE	[W0], W1
0x0774	0x21ACE0  	MOV	#lo_addr(_x), W0
0x0776	0xE10810  	CP	W1, [W0]
0x0778	0x36001A  	BRA LEU	L_int_118
L__int_185:
;Acelerografo.c,146 :: 		ADXL355_read_FIFO(datosLeidos);                               //Lee una sola posicion del FIFO
0x077A	0x21000A  	MOV	#lo_addr(_datosLeidos), W10
0x077C	0x07FD95  	RCALL	_ADXL355_read_FIFO
;Acelerografo.c,147 :: 		for (y=0;y<9;y++){
0x077E	0xEF2000  	CLR	W0
0x0780	0x88D660  	MOV	W0, _y
L_int_120:
0x0782	0x80D660  	MOV	_y, W0
0x0784	0xE10069  	CP	W0, #9
0x0786	0x31000F  	BRA GEU	L_int_121
L__int_186:
;Acelerografo.c,148 :: 		datosFIFO[y+(x*9)] = datosLeidos[y];                       //LLena la trama datosFIFO
0x0788	0x80D671  	MOV	_x, W1
0x078A	0x200090  	MOV	#9, W0
0x078C	0xB80900  	MUL.UU	W1, W0, W2
0x078E	0x21ACC0  	MOV	#lo_addr(_y), W0
0x0790	0x410090  	ADD	W2, [W0], W1
0x0792	0x2100E0  	MOV	#lo_addr(_datosFIFO), W0
0x0794	0x400101  	ADD	W0, W1, W2
0x0796	0x210001  	MOV	#lo_addr(_datosLeidos), W1
0x0798	0x21ACC0  	MOV	#lo_addr(_y), W0
0x079A	0x408010  	ADD	W1, [W0], W0
0x079C	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,147 :: 		for (y=0;y<9;y++){
0x079E	0x200011  	MOV	#1, W1
0x07A0	0x21ACC0  	MOV	#lo_addr(_y), W0
0x07A2	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,149 :: 		}
0x07A4	0x37FFEE  	BRA	L_int_120
L_int_121:
;Acelerografo.c,145 :: 		for (x=0;x<numSetsFIFO;x++){
0x07A6	0x200011  	MOV	#1, W1
0x07A8	0x21ACE0  	MOV	#lo_addr(_x), W0
0x07AA	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,150 :: 		}
0x07AC	0x37FFE1  	BRA	L_int_117
L_int_118:
;Acelerografo.c,155 :: 		for (x=0;x<(numSetsFIFO*9);x++){
0x07AE	0xEF2000  	CLR	W0
0x07B0	0x88D670  	MOV	W0, _x
L_int_123:
0x07B2	0x21AD00  	MOV	#lo_addr(_numSetsFIFO), W0
0x07B4	0xFB8090  	ZE	[W0], W1
0x07B6	0x200090  	MOV	#9, W0
0x07B8	0xB98900  	MUL.SS	W1, W0, W2
0x07BA	0x21ACE0  	MOV	#lo_addr(_x), W0
0x07BC	0xE11010  	CP	W2, [W0]
0x07BE	0x360036  	BRA LEU	L_int_124
L__int_187:
;Acelerografo.c,156 :: 		if ((x==0)||(x%9==0)){
0x07C0	0x80D670  	MOV	_x, W0
0x07C2	0xE10060  	CP	W0, #0
0x07C4	0x320008  	BRA Z	L__int_163
L__int_188:
0x07C6	0x80D670  	MOV	_x, W0
0x07C8	0x200092  	MOV	#9, W2
0x07CA	0x090011  	REPEAT	#17
0x07CC	0xD88002  	DIV.U	W0, W2
0x07CE	0x780001  	MOV	W1, W0
0x07D0	0xE10060  	CP	W0, #0
0x07D2	0x320001  	BRA Z	L__int_162
L__int_189:
0x07D4	0x37001B  	BRA	L_int_128
L__int_163:
L__int_162:
;Acelerografo.c,157 :: 		tramaCompleta[contFIFO+contMuestras+x] = contMuestras;
0x07D6	0x21ACA0  	MOV	#lo_addr(_contMuestras), W0
0x07D8	0xFB8090  	ZE	[W0], W1
0x07DA	0x21AD20  	MOV	#lo_addr(_contFIFO), W0
0x07DC	0x408090  	ADD	W1, [W0], W1
0x07DE	0x21ACE0  	MOV	#lo_addr(_x), W0
0x07E0	0x408090  	ADD	W1, [W0], W1
0x07E2	0x211010  	MOV	#lo_addr(_tramaCompleta), W0
0x07E4	0x400081  	ADD	W0, W1, W1
0x07E6	0x21ACA0  	MOV	#lo_addr(_contMuestras), W0
0x07E8	0x784890  	MOV.B	[W0], [W1]
;Acelerografo.c,158 :: 		tramaCompleta[contFIFO+contMuestras+x+1] = datosFIFO[x];
0x07EA	0x21ACA0  	MOV	#lo_addr(_contMuestras), W0
0x07EC	0xFB8090  	ZE	[W0], W1
0x07EE	0x21AD20  	MOV	#lo_addr(_contFIFO), W0
0x07F0	0x408090  	ADD	W1, [W0], W1
0x07F2	0x21ACE0  	MOV	#lo_addr(_x), W0
0x07F4	0x408010  	ADD	W1, [W0], W0
0x07F6	0x4000E1  	ADD	W0, #1, W1
0x07F8	0x211010  	MOV	#lo_addr(_tramaCompleta), W0
0x07FA	0x400101  	ADD	W0, W1, W2
0x07FC	0x2100E1  	MOV	#lo_addr(_datosFIFO), W1
0x07FE	0x21ACE0  	MOV	#lo_addr(_x), W0
0x0800	0x408010  	ADD	W1, [W0], W0
0x0802	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,159 :: 		contMuestras++;
0x0804	0xB3C011  	MOV.B	#1, W1
0x0806	0x21ACA0  	MOV	#lo_addr(_contMuestras), W0
0x0808	0x40C810  	ADD.B	W1, [W0], [W0]
;Acelerografo.c,160 :: 		} else {
0x080A	0x37000C  	BRA	L_int_129
L_int_128:
;Acelerografo.c,161 :: 		tramaCompleta[contFIFO+contMuestras+x] = datosFIFO[x];
0x080C	0x21ACA0  	MOV	#lo_addr(_contMuestras), W0
0x080E	0xFB8090  	ZE	[W0], W1
0x0810	0x21AD20  	MOV	#lo_addr(_contFIFO), W0
0x0812	0x408090  	ADD	W1, [W0], W1
0x0814	0x21ACE0  	MOV	#lo_addr(_x), W0
0x0816	0x408090  	ADD	W1, [W0], W1
0x0818	0x211010  	MOV	#lo_addr(_tramaCompleta), W0
0x081A	0x400101  	ADD	W0, W1, W2
0x081C	0x2100E1  	MOV	#lo_addr(_datosFIFO), W1
0x081E	0x21ACE0  	MOV	#lo_addr(_x), W0
0x0820	0x408010  	ADD	W1, [W0], W0
0x0822	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,162 :: 		}
L_int_129:
;Acelerografo.c,155 :: 		for (x=0;x<(numSetsFIFO*9);x++){
0x0824	0x200011  	MOV	#1, W1
0x0826	0x21ACE0  	MOV	#lo_addr(_x), W0
0x0828	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,163 :: 		}
0x082A	0x37FFC3  	BRA	L_int_123
L_int_124:
;Acelerografo.c,166 :: 		for (x=0;x<5;x++){
0x082C	0xEF2000  	CLR	W0
0x082E	0x88D670  	MOV	W0, _x
L_int_130:
0x0830	0x80D670  	MOV	_x, W0
0x0832	0xE10065  	CP	W0, #5
0x0834	0x31000D  	BRA GEU	L_int_131
L__int_190:
;Acelerografo.c,167 :: 		tramaCompleta[2500+x] = tiempo[x];
0x0836	0x209C41  	MOV	#2500, W1
0x0838	0x21ACE0  	MOV	#lo_addr(_x), W0
0x083A	0x408090  	ADD	W1, [W0], W1
0x083C	0x211010  	MOV	#lo_addr(_tramaCompleta), W0
0x083E	0x400101  	ADD	W0, W1, W2
0x0840	0x21AD61  	MOV	#lo_addr(_tiempo), W1
0x0842	0x21ACE0  	MOV	#lo_addr(_x), W0
0x0844	0x408010  	ADD	W1, [W0], W0
0x0846	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,166 :: 		for (x=0;x<5;x++){
0x0848	0x200011  	MOV	#1, W1
0x084A	0x21ACE0  	MOV	#lo_addr(_x), W0
0x084C	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,168 :: 		}
0x084E	0x37FFF0  	BRA	L_int_130
L_int_131:
;Acelerografo.c,170 :: 		banTI = 1;                                                         //Activa la bandera de inicio de trama para permitir el envio de la trama por SPI
0x0850	0x21ADD1  	MOV	#lo_addr(_banTI), W1
0x0852	0xB3C010  	MOV.B	#1, W0
0x0854	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,171 :: 		RP1 = 1;                                                           //Genera el pulso P1 para producir la interrupcion en la RPi
0x0856	0xA88E04  	BSET	LATA4_bit, BitPos(LATA4_bit+0)
;Acelerografo.c,172 :: 		Delay_us(20);
0x0858	0x200A07  	MOV	#160, W7
L_int_133:
0x085A	0xED200E  	DEC	W7
0x085C	0x3AFFFE  	BRA NZ	L_int_133
0x085E	0x000000  	NOP
0x0860	0x000000  	NOP
;Acelerografo.c,173 :: 		RP1 = 0;
0x0862	0xA98E04  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;Acelerografo.c,175 :: 		}
L_int_116:
;Acelerografo.c,177 :: 		contCiclos++;                                                          //Incrementa el contador de ciclos
0x0864	0xB3C011  	MOV.B	#1, W1
0x0866	0x21ACB0  	MOV	#lo_addr(_contCiclos), W0
0x0868	0x40C810  	ADD.B	W1, [W0], [W0]
;Acelerografo.c,178 :: 		contMuestras = 0;                                                      //Limpia el contador de muestras
0x086A	0x21ACA1  	MOV	#lo_addr(_contMuestras), W1
0x086C	0xEF2000  	CLR	W0
0x086E	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,179 :: 		contFIFO = 0;                                                          //Limpia el contador de FIFOs
0x0870	0xEF2000  	CLR	W0
0x0872	0x88D690  	MOV	W0, _contFIFO
;Acelerografo.c,181 :: 		if (ADXL355_read_byte(POWER_CTL)&0x01==1){
0x0874	0xB3C2DA  	MOV.B	#45, W10
0x0876	0x07FD6E  	RCALL	_ADXL355_read_byte
0x0878	0xAE0000  	BTSS	W0, #0
0x087A	0x370003  	BRA	L_int_135
;Acelerografo.c,182 :: 		ADXL355_write_byte(POWER_CTL, DRDY_OFF|MEASURING);                  //Coloca el ADXL en modo medicion
0x087C	0xB3C04B  	MOV.B	#4, W11
0x087E	0xB3C2DA  	MOV.B	#45, W10
0x0880	0x07FD76  	RCALL	_ADXL355_write_byte
;Acelerografo.c,183 :: 		}
L_int_135:
;Acelerografo.c,185 :: 		T1CON.TON = 1;                                                         //Enciende el Timer1
0x0882	0xA8E105  	BSET	T1CON, #15
;Acelerografo.c,188 :: 		}
L_int_114:
;Acelerografo.c,190 :: 		}
L_end_int_1:
0x0884	0x7805CF  	POP	W11
0x0886	0x78054F  	POP	W10
0x0888	0x2001A0  	MOV	#26, W0
0x088A	0x09000C  	REPEAT	#12
0x088C	0x78104F  	POP	[W0--]
0x088E	0x78004F  	POP	W0
0x0890	0xF90036  	POP	RCOUNT
0x0892	0xF90032  	POP	DSRPAG
0x0894	0xF90034  	POP	DSWPAG
0x0896	0x064000  	RETFIE
; end of _int_1
_ADXL355_read_byte:
;adxl355_spi.c,122 :: 		unsigned char ADXL355_read_byte(unsigned char address){
;adxl355_spi.c,123 :: 		unsigned char value = 0x00;
0x0354	0x781F8A  	PUSH	W10
;adxl355_spi.c,124 :: 		address=(address<<1)|0x01;
0x0356	0xFB800A  	ZE	W10, W0
0x0358	0xDD0041  	SL	W0, #1, W0
0x035A	0x700061  	IOR	W0, #1, W0
0x035C	0x784500  	MOV.B	W0, W10
;adxl355_spi.c,125 :: 		CS_ADXL355=0;
0x035E	0xA96E04  	BCLR	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,126 :: 		SPI2_Write(address);
0x0360	0xFB8500  	ZE	W0, W10
0x0362	0x07FF73  	RCALL	_SPI2_Write
;adxl355_spi.c,127 :: 		value=SPI2_Read(0);
0x0364	0xEF2014  	CLR	W10
0x0366	0x07FF4C  	RCALL	_SPI2_Read
;adxl355_spi.c,128 :: 		CS_ADXL355=1;
0x0368	0xA86E04  	BSET	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,129 :: 		return value;
;adxl355_spi.c,130 :: 		}
;adxl355_spi.c,129 :: 		return value;
;adxl355_spi.c,130 :: 		}
L_end_ADXL355_read_byte:
0x036A	0x78054F  	POP	W10
0x036C	0x060000  	RETURN
; end of _ADXL355_read_byte
_ADXL355_read_FIFO:
0x02A8	0xFA0002  	LNK	#2
;adxl355_spi.c,152 :: 		unsigned int ADXL355_read_FIFO(unsigned char *vectorFIFO){
;adxl355_spi.c,155 :: 		CS_ADXL355 = 0;
0x02AA	0x781F8A  	PUSH	W10
0x02AC	0xA96E04  	BCLR	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,156 :: 		SPI2_Write(add);
0x02AE	0x781F8A  	PUSH	W10
0x02B0	0x20023A  	MOV	#35, W10
0x02B2	0x07FFCB  	RCALL	_SPI2_Write
0x02B4	0x78054F  	POP	W10
;adxl355_spi.c,158 :: 		vectorFIFO[0] = SPI2_Read(0);
0x02B6	0x78000A  	MOV	W10, W0
0x02B8	0x980700  	MOV	W0, [W14+0]
0x02BA	0x781F8A  	PUSH	W10
0x02BC	0xEF2014  	CLR	W10
0x02BE	0x07FFA0  	RCALL	_SPI2_Read
0x02C0	0x78054F  	POP	W10
0x02C2	0x90008E  	MOV	[W14+0], W1
0x02C4	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,159 :: 		vectorFIFO[1] = SPI2_Read(1);
0x02C6	0x450061  	ADD	W10, #1, W0
0x02C8	0x980700  	MOV	W0, [W14+0]
0x02CA	0x781F8A  	PUSH	W10
0x02CC	0x20001A  	MOV	#1, W10
0x02CE	0x07FF98  	RCALL	_SPI2_Read
0x02D0	0x78054F  	POP	W10
0x02D2	0x90008E  	MOV	[W14+0], W1
0x02D4	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,160 :: 		vectorFIFO[2] = SPI2_Read(2);
0x02D6	0x450062  	ADD	W10, #2, W0
0x02D8	0x980700  	MOV	W0, [W14+0]
0x02DA	0x781F8A  	PUSH	W10
0x02DC	0x20002A  	MOV	#2, W10
0x02DE	0x07FF90  	RCALL	_SPI2_Read
0x02E0	0x78054F  	POP	W10
0x02E2	0x90008E  	MOV	[W14+0], W1
0x02E4	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,162 :: 		vectorFIFO[3] = SPI2_Read(0);
0x02E6	0x450063  	ADD	W10, #3, W0
0x02E8	0x980700  	MOV	W0, [W14+0]
0x02EA	0x781F8A  	PUSH	W10
0x02EC	0xEF2014  	CLR	W10
0x02EE	0x07FF88  	RCALL	_SPI2_Read
0x02F0	0x78054F  	POP	W10
0x02F2	0x90008E  	MOV	[W14+0], W1
0x02F4	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,163 :: 		vectorFIFO[4] = SPI2_Read(1);
0x02F6	0x450064  	ADD	W10, #4, W0
0x02F8	0x980700  	MOV	W0, [W14+0]
0x02FA	0x781F8A  	PUSH	W10
0x02FC	0x20001A  	MOV	#1, W10
0x02FE	0x07FF80  	RCALL	_SPI2_Read
0x0300	0x78054F  	POP	W10
0x0302	0x90008E  	MOV	[W14+0], W1
0x0304	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,164 :: 		vectorFIFO[5] = SPI2_Read(2);
0x0306	0x450065  	ADD	W10, #5, W0
0x0308	0x980700  	MOV	W0, [W14+0]
0x030A	0x781F8A  	PUSH	W10
0x030C	0x20002A  	MOV	#2, W10
0x030E	0x07FF78  	RCALL	_SPI2_Read
0x0310	0x78054F  	POP	W10
0x0312	0x90008E  	MOV	[W14+0], W1
0x0314	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,166 :: 		vectorFIFO[6] = SPI2_Read(0);
0x0316	0x450066  	ADD	W10, #6, W0
0x0318	0x980700  	MOV	W0, [W14+0]
0x031A	0x781F8A  	PUSH	W10
0x031C	0xEF2014  	CLR	W10
0x031E	0x07FF70  	RCALL	_SPI2_Read
0x0320	0x78054F  	POP	W10
0x0322	0x90008E  	MOV	[W14+0], W1
0x0324	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,167 :: 		vectorFIFO[7] = SPI2_Read(1);
0x0326	0x450067  	ADD	W10, #7, W0
0x0328	0x980700  	MOV	W0, [W14+0]
0x032A	0x781F8A  	PUSH	W10
0x032C	0x20001A  	MOV	#1, W10
0x032E	0x07FF68  	RCALL	_SPI2_Read
0x0330	0x78054F  	POP	W10
0x0332	0x90008E  	MOV	[W14+0], W1
0x0334	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,168 :: 		vectorFIFO[8] = SPI2_Read(2);
0x0336	0x450068  	ADD	W10, #8, W0
0x0338	0x980700  	MOV	W0, [W14+0]
0x033A	0x20002A  	MOV	#2, W10
0x033C	0x07FF61  	RCALL	_SPI2_Read
0x033E	0x90008E  	MOV	[W14+0], W1
0x0340	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,169 :: 		CS_ADXL355 = 1;
0x0342	0xA86E04  	BSET	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,170 :: 		Delay_us(5);
0x0344	0x200287  	MOV	#40, W7
L_ADXL355_read_FIFO10:
0x0346	0xED200E  	DEC	W7
0x0348	0x3AFFFE  	BRA NZ	L_ADXL355_read_FIFO10
0x034A	0x000000  	NOP
0x034C	0x000000  	NOP
;adxl355_spi.c,172 :: 		}
;adxl355_spi.c,171 :: 		return;
;adxl355_spi.c,172 :: 		}
L_end_ADXL355_read_FIFO:
0x034E	0x78054F  	POP	W10
0x0350	0xFA8000  	ULNK
0x0352	0x060000  	RETURN
; end of _ADXL355_read_FIFO
_spi_1:
0x05C2	0xF80034  	PUSH	DSWPAG
0x05C4	0xF80032  	PUSH	DSRPAG
0x05C6	0xF80036  	PUSH	RCOUNT
0x05C8	0x781F80  	PUSH	W0
0x05CA	0x200020  	MOV	#2, W0
0x05CC	0x09000C  	REPEAT	#12
0x05CE	0x781FB0  	PUSH	[W0++]
;Acelerografo.c,238 :: 		void spi_1() org  IVT_ADDR_SPI1INTERRUPT {
;Acelerografo.c,239 :: 		SPI1IF_bit = 0;                                                            //Limpia la bandera de interrupcion por SPI
0x05D0	0xA94801  	BCLR	SPI1IF_bit, BitPos(SPI1IF_bit+0)
;Acelerografo.c,240 :: 		buffer = SPI1BUF;                                                          //Guarda el contenido del bufeer (lectura)
0x05D2	0x210091  	MOV	#lo_addr(_buffer), W1
0x05D4	0xBFC248  	MOV.B	SPI1BUF, WREG
0x05D6	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,242 :: 		if ((banTI==1)){                                                           //Verifica si la bandera de inicio de trama esta activa
0x05D8	0x21ADD0  	MOV	#lo_addr(_banTI), W0
0x05DA	0x784010  	MOV.B	[W0], W0
0x05DC	0xE10461  	CP.B	W0, #1
0x05DE	0x3A000E  	BRA NZ	L_spi_150
L__spi_199:
;Acelerografo.c,243 :: 		banLec = 1;                                                             //Activa la bandera de lectura
0x05E0	0x21ADC1  	MOV	#lo_addr(_banLec), W1
0x05E2	0xB3C010  	MOV.B	#1, W0
0x05E4	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,244 :: 		banTI = 0;
0x05E6	0x21ADD1  	MOV	#lo_addr(_banTI), W1
0x05E8	0xEF2000  	CLR	W0
0x05EA	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,245 :: 		i = 0;
0x05EC	0xEF2000  	CLR	W0
0x05EE	0x88D6A0  	MOV	W0, _i
;Acelerografo.c,246 :: 		SPI1BUF = tramaCompleta[i];
0x05F0	0x211011  	MOV	#lo_addr(_tramaCompleta), W1
0x05F2	0x21AD40  	MOV	#lo_addr(_i), W0
0x05F4	0x408010  	ADD	W1, [W0], W0
0x05F6	0x784010  	MOV.B	[W0], W0
0x05F8	0xFB8000  	ZE	W0, W0
0x05FA	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,247 :: 		}
L_spi_150:
;Acelerografo.c,248 :: 		if ((banLec==1)&&(buffer!=0xB1)){
0x05FC	0x21ADC0  	MOV	#lo_addr(_banLec), W0
0x05FE	0x784010  	MOV.B	[W0], W0
0x0600	0xE10461  	CP.B	W0, #1
0x0602	0x3A000E  	BRA NZ	L__spi_170
L__spi_1100:
0x0604	0x210090  	MOV	#lo_addr(_buffer), W0
0x0606	0x784090  	MOV.B	[W0], W1
0x0608	0xB3CB10  	MOV.B	#177, W0
0x060A	0xE10C00  	CP.B	W1, W0
0x060C	0x320009  	BRA Z	L__spi_169
L__spi_1101:
L__spi_168:
;Acelerografo.c,249 :: 		SPI1BUF = tramaCompleta[i];
0x060E	0x211011  	MOV	#lo_addr(_tramaCompleta), W1
0x0610	0x21AD40  	MOV	#lo_addr(_i), W0
0x0612	0x408010  	ADD	W1, [W0], W0
0x0614	0x784010  	MOV.B	[W0], W0
0x0616	0xFB8000  	ZE	W0, W0
0x0618	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,250 :: 		i++;
0x061A	0x200011  	MOV	#1, W1
0x061C	0x21AD40  	MOV	#lo_addr(_i), W0
0x061E	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,248 :: 		if ((banLec==1)&&(buffer!=0xB1)){
L__spi_170:
L__spi_169:
;Acelerografo.c,252 :: 		if ((banLec==1)&&(buffer==0xB1)){                                          //Si detecta el delimitador de final de trama:
0x0620	0x21ADC0  	MOV	#lo_addr(_banLec), W0
0x0622	0x784010  	MOV.B	[W0], W0
0x0624	0xE10461  	CP.B	W0, #1
0x0626	0x3A000D  	BRA NZ	L__spi_172
L__spi_1102:
0x0628	0x210090  	MOV	#lo_addr(_buffer), W0
0x062A	0x784090  	MOV.B	[W0], W1
0x062C	0xB3CB10  	MOV.B	#177, W0
0x062E	0xE10C00  	CP.B	W1, W0
0x0630	0x3A0008  	BRA NZ	L__spi_171
L__spi_1103:
L__spi_167:
;Acelerografo.c,253 :: 		banLec = 0;                                                             //Limpia la bandera de lectura
0x0632	0x21ADC1  	MOV	#lo_addr(_banLec), W1
0x0634	0xEF2000  	CLR	W0
0x0636	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,254 :: 		banTI = 0;
0x0638	0x21ADD1  	MOV	#lo_addr(_banTI), W1
0x063A	0xEF2000  	CLR	W0
0x063C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,255 :: 		SPI1BUF = 0xFF;
0x063E	0x200FF0  	MOV	#255, W0
0x0640	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,252 :: 		if ((banLec==1)&&(buffer==0xB1)){                                          //Si detecta el delimitador de final de trama:
L__spi_172:
L__spi_171:
;Acelerografo.c,257 :: 		}
L_end_spi_1:
0x0642	0x2001A0  	MOV	#26, W0
0x0644	0x09000C  	REPEAT	#12
0x0646	0x78104F  	POP	[W0--]
0x0648	0x78004F  	POP	W0
0x064A	0xF90036  	POP	RCOUNT
0x064C	0xF90032  	POP	DSRPAG
0x064E	0xF90034  	POP	DSWPAG
0x0650	0x064000  	RETFIE
; end of _spi_1
_Timer1Int:
0x04A2	0xF80034  	PUSH	DSWPAG
0x04A4	0xF80032  	PUSH	DSRPAG
0x04A6	0xF80036  	PUSH	RCOUNT
0x04A8	0x781F80  	PUSH	W0
0x04AA	0x200020  	MOV	#2, W0
0x04AC	0x09000C  	REPEAT	#12
0x04AE	0x781FB0  	PUSH	[W0++]
;Acelerografo.c,193 :: 		void Timer1Int() org IVT_ADDR_T1INTERRUPT{
;Acelerografo.c,195 :: 		T1IF_bit = 0;                                                              //Limpia la bandera de interrupcion por desbordamiento del Timer1
0x04B0	0x781F8A  	PUSH	W10
0x04B2	0xA96800  	BCLR	T1IF_bit, BitPos(T1IF_bit+0)
;Acelerografo.c,198 :: 		numFIFO = ADXL355_read_byte(FIFO_ENTRIES); //75                            //Lee el numero de muestras disponibles en el FIFO
0x04B4	0xB3C05A  	MOV.B	#5, W10
0x04B6	0x07FF4E  	RCALL	_ADXL355_read_byte
0x04B8	0x21AD11  	MOV	#lo_addr(_numFIFO), W1
0x04BA	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,200 :: 		numSetsFIFO = (numFIFO)/3;                 //25                            //Lee el numero de sets disponibles en el FIFO
0x04BC	0xFB8000  	ZE	W0, W0
0x04BE	0x200032  	MOV	#3, W2
0x04C0	0x090011  	REPEAT	#17
0x04C2	0xD80002  	DIV.S	W0, W2
0x04C4	0x780080  	MOV	W0, W1
0x04C6	0x21AD00  	MOV	#lo_addr(_numSetsFIFO), W0
0x04C8	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,204 :: 		for (x=0;x<numSetsFIFO;x++){
0x04CA	0xEF2000  	CLR	W0
0x04CC	0x88D670  	MOV	W0, _x
L_Timer1Int36:
0x04CE	0x21AD00  	MOV	#lo_addr(_numSetsFIFO), W0
0x04D0	0xFB8090  	ZE	[W0], W1
0x04D2	0x21ACE0  	MOV	#lo_addr(_x), W0
0x04D4	0xE10810  	CP	W1, [W0]
0x04D6	0x36001A  	BRA LEU	L_Timer1Int37
L__Timer1Int92:
;Acelerografo.c,205 :: 		ADXL355_read_FIFO(datosLeidos);                                       //Lee una sola posicion del FIFO
0x04D8	0x21000A  	MOV	#lo_addr(_datosLeidos), W10
0x04DA	0x07FEE6  	RCALL	_ADXL355_read_FIFO
;Acelerografo.c,206 :: 		for (y=0;y<9;y++){
0x04DC	0xEF2000  	CLR	W0
0x04DE	0x88D660  	MOV	W0, _y
L_Timer1Int39:
0x04E0	0x80D660  	MOV	_y, W0
0x04E2	0xE10069  	CP	W0, #9
0x04E4	0x31000F  	BRA GEU	L_Timer1Int40
L__Timer1Int93:
;Acelerografo.c,207 :: 		datosFIFO[y+(x*9)] = datosLeidos[y];                               //LLena la trama datosFIFO
0x04E6	0x80D671  	MOV	_x, W1
0x04E8	0x200090  	MOV	#9, W0
0x04EA	0xB80900  	MUL.UU	W1, W0, W2
0x04EC	0x21ACC0  	MOV	#lo_addr(_y), W0
0x04EE	0x410090  	ADD	W2, [W0], W1
0x04F0	0x2100E0  	MOV	#lo_addr(_datosFIFO), W0
0x04F2	0x400101  	ADD	W0, W1, W2
0x04F4	0x210001  	MOV	#lo_addr(_datosLeidos), W1
0x04F6	0x21ACC0  	MOV	#lo_addr(_y), W0
0x04F8	0x408010  	ADD	W1, [W0], W0
0x04FA	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,206 :: 		for (y=0;y<9;y++){
0x04FC	0x200011  	MOV	#1, W1
0x04FE	0x21ACC0  	MOV	#lo_addr(_y), W0
0x0500	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,208 :: 		}
0x0502	0x37FFEE  	BRA	L_Timer1Int39
L_Timer1Int40:
;Acelerografo.c,204 :: 		for (x=0;x<numSetsFIFO;x++){
0x0504	0x200011  	MOV	#1, W1
0x0506	0x21ACE0  	MOV	#lo_addr(_x), W0
0x0508	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,209 :: 		}
0x050A	0x37FFE1  	BRA	L_Timer1Int36
L_Timer1Int37:
;Acelerografo.c,212 :: 		for (x=0;x<(numSetsFIFO*9);x++){      //0-224
0x050C	0xEF2000  	CLR	W0
0x050E	0x88D670  	MOV	W0, _x
L_Timer1Int42:
0x0510	0x21AD00  	MOV	#lo_addr(_numSetsFIFO), W0
0x0512	0xFB8090  	ZE	[W0], W1
0x0514	0x200090  	MOV	#9, W0
0x0516	0xB98900  	MUL.SS	W1, W0, W2
0x0518	0x21ACE0  	MOV	#lo_addr(_x), W0
0x051A	0xE11010  	CP	W2, [W0]
0x051C	0x360036  	BRA LEU	L_Timer1Int43
L__Timer1Int94:
;Acelerografo.c,213 :: 		if ((x==0)||(x%9==0)){
0x051E	0x80D670  	MOV	_x, W0
0x0520	0xE10060  	CP	W0, #0
0x0522	0x320008  	BRA Z	L__Timer1Int66
L__Timer1Int95:
0x0524	0x80D670  	MOV	_x, W0
0x0526	0x200092  	MOV	#9, W2
0x0528	0x090011  	REPEAT	#17
0x052A	0xD88002  	DIV.U	W0, W2
0x052C	0x780001  	MOV	W1, W0
0x052E	0xE10060  	CP	W0, #0
0x0530	0x320001  	BRA Z	L__Timer1Int65
L__Timer1Int96:
0x0532	0x37001B  	BRA	L_Timer1Int47
L__Timer1Int66:
L__Timer1Int65:
;Acelerografo.c,214 :: 		tramaCompleta[contFIFO+contMuestras+x] = contMuestras;
0x0534	0x21ACA0  	MOV	#lo_addr(_contMuestras), W0
0x0536	0xFB8090  	ZE	[W0], W1
0x0538	0x21AD20  	MOV	#lo_addr(_contFIFO), W0
0x053A	0x408090  	ADD	W1, [W0], W1
0x053C	0x21ACE0  	MOV	#lo_addr(_x), W0
0x053E	0x408090  	ADD	W1, [W0], W1
0x0540	0x211010  	MOV	#lo_addr(_tramaCompleta), W0
0x0542	0x400081  	ADD	W0, W1, W1
0x0544	0x21ACA0  	MOV	#lo_addr(_contMuestras), W0
0x0546	0x784890  	MOV.B	[W0], [W1]
;Acelerografo.c,216 :: 		tramaCompleta[contFIFO+contMuestras+x+1] = datosFIFO[x];
0x0548	0x21ACA0  	MOV	#lo_addr(_contMuestras), W0
0x054A	0xFB8090  	ZE	[W0], W1
0x054C	0x21AD20  	MOV	#lo_addr(_contFIFO), W0
0x054E	0x408090  	ADD	W1, [W0], W1
0x0550	0x21ACE0  	MOV	#lo_addr(_x), W0
0x0552	0x408010  	ADD	W1, [W0], W0
0x0554	0x4000E1  	ADD	W0, #1, W1
0x0556	0x211010  	MOV	#lo_addr(_tramaCompleta), W0
0x0558	0x400101  	ADD	W0, W1, W2
0x055A	0x2100E1  	MOV	#lo_addr(_datosFIFO), W1
0x055C	0x21ACE0  	MOV	#lo_addr(_x), W0
0x055E	0x408010  	ADD	W1, [W0], W0
0x0560	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,217 :: 		contMuestras++;
0x0562	0xB3C011  	MOV.B	#1, W1
0x0564	0x21ACA0  	MOV	#lo_addr(_contMuestras), W0
0x0566	0x40C810  	ADD.B	W1, [W0], [W0]
;Acelerografo.c,218 :: 		} else {
0x0568	0x37000C  	BRA	L_Timer1Int48
L_Timer1Int47:
;Acelerografo.c,219 :: 		tramaCompleta[contFIFO+contMuestras+x] = datosFIFO[x];
0x056A	0x21ACA0  	MOV	#lo_addr(_contMuestras), W0
0x056C	0xFB8090  	ZE	[W0], W1
0x056E	0x21AD20  	MOV	#lo_addr(_contFIFO), W0
0x0570	0x408090  	ADD	W1, [W0], W1
0x0572	0x21ACE0  	MOV	#lo_addr(_x), W0
0x0574	0x408090  	ADD	W1, [W0], W1
0x0576	0x211010  	MOV	#lo_addr(_tramaCompleta), W0
0x0578	0x400101  	ADD	W0, W1, W2
0x057A	0x2100E1  	MOV	#lo_addr(_datosFIFO), W1
0x057C	0x21ACE0  	MOV	#lo_addr(_x), W0
0x057E	0x408010  	ADD	W1, [W0], W0
0x0580	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,220 :: 		}
L_Timer1Int48:
;Acelerografo.c,212 :: 		for (x=0;x<(numSetsFIFO*9);x++){      //0-224
0x0582	0x200011  	MOV	#1, W1
0x0584	0x21ACE0  	MOV	#lo_addr(_x), W0
0x0586	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,221 :: 		}
0x0588	0x37FFC3  	BRA	L_Timer1Int42
L_Timer1Int43:
;Acelerografo.c,223 :: 		contFIFO = (contMuestras*9);                                    //Incrementa el contador de FIFOs
0x058A	0x21ACA0  	MOV	#lo_addr(_contMuestras), W0
0x058C	0xFB8090  	ZE	[W0], W1
0x058E	0x200090  	MOV	#9, W0
0x0590	0xB98800  	MUL.SS	W1, W0, W0
0x0592	0x88D690  	MOV	W0, _contFIFO
;Acelerografo.c,225 :: 		contTimer1++;                                                              //Incrementa una unidad cada vez que entra a la interrupcion por Timer1
0x0594	0xB3C011  	MOV.B	#1, W1
0x0596	0x21ADF0  	MOV	#lo_addr(_contTimer1), W0
0x0598	0x40C810  	ADD.B	W1, [W0], [W0]
;Acelerografo.c,227 :: 		if (contTimer1==9){                                                        //Verifica si se recibio los 5 FIFOS
0x059A	0x21ADF0  	MOV	#lo_addr(_contTimer1), W0
0x059C	0x784010  	MOV.B	[W0], W0
0x059E	0xE10469  	CP.B	W0, #9
0x05A0	0x3A0007  	BRA NZ	L_Timer1Int49
L__Timer1Int97:
;Acelerografo.c,228 :: 		T1CON.TON = 0;                                                          //Apaga el Timer1
0x05A2	0xA9E105  	BCLR	T1CON, #15
;Acelerografo.c,229 :: 		banCiclo = 1;                                                           //Activa la bandera que indica que se completo un ciclo de medicion
0x05A4	0x21ADB1  	MOV	#lo_addr(_banCiclo), W1
0x05A6	0xB3C010  	MOV.B	#1, W0
0x05A8	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,230 :: 		contTimer1 = 0;                                                         //Limpia el contador de interrupciones por Timer1
0x05AA	0x21ADF1  	MOV	#lo_addr(_contTimer1), W1
0x05AC	0xEF2000  	CLR	W0
0x05AE	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,231 :: 		}
L_Timer1Int49:
;Acelerografo.c,235 :: 		}
L_end_Timer1Int:
0x05B0	0x78054F  	POP	W10
0x05B2	0x2001A0  	MOV	#26, W0
0x05B4	0x09000C  	REPEAT	#12
0x05B6	0x78104F  	POP	[W0--]
0x05B8	0x78004F  	POP	W0
0x05BA	0xF90036  	POP	RCOUNT
0x05BC	0xF90032  	POP	DSRPAG
0x05BE	0xF90034  	POP	DSWPAG
0x05C0	0x064000  	RETFIE
; end of _Timer1Int
;Acelerografo.c,0 :: ?ICS_datosLeidos [9]
0x8000	0x0000 ;?ICS_datosLeidos+0
0x8002	0x0000 ;?ICS_datosLeidos+2
0x8004	0x0000 ;?ICS_datosLeidos+4
0x8006	0x0000 ;?ICS_datosLeidos+6
0x8008	0x00 ;?ICS_datosLeidos+8
; end of ?ICS_datosLeidos
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0200      [24]    _SPI2_Read
0x0218      [50]    _ADXL355_init
0x024A       [8]    _SPI2_Write
0x0252      [40]    _SPI2_Init
0x027A      [46]    _SPI1_Init_Advanced
0x02A8     [172]    _ADXL355_read_FIFO
0x0354      [26]    _ADXL355_read_byte
0x036E      [28]    _ADXL355_write_byte
0x038A     [280]    _ConfiguracionPrincipal
0x04A2     [288]    _Timer1Int
0x05C2     [144]    _spi_1
0x0652     [204]    _main
0x071E     [378]    _int_1
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0684       [2]    RPOR2bits
0x06CC       [2]    RPINR22bits
0x0844       [2]    IPC2bits
0x0682       [2]    RPOR1bits
0x0822       [0]    INT1IE_bit
0x06A0       [2]    RPINR0
0x0260       [2]    SPI2STAT
0x0800       [0]    SPI1IF_bit
0x0E10       [0]    TRISB12_bit
0x0E10       [0]    TRISB11_bit
0x0E10       [0]    TRISB10_bit
0x0E10       [0]    TRISB13_bit
0x0820       [0]    SPI1IE_bit
0x0240       [2]    SPI1STAT
0x08C2       [2]    INTCON2
0x100A       [2]    _SPI_Wr_Ptr
0x100C       [2]    _SPI_Rd_Ptr
0x0242       [2]    SPI1CON
0x0262       [2]    SPI2CON
0x1009       [1]    _buffer
0x100E     [243]    _datosFIFO
0x1101    [2505]    _tramaCompleta
0x0268       [2]    SPI2BUF
0x0104       [2]    T1CON
0x084A       [1]    IPC5bits
0x0802       [0]    INT1IF_bit
0x0820       [0]    T1IE_bit
0x0840       [2]    IPC0bits
0x0102       [2]    PR1
0x0800       [0]    T1IF_bit
0x0E10       [0]    TRISB4_bit
0x1ACA       [1]    _contMuestras
0x1ACC       [2]    _y
0x1ACE       [2]    _x
0x1ACB       [1]    _contCiclos
0x1AD0       [1]    _numSetsFIFO
0x1AD1       [1]    _numFIFO
0x1AD2       [2]    _contFIFO
0x1AD4       [2]    _i
0x1AD6       [5]    _tiempo
0x0E04       [0]    LATA3_bit
0x0E04       [0]    CS_ADXL355
0x1ADB       [1]    _banCiclo
0x1ADC       [1]    _banLec
0x1ADD       [1]    _banTI
0x0746       [2]    PLLFBDbits
0x0744       [2]    CLKDIVbits
0x1ADE       [1]    _banInicio
0x0E0E       [2]    ANSELA
0x0E00       [0]    TRISA4_bit
0x0E00       [0]    TRISA3_bit
0x0E1E       [2]    ANSELB
0x0248       [2]    SPI1BUF
0x0E04       [0]    LATA4_bit
0x0E04       [0]    RP1
0x1ADF       [1]    _contTimer1
0x0E14       [0]    RP2
0x1AE0       [4]    _auxiliar
0x1AE4       [2]    _puntero_8
0x0E14       [0]    LATB4_bit
0x1000       [9]    _datosLeidos
0x0102       [2]    PR1
0x0104       [2]    T1CON
0x0014       [2]    FARG_SPI2_Read_buffer
0x0240       [2]    SPI1STAT
0x0242       [2]    SPI1CON
0x0248       [2]    SPI1BUF
0x0014       [2]    FARG_SPI2_Write_data_out
0x0260       [2]    SPI2STAT
0x0262       [2]    SPI2CON
0x0268       [2]    SPI2BUF
0x0014       [2]    FARG_SPI1_Init_Advanced_master_mode
0x0016       [2]    FARG_SPI1_Init_Advanced_mode16
0x0018       [2]    FARG_SPI1_Init_Advanced_sec_prescaler
0x001A       [2]    FARG_SPI1_Init_Advanced_pri_prescaler
0x0014       [2]    FARG_ADXL355_read_FIFO_vectorFIFO
0x0014       [1]    FARG_ADXL355_read_byte_address
0x0014       [1]    FARG_ADXL355_write_byte_address
0x0016       [1]    FARG_ADXL355_write_byte_value
0x06A0       [2]    RPINR0
0x08C2       [2]    INTCON2
0x0E0E       [2]    ANSELA
0x0E1E       [2]    ANSELB
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x8000       [9]    ?ICS_datosLeidos
//** Label List: ** 
//----------------------------------------------
  L_ADXL355_init0
  L_ADXL355_read_data2
  L_ADXL355_read_data3
  L_ADXL355_read_data4
  L_ADXL355_read_data5
  L_ADXL355_read_data6
  L_ADXL355_read_data7
  L_ADXL355_read_data8
  L_ADXL355_read_data9
  L_ADXL355_read_FIFO10
  L_ConfiguracionPrincipal12
  L_int_114
  L_int_115
  L_int_116
  L_int_117
  L_int_118
  L_int_119
  L_int_120
  L_int_121
  L_int_122
  L_int_123
  L_int_124
  L_int_125
  L_int_126
  L_int_127
  L_int_128
  L_int_129
  L_int_130
  L_int_131
  L_int_132
  L_int_133
  L_int_135
  L_Timer1Int36
  L_Timer1Int37
  L_Timer1Int38
  L_Timer1Int39
  L_Timer1Int40
  L_Timer1Int41
  L_Timer1Int42
  L_Timer1Int43
  L_Timer1Int44
  L_Timer1Int45
  L_Timer1Int46
  L_Timer1Int47
  L_Timer1Int48
  L_Timer1Int49
  L_spi_150
  L_spi_151
  L_spi_152
  L_spi_153
  L_spi_154
  L_spi_155
  L_spi_156
  L_main57
  L_main58
  L_main59
  L__int_161
  L__int_162
  L__int_163
  L__Timer1Int64
  L__Timer1Int65
  L__Timer1Int66
  L__spi_167
  L__spi_168
  L__spi_169
  L__spi_170
  L__spi_171
  L__spi_172
  L_end_ADXL355_init
  _ADXL355_init
  L_end_ADXL355_write_byte
  _ADXL355_write_byte
  L_end_ADXL355_read_byte
  _ADXL355_read_byte
  L_end_ADXL355_read_data
  _ADXL355_read_data
  L__ADXL355_read_data77
  L__ADXL355_read_data78
  L__ADXL355_read_data79
  L_end_ADXL355_read_FIFO
  _ADXL355_read_FIFO
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_int_1
  _int_1
  L__int_183
  L__int_184
  L__int_185
  L__int_186
  L__int_187
  L__int_188
  L__int_189
  L__int_190
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int92
  L__Timer1Int93
  L__Timer1Int94
  L__Timer1Int95
  L__Timer1Int96
  L__Timer1Int97
  L_end_spi_1
  _spi_1
  L__spi_199
  L__spi_1100
  L__spi_1101
  L__spi_1102
  L__spi_1103
  L_end_main
  _main
  L__main_end_loop
  L_SPI1_Read0
  L_SPI1_Read1
  L_SPI1_Read2
  L_SPI1_Read3
  L_SPI2_Read4
  L_SPI2_Read5
  L_SPI2_Read6
  L_SPI2_Read7
  L_end_SPI1_Read
  _SPI1_Read
  L_end_SPI1_Write
  _SPI1_Write
  L_end_SPI1_Init_Advanced
  _SPI1_Init_Advanced
  L_end_SPI1_Init
  _SPI1_Init
  L_end_SPI2_Read
  _SPI2_Read
  L_end_SPI2_Write
  _SPI2_Write
  L_end_SPI2_Init_Advanced
  _SPI2_Init_Advanced
  L_end_SPI2_Init
  _SPI2_Init
  L_end_SPI_Set_Active
  _SPI_Set_Active
  L_end_SPI_Read
  _SPI_Read
  L_end_SPI_Write
  _SPI_Write
  L_ADXL355_init0
  L_ADXL355_read_data2
  L_ADXL355_read_data3
  L_ADXL355_read_data4
  L_ADXL355_read_data5
  L_ADXL355_read_data6
  L_ADXL355_read_data7
  L_ADXL355_read_data8
  L_ADXL355_read_data9
  L_ADXL355_read_FIFO10
  L_ConfiguracionPrincipal12
  L_int_114
  L_int_115
  L_int_116
  L_int_117
  L_int_118
  L_int_119
  L_int_120
  L_int_121
  L_int_122
  L_int_123
  L_int_124
  L_int_125
  L_int_126
  L_int_127
  L_int_128
  L_int_129
  L_int_130
  L_int_131
  L_int_132
  L_int_133
  L_int_135
  L_Timer1Int36
  L_Timer1Int37
  L_Timer1Int38
  L_Timer1Int39
  L_Timer1Int40
  L_Timer1Int41
  L_Timer1Int42
  L_Timer1Int43
  L_Timer1Int44
  L_Timer1Int45
  L_Timer1Int46
  L_Timer1Int47
  L_Timer1Int48
  L_Timer1Int49
  L_spi_150
  L_spi_151
  L_spi_152
  L_spi_153
  L_spi_154
  L_spi_155
  L_spi_156
  L_main57
  L_main58
  L_main59
  L__int_161
  L__int_162
  L__int_163
  L__Timer1Int64
  L__Timer1Int65
  L__Timer1Int66
  L__spi_167
  L__spi_168
  L__spi_169
  L__spi_170
  L__spi_171
  L__spi_172
  L_end_ADXL355_init
  _ADXL355_init
  L_end_ADXL355_write_byte
  _ADXL355_write_byte
  L_end_ADXL355_read_byte
  _ADXL355_read_byte
  L_end_ADXL355_read_data
  _ADXL355_read_data
  L__ADXL355_read_data77
  L__ADXL355_read_data78
  L__ADXL355_read_data79
  L_end_ADXL355_read_FIFO
  _ADXL355_read_FIFO
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_int_1
  _int_1
  L__int_183
  L__int_184
  L__int_185
  L__int_186
  L__int_187
  L__int_188
  L__int_189
  L__int_190
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int92
  L__Timer1Int93
  L__Timer1Int94
  L__Timer1Int95
  L__Timer1Int96
  L__Timer1Int97
  L_end_spi_1
  _spi_1
  L__spi_199
  L__spi_1100
  L__spi_1101
  L__spi_1102
  L__spi_1103
  L_end_main
  _main
  L__main_end_loop
  L_ADXL355_init0
  L_ADXL355_read_data2
  L_ADXL355_read_data3
  L_ADXL355_read_data4
  L_ADXL355_read_data5
  L_ADXL355_read_data6
  L_ADXL355_read_data7
  L_ADXL355_read_data8
  L_ADXL355_read_data9
  L_ADXL355_read_FIFO10
  L_ConfiguracionPrincipal12
  L_int_114
  L_int_115
  L_int_116
  L_int_117
  L_int_118
  L_int_119
  L_int_120
  L_int_121
  L_int_122
  L_int_123
  L_int_124
  L_int_125
  L_int_126
  L_int_127
  L_int_128
  L_int_129
  L_int_130
  L_int_131
  L_int_132
  L_int_133
  L_int_135
  L_Timer1Int36
  L_Timer1Int37
  L_Timer1Int38
  L_Timer1Int39
  L_Timer1Int40
  L_Timer1Int41
  L_Timer1Int42
  L_Timer1Int43
  L_Timer1Int44
  L_Timer1Int45
  L_Timer1Int46
  L_Timer1Int47
  L_Timer1Int48
  L_Timer1Int49
  L_spi_150
  L_spi_151
  L_spi_152
  L_spi_153
  L_spi_154
  L_spi_155
  L_spi_156
  L_main57
  L_main58
  L_main59
  L__int_161
  L__int_162
  L__int_163
  L__Timer1Int64
  L__Timer1Int65
  L__Timer1Int66
  L__spi_167
  L__spi_168
  L__spi_169
  L__spi_170
  L__spi_171
  L__spi_172
  L_end_ADXL355_init
  _ADXL355_init
  L_end_ADXL355_write_byte
  _ADXL355_write_byte
  L_end_ADXL355_read_byte
  _ADXL355_read_byte
  L_end_ADXL355_read_data
  _ADXL355_read_data
  L__ADXL355_read_data77
  L__ADXL355_read_data78
  L__ADXL355_read_data79
  L_end_ADXL355_read_FIFO
  _ADXL355_read_FIFO
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_int_1
  _int_1
  L__int_183
  L__int_184
  L__int_185
  L__int_186
  L__int_187
  L__int_188
  L__int_189
  L__int_190
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int92
  L__Timer1Int93
  L__Timer1Int94
  L__Timer1Int95
  L__Timer1Int96
  L__Timer1Int97
  L_end_spi_1
  _spi_1
  L__spi_199
  L__spi_1100
  L__spi_1101
  L__spi_1102
  L__spi_1103
  L_end_main
  _main
  L__main_end_loop
  L_ADXL355_init0
  L_ADXL355_read_data2
  L_ADXL355_read_data3
  L_ADXL355_read_data4
  L_ADXL355_read_data5
  L_ADXL355_read_data6
  L_ADXL355_read_data7
  L_ADXL355_read_data8
  L_ADXL355_read_data9
  L_ADXL355_read_FIFO10
  L_ConfiguracionPrincipal12
  L_int_114
  L_int_115
  L_int_116
  L_int_117
  L_int_118
  L_int_119
  L_int_120
  L_int_121
  L_int_122
  L_int_123
  L_int_124
  L_int_125
  L_int_126
  L_int_127
  L_int_128
  L_int_129
  L_int_130
  L_int_131
  L_int_132
  L_int_133
  L_int_135
  L_Timer1Int36
  L_Timer1Int37
  L_Timer1Int38
  L_Timer1Int39
  L_Timer1Int40
  L_Timer1Int41
  L_Timer1Int42
  L_Timer1Int43
  L_Timer1Int44
  L_Timer1Int45
  L_Timer1Int46
  L_Timer1Int47
  L_Timer1Int48
  L_Timer1Int49
  L_spi_150
  L_spi_151
  L_spi_152
  L_spi_153
  L_spi_154
  L_spi_155
  L_spi_156
  L_main57
  L_main58
  L_main59
  L__int_161
  L__int_162
  L__int_163
  L__Timer1Int64
  L__Timer1Int65
  L__Timer1Int66
  L__spi_167
  L__spi_168
  L__spi_169
  L__spi_170
  L__spi_171
  L__spi_172
  L_end_ADXL355_init
  _ADXL355_init
  L_end_ADXL355_write_byte
  _ADXL355_write_byte
  L_end_ADXL355_read_byte
  _ADXL355_read_byte
  L_end_ADXL355_read_data
  _ADXL355_read_data
  L__ADXL355_read_data77
  L__ADXL355_read_data78
  L__ADXL355_read_data79
  L_end_ADXL355_read_FIFO
  _ADXL355_read_FIFO
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_int_1
  _int_1
  L__int_183
  L__int_184
  L__int_185
  L__int_186
  L__int_187
  L__int_188
  L__int_189
  L__int_190
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int92
  L__Timer1Int93
  L__Timer1Int94
  L__Timer1Int95
  L__Timer1Int96
  L__Timer1Int97
  L_end_spi_1
  _spi_1
  L__spi_199
  L__spi_1100
  L__spi_1101
  L__spi_1102
  L__spi_1103
  L_end_main
  _main
  L__main_end_loop
