;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 20/11/2018 17:07:19
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x292D      	GOTO       301
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00D4      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00D5      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0870      	MOVF       R0, 0
0x000C	0x00A3      	MOVWF      35
0x000D	0x087B      	MOVF       R11, 0
0x000E	0x00A2      	MOVWF      34
0x000F	0x087C      	MOVF       R12, 0
0x0010	0x00A1      	MOVWF      33
0x0011	0x087D      	MOVF       R13, 0
0x0012	0x00A0      	MOVWF      32
;HSPrueba.c,123 :: 		void interrupt(){
;HSPrueba.c,127 :: 		if (INTCON.INTF==1){
0x0013	0x1C8B      	BTFSS      INTCON, 1
0x0014	0x2829      	GOTO       L_interrupt19
;HSPrueba.c,128 :: 		AUX = 1;
0x0015	0x1586      	BSF        RB3_bit, BitPos(RB3_bit+0)
;HSPrueba.c,129 :: 		INTCON.INTF=0;                                  //Limpia la badera de interrupcion externa
0x0016	0x108B      	BCF        INTCON, 1
;HSPrueba.c,130 :: 		PDU[0]=0x03;                                    //Ejemplo de trama PDU
0x0017	0x3003      	MOVLW      3
0x0018	0x00A7      	MOVWF      _PDU
;HSPrueba.c,131 :: 		PDU[1]=0x05;
0x0019	0x3005      	MOVLW      5
0x001A	0x00A8      	MOVWF      _PDU+1
;HSPrueba.c,132 :: 		PDU[2]=0x05;
0x001B	0x3005      	MOVLW      5
0x001C	0x00A9      	MOVWF      _PDU+2
;HSPrueba.c,133 :: 		PDU[3]=0x06;
0x001D	0x3006      	MOVLW      6
0x001E	0x00AA      	MOVWF      _PDU+3
;HSPrueba.c,134 :: 		PDU[4]=0x07;
0x001F	0x3007      	MOVLW      7
0x0020	0x00AB      	MOVWF      _PDU+4
;HSPrueba.c,135 :: 		sizePDU = PDU[1];                               //Guarda el dato de la longitud de la trama PDU
0x0021	0x3005      	MOVLW      5
0x0022	0x00A6      	MOVWF      _sizePDU
;HSPrueba.c,136 :: 		EnviarMensajeRS485(PDU, sizePDU);               //Invoca a la funcion para enviar la peticion
0x0023	0x3027      	MOVLW      _PDU
0x0024	0x00D6      	MOVWF      FARG_EnviarMensajeRS485_tramaPDU
0x0025	0x3005      	MOVLW      5
0x0026	0x00D7      	MOVWF      FARG_EnviarMensajeRS485_sizePDU
0x0027	0x2085      	CALL       _EnviarMensajeRS485
;HSPrueba.c,137 :: 		AUX = 0;
0x0028	0x1186      	BCF        RB3_bit, BitPos(RB3_bit+0)
;HSPrueba.c,138 :: 		}
L_interrupt19:
;HSPrueba.c,139 :: 		}
L_end_interrupt:
L__interrupt27:
0x0029	0x0823      	MOVF       35, 0
0x002A	0x00F0      	MOVWF      R0
0x002B	0x0822      	MOVF       34, 0
0x002C	0x00FB      	MOVWF      R11
0x002D	0x0821      	MOVF       33, 0
0x002E	0x00FC      	MOVWF      R12
0x002F	0x0820      	MOVF       32, 0
0x0030	0x00FD      	MOVWF      R13
0x0031	0x0855      	MOVF       ___savePCLATH, 0
0x0032	0x008A      	MOVWF      PCLATH
0x0033	0x0E54      	SWAPF      ___saveSTATUS, 0
0x0034	0x0083      	MOVWF      STATUS
0x0035	0x0EFF      	SWAPF      R15, 1
0x0036	0x0E7F      	SWAPF      R15, 0
0x0037	0x0009      	RETFIE
; end of _interrupt
_UART1_Tx_Idle:
;__Lib_UART_c67.c,34 :: 		
;__Lib_UART_c67.c,35 :: 		
0x0038	0x3000      	MOVLW      0
0x0039	0x1683      	BSF        STATUS, 5
0x003A	0x1303      	BCF        STATUS, 6
0x003B	0x1898      	BTFSC      TXSTA, 1
0x003C	0x3001      	MOVLW      1
0x003D	0x00F0      	MOVWF      R0
;__Lib_UART_c67.c,36 :: 		
L_end_UART1_Tx_Idle:
0x003E	0x0008      	RETURN
; end of _UART1_Tx_Idle
_UART1_Write:
;__Lib_UART_c67.c,39 :: 		
;__Lib_UART_c67.c,40 :: 		
L_UART1_Write3:
0x003F	0x1683      	BSF        STATUS, 5
0x0040	0x1303      	BCF        STATUS, 6
0x0041	0x1898      	BTFSC      TXSTA, 1
0x0042	0x2845      	GOTO       L_UART1_Write4
;__Lib_UART_c67.c,41 :: 		
0x0043	0x0000      	NOP
0x0044	0x283F      	GOTO       L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67.c,42 :: 		
0x0045	0x1283      	BCF        STATUS, 5
0x0046	0x085C      	MOVF       FARG_UART1_Write_data_, 0
0x0047	0x0099      	MOVWF      TXREG
;__Lib_UART_c67.c,43 :: 		
L_end_UART1_Write:
0x0048	0x0008      	RETURN
; end of _UART1_Write
_UART1_Init:
;__Lib_UART_c67.c,2 :: 		
;__Lib_UART_c67.c,5 :: 		
0x0049	0x1683      	BSF        STATUS, 5
0x004A	0x1303      	BCF        STATUS, 6
0x004B	0x1698      	BSF        TXSTA, 5
;__Lib_UART_c67.c,6 :: 		
0x004C	0x3090      	MOVLW      144
0x004D	0x1283      	BCF        STATUS, 5
0x004E	0x0098      	MOVWF      RCSTA
;__Lib_UART_c67.c,7 :: 		
0x004F	0x1683      	BSF        STATUS, 5
0x0050	0x1787      	BSF        TRISC7_bit, BitPos(TRISC7_bit+0)
;__Lib_UART_c67.c,8 :: 		
0x0051	0x1307      	BCF        TRISC6_bit, BitPos(TRISC6_bit+0)
;__Lib_UART_c67.c,10 :: 		
L_UART1_Init0:
0x0052	0x1283      	BCF        STATUS, 5
0x0053	0x1E8C      	BTFSS      PIR1, 5
0x0054	0x2858      	GOTO       L_UART1_Init1
;__Lib_UART_c67.c,11 :: 		
0x0055	0x081A      	MOVF       RCREG, 0
0x0056	0x00F0      	MOVWF      R0
0x0057	0x2852      	GOTO       L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c67.c,12 :: 		
L_end_UART1_Init:
0x0058	0x0008      	RETURN
; end of _UART1_Init
_CalcularCRC:
;HSPrueba.c,77 :: 		unsigned int CalcularCRC(unsigned char* trama, unsigned char tramaSize){
;HSPrueba.c,80 :: 		for(CRC16=0xFFFF; tramaSize!=0; tramaSize --){
0x0059	0x30FF      	MOVLW      255
0x005A	0x1283      	BCF        STATUS, 5
0x005B	0x1303      	BCF        STATUS, 6
0x005C	0x00F3      	MOVWF      R3
0x005D	0x30FF      	MOVLW      255
0x005E	0x00F4      	MOVWF      R3+1
L_CalcularCRC1:
0x005F	0x085D      	MOVF       FARG_CalcularCRC_tramaSize, 0
0x0060	0x3A00      	XORLW      0
0x0061	0x1903      	BTFSC      STATUS, 2
0x0062	0x2880      	GOTO       L_CalcularCRC2
;HSPrueba.c,81 :: 		CRC16 ^=*trama ++;
0x0063	0x085C      	MOVF       FARG_CalcularCRC_trama, 0
0x0064	0x0084      	MOVWF      FSR
0x0065	0x0800      	MOVF       INDF, 0
0x0066	0x06F3      	XORWF      R3, 1
0x0067	0x3000      	MOVLW      0
0x0068	0x06F4      	XORWF      R3+1, 1
0x0069	0x0ADC      	INCF       FARG_CalcularCRC_trama, 1
;HSPrueba.c,82 :: 		for(ucCounter =0; ucCounter <8; ucCounter ++){
0x006A	0x01F2      	CLRF       R2
L_CalcularCRC4:
0x006B	0x3008      	MOVLW      8
0x006C	0x0272      	SUBWF      R2, 0
0x006D	0x1803      	BTFSC      STATUS, 0
0x006E	0x287E      	GOTO       L_CalcularCRC5
;HSPrueba.c,83 :: 		if(CRC16 & 0x0001)
0x006F	0x1C73      	BTFSS      R3, 0
0x0070	0x2879      	GOTO       L_CalcularCRC7
;HSPrueba.c,84 :: 		CRC16 = (CRC16 >>1)^POLMODBUS;
0x0071	0x0CF4      	RRF        R3+1, 1
0x0072	0x0CF3      	RRF        R3, 1
0x0073	0x13F4      	BCF        R3+1, 7
0x0074	0x3001      	MOVLW      1
0x0075	0x06F3      	XORWF      R3, 1
0x0076	0x30A0      	MOVLW      160
0x0077	0x06F4      	XORWF      R3+1, 1
0x0078	0x287C      	GOTO       L_CalcularCRC8
L_CalcularCRC7:
;HSPrueba.c,86 :: 		CRC16>>=1;
0x0079	0x0CF4      	RRF        R3+1, 1
0x007A	0x0CF3      	RRF        R3, 1
0x007B	0x13F4      	BCF        R3+1, 7
L_CalcularCRC8:
;HSPrueba.c,82 :: 		for(ucCounter =0; ucCounter <8; ucCounter ++){
0x007C	0x0AF2      	INCF       R2, 1
;HSPrueba.c,87 :: 		}
0x007D	0x286B      	GOTO       L_CalcularCRC4
L_CalcularCRC5:
;HSPrueba.c,80 :: 		for(CRC16=0xFFFF; tramaSize!=0; tramaSize --){
0x007E	0x03DD      	DECF       FARG_CalcularCRC_tramaSize, 1
;HSPrueba.c,88 :: 		}
0x007F	0x285F      	GOTO       L_CalcularCRC1
L_CalcularCRC2:
;HSPrueba.c,89 :: 		return CRC16;
0x0080	0x0873      	MOVF       R3, 0
0x0081	0x00F0      	MOVWF      R0
0x0082	0x0874      	MOVF       R3+1, 0
0x0083	0x00F1      	MOVWF      R0+1
;HSPrueba.c,90 :: 		}
L_end_CalcularCRC:
0x0084	0x0008      	RETURN
; end of _CalcularCRC
_EnviarMensajeRS485:
;HSPrueba.c,96 :: 		void EnviarMensajeRS485(unsigned char *tramaPDU, unsigned char sizePDU){
;HSPrueba.c,100 :: 		CRCPDU = CalcularCRC(tramaPDU, sizePDU);           //Calcula el CRC de la trama pdu
0x0085	0x1283      	BCF        STATUS, 5
0x0086	0x1303      	BCF        STATUS, 6
0x0087	0x0856      	MOVF       FARG_EnviarMensajeRS485_tramaPDU, 0
0x0088	0x00DC      	MOVWF      FARG_CalcularCRC_trama
0x0089	0x0857      	MOVF       FARG_EnviarMensajeRS485_sizePDU, 0
0x008A	0x00DD      	MOVWF      FARG_CalcularCRC_tramaSize
0x008B	0x2059      	CALL       _CalcularCRC
0x008C	0x0870      	MOVF       R0, 0
0x008D	0x00D9      	MOVWF      EnviarMensajeRS485_CRCPDU_L0
0x008E	0x0871      	MOVF       R0+1, 0
0x008F	0x00DA      	MOVWF      EnviarMensajeRS485_CRCPDU_L0+1
;HSPrueba.c,101 :: 		ptrCRCPDU = &CRCPDU;                               //Asociacion del puntero CrcTramaError
0x0090	0x3059      	MOVLW      EnviarMensajeRS485_CRCPDU_L0
0x0091	0x00DB      	MOVWF      EnviarMensajeRS485_ptrCRCPDU_L0
;HSPrueba.c,102 :: 		trama[0]=HDR;                                      //Añade la cabecera a la trama a enviar
0x0092	0x303A      	MOVLW      58
0x0093	0x00B6      	MOVWF      _trama
;HSPrueba.c,103 :: 		trama[sizePDU+2]=*ptrCrcPdu;                       //Asigna al elemento CRC_LSB de la trama de respuesta el LSB de la variable crcTramaError
0x0094	0x3002      	MOVLW      2
0x0095	0x0757      	ADDWF      FARG_EnviarMensajeRS485_sizePDU, 0
0x0096	0x00F0      	MOVWF      R0
0x0097	0x01F1      	CLRF       R0+1
0x0098	0x1803      	BTFSC      STATUS, 0
0x0099	0x0AF1      	INCF       R0+1, 1
0x009A	0x0870      	MOVF       R0, 0
0x009B	0x3E36      	ADDLW      _trama
0x009C	0x00F1      	MOVWF      R1
0x009D	0x085B      	MOVF       EnviarMensajeRS485_ptrCRCPDU_L0, 0
0x009E	0x0084      	MOVWF      FSR
0x009F	0x0800      	MOVF       INDF, 0
0x00A0	0x00F0      	MOVWF      R0
0x00A1	0x0871      	MOVF       R1, 0
0x00A2	0x0084      	MOVWF      FSR
0x00A3	0x0870      	MOVF       R0, 0
0x00A4	0x0080      	MOVWF      INDF
;HSPrueba.c,104 :: 		trama[sizePDU+1]=*(ptrCrcPdu+1);                   //Asigna al elemento CRC_MSB de la trama de respuesta el MSB de la variable crcTramaError
0x00A5	0x0857      	MOVF       FARG_EnviarMensajeRS485_sizePDU, 0
0x00A6	0x3E01      	ADDLW      1
0x00A7	0x00F0      	MOVWF      R0
0x00A8	0x01F1      	CLRF       R0+1
0x00A9	0x1803      	BTFSC      STATUS, 0
0x00AA	0x0AF1      	INCF       R0+1, 1
0x00AB	0x0870      	MOVF       R0, 0
0x00AC	0x3E36      	ADDLW      _trama
0x00AD	0x00F1      	MOVWF      R1
0x00AE	0x0A5B      	INCF       EnviarMensajeRS485_ptrCRCPDU_L0, 0
0x00AF	0x0084      	MOVWF      FSR
0x00B0	0x0800      	MOVF       INDF, 0
0x00B1	0x00F0      	MOVWF      R0
0x00B2	0x0871      	MOVF       R1, 0
0x00B3	0x0084      	MOVWF      FSR
0x00B4	0x0870      	MOVF       R0, 0
0x00B5	0x0080      	MOVWF      INDF
;HSPrueba.c,105 :: 		trama[sizePDU+3]=END1;                             //Añade el primer delimitador de final de trama
0x00B6	0x3003      	MOVLW      3
0x00B7	0x0757      	ADDWF      FARG_EnviarMensajeRS485_sizePDU, 0
0x00B8	0x00F0      	MOVWF      R0
0x00B9	0x01F1      	CLRF       R0+1
0x00BA	0x1803      	BTFSC      STATUS, 0
0x00BB	0x0AF1      	INCF       R0+1, 1
0x00BC	0x0870      	MOVF       R0, 0
0x00BD	0x3E36      	ADDLW      _trama
0x00BE	0x0084      	MOVWF      FSR
0x00BF	0x300D      	MOVLW      13
0x00C0	0x0080      	MOVWF      INDF
;HSPrueba.c,106 :: 		trama[sizePDU+4]=END2;                             //Añade el segundo delimitador de final de trama
0x00C1	0x3004      	MOVLW      4
0x00C2	0x0757      	ADDWF      FARG_EnviarMensajeRS485_sizePDU, 0
0x00C3	0x00F0      	MOVWF      R0
0x00C4	0x01F1      	CLRF       R0+1
0x00C5	0x1803      	BTFSC      STATUS, 0
0x00C6	0x0AF1      	INCF       R0+1, 1
0x00C7	0x0870      	MOVF       R0, 0
0x00C8	0x3E36      	ADDLW      _trama
0x00C9	0x0084      	MOVWF      FSR
0x00CA	0x300A      	MOVLW      10
0x00CB	0x0080      	MOVWF      INDF
;HSPrueba.c,107 :: 		for (i=0;i<(sizePDU+5);i++){
0x00CC	0x01D8      	CLRF       EnviarMensajeRS485_i_L0
L_EnviarMensajeRS4859:
0x00CD	0x3005      	MOVLW      5
0x00CE	0x0757      	ADDWF      FARG_EnviarMensajeRS485_sizePDU, 0
0x00CF	0x00F1      	MOVWF      R1
0x00D0	0x01F2      	CLRF       R1+1
0x00D1	0x1803      	BTFSC      STATUS, 0
0x00D2	0x0AF2      	INCF       R1+1, 1
0x00D3	0x3080      	MOVLW      128
0x00D4	0x00F0      	MOVWF      R0
0x00D5	0x3080      	MOVLW      128
0x00D6	0x0672      	XORWF      R1+1, 0
0x00D7	0x0270      	SUBWF      R0, 0
0x00D8	0x1D03      	BTFSS      STATUS, 2
0x00D9	0x28DC      	GOTO       L__EnviarMensajeRS48525
0x00DA	0x0871      	MOVF       R1, 0
0x00DB	0x0258      	SUBWF      EnviarMensajeRS485_i_L0, 0
L__EnviarMensajeRS48525:
0x00DC	0x1803      	BTFSC      STATUS, 0
0x00DD	0x28FB      	GOTO       L_EnviarMensajeRS48510
;HSPrueba.c,108 :: 		if ((i>=1)&&(i<=sizePDU)){
0x00DE	0x3001      	MOVLW      1
0x00DF	0x0258      	SUBWF      EnviarMensajeRS485_i_L0, 0
0x00E0	0x1C03      	BTFSS      STATUS, 0
0x00E1	0x28F3      	GOTO       L_EnviarMensajeRS48514
0x00E2	0x0858      	MOVF       EnviarMensajeRS485_i_L0, 0
0x00E3	0x0257      	SUBWF      FARG_EnviarMensajeRS485_sizePDU, 0
0x00E4	0x1C03      	BTFSS      STATUS, 0
0x00E5	0x28F3      	GOTO       L_EnviarMensajeRS48514
L__EnviarMensajeRS48521:
;HSPrueba.c,109 :: 		UART1_Write(tramaPDU[i-1]);                 //Envia el contenido de la trama PDU a travez del UART1
0x00E6	0x3001      	MOVLW      1
0x00E7	0x0258      	SUBWF      EnviarMensajeRS485_i_L0, 0
0x00E8	0x00F0      	MOVWF      R0
0x00E9	0x01F1      	CLRF       R0+1
0x00EA	0x1C03      	BTFSS      STATUS, 0
0x00EB	0x03F1      	DECF       R0+1, 1
0x00EC	0x0870      	MOVF       R0, 0
0x00ED	0x0756      	ADDWF      FARG_EnviarMensajeRS485_tramaPDU, 0
0x00EE	0x0084      	MOVWF      FSR
0x00EF	0x0800      	MOVF       INDF, 0
0x00F0	0x00DC      	MOVWF      FARG_UART1_Write_data_
0x00F1	0x203F      	CALL       _UART1_Write
;HSPrueba.c,110 :: 		} else {
0x00F2	0x28F9      	GOTO       L_EnviarMensajeRS48515
L_EnviarMensajeRS48514:
;HSPrueba.c,111 :: 		UART1_Write(trama[i]);                      //Envia el contenido del resto de la trama de peticion a travez del UART1
0x00F3	0x0858      	MOVF       EnviarMensajeRS485_i_L0, 0
0x00F4	0x3E36      	ADDLW      _trama
0x00F5	0x0084      	MOVWF      FSR
0x00F6	0x0800      	MOVF       INDF, 0
0x00F7	0x00DC      	MOVWF      FARG_UART1_Write_data_
0x00F8	0x203F      	CALL       _UART1_Write
;HSPrueba.c,112 :: 		}
L_EnviarMensajeRS48515:
;HSPrueba.c,107 :: 		for (i=0;i<(sizePDU+5);i++){
0x00F9	0x0AD8      	INCF       EnviarMensajeRS485_i_L0, 1
;HSPrueba.c,113 :: 		}
0x00FA	0x28CD      	GOTO       L_EnviarMensajeRS4859
L_EnviarMensajeRS48510:
;HSPrueba.c,114 :: 		while(UART1_Tx_Idle()==0);                         //Espera hasta que se haya terminado de enviar todo el dato por UART antes de continuar
L_EnviarMensajeRS48516:
0x00FB	0x2038      	CALL       _UART1_Tx_Idle
0x00FC	0x0870      	MOVF       R0, 0
0x00FD	0x3A00      	XORLW      0
0x00FE	0x1D03      	BTFSS      STATUS, 2
0x00FF	0x2901      	GOTO       L_EnviarMensajeRS48517
0x0100	0x28FB      	GOTO       L_EnviarMensajeRS48516
L_EnviarMensajeRS48517:
;HSPrueba.c,115 :: 		TOUT = 1;
0x0101	0x1283      	BCF        STATUS, 5
0x0102	0x1587      	BSF        RC3_bit, BitPos(RC3_bit+0)
;HSPrueba.c,116 :: 		Delay_ms(200);
0x0103	0x3003      	MOVLW      3
0x0104	0x00FB      	MOVWF      R11
0x0105	0x3008      	MOVLW      8
0x0106	0x00FC      	MOVWF      R12
0x0107	0x3077      	MOVLW      119
0x0108	0x00FD      	MOVWF      R13
L_EnviarMensajeRS48518:
0x0109	0x0BFD      	DECFSZ     R13, 1
0x010A	0x2909      	GOTO       L_EnviarMensajeRS48518
0x010B	0x0BFC      	DECFSZ     R12, 1
0x010C	0x2909      	GOTO       L_EnviarMensajeRS48518
0x010D	0x0BFB      	DECFSZ     R11, 1
0x010E	0x2909      	GOTO       L_EnviarMensajeRS48518
;HSPrueba.c,117 :: 		TOUT = 0;
0x010F	0x1187      	BCF        RC3_bit, BitPos(RC3_bit+0)
;HSPrueba.c,118 :: 		}
L_end_EnviarMensajeRS485:
0x0110	0x0008      	RETURN
; end of _EnviarMensajeRS485
_ConfiguracionPrincipal:
;HSPrueba.c,53 :: 		void ConfiguracionPrincipal(){
;HSPrueba.c,55 :: 		TRISB3_bit = 0;
0x0111	0x1683      	BSF        STATUS, 5
0x0112	0x1303      	BCF        STATUS, 6
0x0113	0x1186      	BCF        TRISB3_bit, BitPos(TRISB3_bit+0)
;HSPrueba.c,56 :: 		TRISC3_bit = 0;
0x0114	0x1187      	BCF        TRISC3_bit, BitPos(TRISC3_bit+0)
;HSPrueba.c,58 :: 		INTCON.GIE = 1;                                    //Habilita las interrupciones globales
0x0115	0x178B      	BSF        INTCON, 7
;HSPrueba.c,59 :: 		INTCON.PEIE = 1;                                   //Habilita las interrupciones perifericas
0x0116	0x170B      	BSF        INTCON, 6
;HSPrueba.c,62 :: 		UART1_Init(19200);                                 //Inicializa el UART1 a 19200 bps
0x0117	0x3019      	MOVLW      25
0x0118	0x0099      	MOVWF      SPBRG
0x0119	0x1518      	BSF        TXSTA, 2
0x011A	0x2049      	CALL       _UART1_Init
;HSPrueba.c,65 :: 		INTCON.INTE = 1;                                   //Habilita la interrupcion externa
0x011B	0x160B      	BSF        INTCON, 4
;HSPrueba.c,66 :: 		INTCON.INTF = 0;                                   //Limpia la bandera de interrupcion externa
0x011C	0x108B      	BCF        INTCON, 1
;HSPrueba.c,67 :: 		OPTION_REG.INTEDG = 0;                             //Activa la interrupcion en el flanco de bajada
0x011D	0x1683      	BSF        STATUS, 5
0x011E	0x1301      	BCF        OPTION_REG, 6
;HSPrueba.c,69 :: 		Delay_ms(100);                                     //Espera hasta que se estabilicen los cambios
0x011F	0x3002      	MOVLW      2
0x0120	0x00FB      	MOVWF      R11
0x0121	0x3004      	MOVLW      4
0x0122	0x00FC      	MOVWF      R12
0x0123	0x30BA      	MOVLW      186
0x0124	0x00FD      	MOVWF      R13
L_ConfiguracionPrincipal0:
0x0125	0x0BFD      	DECFSZ     R13, 1
0x0126	0x2925      	GOTO       L_ConfiguracionPrincipal0
0x0127	0x0BFC      	DECFSZ     R12, 1
0x0128	0x2925      	GOTO       L_ConfiguracionPrincipal0
0x0129	0x0BFB      	DECFSZ     R11, 1
0x012A	0x2925      	GOTO       L_ConfiguracionPrincipal0
0x012B	0x0000      	NOP
;HSPrueba.c,71 :: 		}
L_end_ConfiguracionPrincipal:
0x012C	0x0008      	RETURN
; end of _ConfiguracionPrincipal
_main:
;HSPrueba.c,142 :: 		void main() {
;HSPrueba.c,144 :: 		AUX = 0;
0x012D	0x1283      	BCF        STATUS, 5
0x012E	0x1303      	BCF        STATUS, 6
0x012F	0x1186      	BCF        RB3_bit, BitPos(RB3_bit+0)
;HSPrueba.c,145 :: 		ConfiguracionPrincipal();
0x0130	0x2111      	CALL       _ConfiguracionPrincipal
;HSPrueba.c,146 :: 		TOUT = 1;
0x0131	0x1283      	BCF        STATUS, 5
0x0132	0x1587      	BSF        RC3_bit, BitPos(RC3_bit+0)
;HSPrueba.c,147 :: 		Delay_ms(200);
0x0133	0x3003      	MOVLW      3
0x0134	0x00FB      	MOVWF      R11
0x0135	0x3008      	MOVLW      8
0x0136	0x00FC      	MOVWF      R12
0x0137	0x3077      	MOVLW      119
0x0138	0x00FD      	MOVWF      R13
L_main20:
0x0139	0x0BFD      	DECFSZ     R13, 1
0x013A	0x2939      	GOTO       L_main20
0x013B	0x0BFC      	DECFSZ     R12, 1
0x013C	0x2939      	GOTO       L_main20
0x013D	0x0BFB      	DECFSZ     R11, 1
0x013E	0x2939      	GOTO       L_main20
;HSPrueba.c,148 :: 		TOUT = 0;
0x013F	0x1187      	BCF        RC3_bit, BitPos(RC3_bit+0)
;HSPrueba.c,150 :: 		}
L_end_main:
0x0140	0x2940      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004      [52]    _interrupt
0x0038       [7]    _UART1_Tx_Idle
0x003F      [10]    _UART1_Write
0x0049      [16]    _UART1_Init
0x0059      [44]    _CalcularCRC
0x0085     [140]    _EnviarMensajeRS485
0x0111      [28]    _ConfiguracionPrincipal
0x012D      [20]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0006       [0]    AUX
0x0006       [0]    RB3_bit
0x0007       [0]    RC3_bit
0x0007       [0]    TOUT
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000C       [1]    PIR1
0x0018       [1]    RCSTA
0x0019       [1]    TXREG
0x001A       [1]    RCREG
0x0024       [2]    ___DoICPAddr
0x0026       [1]    _sizePDU
0x0027      [15]    _PDU
0x0036      [30]    _trama
0x0054       [1]    ___saveSTATUS
0x0055       [1]    ___savePCLATH
0x0056       [1]    FARG_EnviarMensajeRS485_tramaPDU
0x0057       [1]    FARG_EnviarMensajeRS485_sizePDU
0x0058       [1]    EnviarMensajeRS485_i_L0
0x0059       [2]    EnviarMensajeRS485_CRCPDU_L0
0x005B       [1]    EnviarMensajeRS485_ptrCRCPDU_L0
0x005C       [1]    FARG_UART1_Write_data_
0x005C       [1]    FARG_CalcularCRC_trama
0x005D       [1]    FARG_CalcularCRC_tramaSize
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [1]    OPTION_REG
0x0086       [0]    TRISB3_bit
0x0087       [0]    TRISC3_bit
0x0087       [0]    TRISC7_bit
0x0087       [0]    TRISC6_bit
0x0098       [1]    TXSTA
0x0099       [1]    SPBRG
