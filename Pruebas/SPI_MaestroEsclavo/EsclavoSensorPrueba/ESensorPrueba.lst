;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 28/11/2018 16:13:04
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x28DB      	GOTO       219
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00BE      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00BD      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0870      	MOVF       R0, 0
0x000C	0x00A1      	MOVWF      33
0x000D	0x087D      	MOVF       R13, 0
0x000E	0x00A0      	MOVWF      32
;ESensorPrueba.c,66 :: 		void interrupt(){
;ESensorPrueba.c,69 :: 		if (INTCON.INTF==1){
0x000F	0x1C8B      	BTFSS      INTCON, 1
0x0010	0x2814      	GOTO       L_interrupt1
;ESensorPrueba.c,70 :: 		INTCON.INTF = 0;                                  //Limpia la badera de interrupcion externa
0x0011	0x108B      	BCF        INTCON, 1
;ESensorPrueba.c,71 :: 		SSPBUF = 0xBB;
0x0012	0x30BB      	MOVLW      187
0x0013	0x0093      	MOVWF      SSPBUF
;ESensorPrueba.c,72 :: 		}
L_interrupt1:
;ESensorPrueba.c,75 :: 		if (PIR1.SSPIF){
0x0014	0x1D8C      	BTFSS      PIR1, 3
0x0015	0x2865      	GOTO       L_interrupt2
;ESensorPrueba.c,77 :: 		PIR1.SSPIF = 0;                                   //Limpia la bandera de interrupcion por SPI
0x0016	0x118C      	BCF        PIR1, 3
;ESensorPrueba.c,78 :: 		AUX = 1;
0x0017	0x1586      	BSF        RB3_bit, BitPos(RB3_bit+0)
;ESensorPrueba.c,79 :: 		AUX = 0;
0x0018	0x1186      	BCF        RB3_bit, BitPos(RB3_bit+0)
;ESensorPrueba.c,81 :: 		buffer =  SSPBUF;                                 //Guarda el contenido del bufeer (lectura)
0x0019	0x0813      	MOVF       SSPBUF, 0
0x001A	0x00A7      	MOVWF      _buffer
;ESensorPrueba.c,83 :: 		if (buffer==0xA0){                                //Verifica si el primer byte es la cabecera de datos
0x001B	0x0827      	MOVF       _buffer, 0
0x001C	0x3AA0      	XORLW      160
0x001D	0x1D03      	BTFSS      STATUS, 2
0x001E	0x2827      	GOTO       L_interrupt3
;ESensorPrueba.c,84 :: 		banMed = 1;
0x001F	0x3001      	MOVLW      1
0x0020	0x00BC      	MOVWF      _banMed
;ESensorPrueba.c,85 :: 		SSPBUF = 0xA0;                                 //Guarda en el buffer un valor de cabecera (puede ser cuaquier valor, igual el Maaestro ignora este byte)
0x0021	0x30A0      	MOVLW      160
0x0022	0x0093      	MOVWF      SSPBUF
;ESensorPrueba.c,86 :: 		Delay_us(50);
0x0023	0x3021      	MOVLW      33
0x0024	0x00FD      	MOVWF      R13
L_interrupt4:
0x0025	0x0BFD      	DECFSZ     R13, 1
0x0026	0x2825      	GOTO       L_interrupt4
;ESensorPrueba.c,87 :: 		}
L_interrupt3:
;ESensorPrueba.c,88 :: 		if ((banMed==1)&&(buffer!=0xA0)&&(buffer!=0xA1)){
0x0027	0x083C      	MOVF       _banMed, 0
0x0028	0x3A01      	XORLW      1
0x0029	0x1D03      	BTFSS      STATUS, 2
0x002A	0x284B      	GOTO       L_interrupt7
0x002B	0x0827      	MOVF       _buffer, 0
0x002C	0x3AA0      	XORLW      160
0x002D	0x1903      	BTFSC      STATUS, 2
0x002E	0x284B      	GOTO       L_interrupt7
0x002F	0x0827      	MOVF       _buffer, 0
0x0030	0x3AA1      	XORLW      161
0x0031	0x1903      	BTFSC      STATUS, 2
0x0032	0x284B      	GOTO       L_interrupt7
L__interrupt21:
;ESensorPrueba.c,89 :: 		registro = buffer;
0x0033	0x0827      	MOVF       _buffer, 0
0x0034	0x00B8      	MOVWF      _registro
;ESensorPrueba.c,90 :: 		switch (registro){
0x0035	0x2842      	GOTO       L_interrupt8
;ESensorPrueba.c,91 :: 		case 1:
L_interrupt10:
;ESensorPrueba.c,92 :: 		numBytesSPI = 0x02;
0x0036	0x3002      	MOVLW      2
0x0037	0x00B7      	MOVWF      _numBytesSPI
;ESensorPrueba.c,93 :: 		SSPBUF = numBytesSPI;
0x0038	0x3002      	MOVLW      2
0x0039	0x0093      	MOVWF      SSPBUF
;ESensorPrueba.c,94 :: 		break;
0x003A	0x284B      	GOTO       L_interrupt9
;ESensorPrueba.c,95 :: 		case 2:
L_interrupt11:
;ESensorPrueba.c,96 :: 		numBytesSPI = 0x04;
0x003B	0x3004      	MOVLW      4
0x003C	0x00B7      	MOVWF      _numBytesSPI
;ESensorPrueba.c,97 :: 		SSPBUF = numBytesSPI;
0x003D	0x3004      	MOVLW      4
0x003E	0x0093      	MOVWF      SSPBUF
;ESensorPrueba.c,98 :: 		break;
0x003F	0x284B      	GOTO       L_interrupt9
;ESensorPrueba.c,99 :: 		default:
L_interrupt12:
;ESensorPrueba.c,100 :: 		SSPBUF = 0;
0x0040	0x0193      	CLRF       SSPBUF
;ESensorPrueba.c,101 :: 		}
0x0041	0x284B      	GOTO       L_interrupt9
L_interrupt8:
0x0042	0x0838      	MOVF       _registro, 0
0x0043	0x3A01      	XORLW      1
0x0044	0x1903      	BTFSC      STATUS, 2
0x0045	0x2836      	GOTO       L_interrupt10
0x0046	0x0838      	MOVF       _registro, 0
0x0047	0x3A02      	XORLW      2
0x0048	0x1903      	BTFSC      STATUS, 2
0x0049	0x283B      	GOTO       L_interrupt11
0x004A	0x2840      	GOTO       L_interrupt12
L_interrupt9:
;ESensorPrueba.c,102 :: 		}
L_interrupt7:
;ESensorPrueba.c,103 :: 		if (buffer==0xA1){
0x004B	0x0827      	MOVF       _buffer, 0
0x004C	0x3AA1      	XORLW      161
0x004D	0x1D03      	BTFSS      STATUS, 2
0x004E	0x2857      	GOTO       L_interrupt13
;ESensorPrueba.c,104 :: 		banPet = 1;
0x004F	0x3001      	MOVLW      1
0x0050	0x00A6      	MOVWF      _banPet
;ESensorPrueba.c,105 :: 		banMed = 0;
0x0051	0x01BC      	CLRF       _banMed
;ESensorPrueba.c,106 :: 		UART1_Write(registro);
0x0052	0x0838      	MOVF       _registro, 0
0x0053	0x00C3      	MOVWF      FARG_UART1_Write_data_
0x0054	0x20D1      	CALL       _UART1_Write
;ESensorPrueba.c,107 :: 		SSPBUF = 0xB0;
0x0055	0x30B0      	MOVLW      176
0x0056	0x0093      	MOVWF      SSPBUF
;ESensorPrueba.c,108 :: 		}
L_interrupt13:
;ESensorPrueba.c,110 :: 		if (banResp==1){                                  //Verifica que la bandera de respuesta este activa
0x0057	0x083A      	MOVF       _banResp, 0
0x0058	0x3A01      	XORLW      1
0x0059	0x1D03      	BTFSS      STATUS, 2
0x005A	0x2865      	GOTO       L_interrupt14
;ESensorPrueba.c,111 :: 		if (i<numBytesSPI){
0x005B	0x0837      	MOVF       _numBytesSPI, 0
0x005C	0x0223      	SUBWF      _i, 0
0x005D	0x1803      	BTFSC      STATUS, 0
0x005E	0x2865      	GOTO       L_interrupt15
;ESensorPrueba.c,112 :: 		SSPBUF = resSPI[i];
0x005F	0x0823      	MOVF       _i, 0
0x0060	0x3E28      	ADDLW      _resSPI
0x0061	0x0084      	MOVWF      FSR
0x0062	0x0800      	MOVF       INDF, 0
0x0063	0x0093      	MOVWF      SSPBUF
;ESensorPrueba.c,113 :: 		i++;
0x0064	0x0AA3      	INCF       _i, 1
;ESensorPrueba.c,114 :: 		}
L_interrupt15:
;ESensorPrueba.c,120 :: 		}
L_interrupt14:
;ESensorPrueba.c,123 :: 		}
L_interrupt2:
;ESensorPrueba.c,125 :: 		}
L_end_interrupt:
L__interrupt24:
0x0065	0x0821      	MOVF       33, 0
0x0066	0x00F0      	MOVWF      R0
0x0067	0x0820      	MOVF       32, 0
0x0068	0x00FD      	MOVWF      R13
0x0069	0x083D      	MOVF       ___savePCLATH, 0
0x006A	0x008A      	MOVWF      PCLATH
0x006B	0x0E3E      	SWAPF      ___saveSTATUS, 0
0x006C	0x0083      	MOVWF      STATUS
0x006D	0x0EFF      	SWAPF      R15, 1
0x006E	0x0E7F      	SWAPF      R15, 0
0x006F	0x0009      	RETFIE
; end of _interrupt
_SPI1_Init_Advanced:
;__Lib_SPI_c345.c,31 :: 		
;__Lib_SPI_c345.c,33 :: 		
0x0070	0x1683      	BSF        STATUS, 5
0x0071	0x1303      	BCF        STATUS, 6
0x0072	0x1287      	BCF        TRISC5_bit, BitPos(TRISC5_bit+0)
;__Lib_SPI_c345.c,34 :: 		
0x0073	0x1283      	BCF        STATUS, 5
0x0074	0x083F      	MOVF       FARG_SPI1_Init_Advanced_master, 0
0x0075	0x3A04      	XORLW      4
0x0076	0x1D03      	BTFSS      STATUS, 2
0x0077	0x287B      	GOTO       L_SPI1_Init_Advanced0
0x0078	0x1683      	BSF        STATUS, 5
0x0079	0x1587      	BSF        TRISC3_bit, BitPos(TRISC3_bit+0)
0x007A	0x287D      	GOTO       L_SPI1_Init_Advanced1
L_SPI1_Init_Advanced0:
0x007B	0x1683      	BSF        STATUS, 5
;__Lib_SPI_c345.c,35 :: 		
0x007C	0x1187      	BCF        TRISC3_bit, BitPos(TRISC3_bit+0)
L_SPI1_Init_Advanced1:
;__Lib_SPI_c345.c,36 :: 		
0x007D	0x1607      	BSF        TRISC4_bit, BitPos(TRISC4_bit+0)
;__Lib_SPI_c345.c,38 :: 		
0x007E	0x1283      	BCF        STATUS, 5
0x007F	0x0194      	CLRF       SSPCON
;__Lib_SPI_c345.c,39 :: 		
0x0080	0x083F      	MOVF       FARG_SPI1_Init_Advanced_master, 0
0x0081	0x0494      	IORWF      SSPCON, 1
;__Lib_SPI_c345.c,40 :: 		
0x0082	0x0841      	MOVF       FARG_SPI1_Init_Advanced_clock_idle, 0
0x0083	0x0494      	IORWF      SSPCON, 1
;__Lib_SPI_c345.c,41 :: 		
0x0084	0x0840      	MOVF       FARG_SPI1_Init_Advanced_data_sample, 0
0x0085	0x1683      	BSF        STATUS, 5
0x0086	0x0494      	IORWF      SSPSTAT, 1
;__Lib_SPI_c345.c,43 :: 		
0x0087	0x1283      	BCF        STATUS, 5
0x0088	0x0841      	MOVF       FARG_SPI1_Init_Advanced_clock_idle, 0
0x0089	0x1903      	BTFSC      STATUS, 2
0x008A	0x2892      	GOTO       L_SPI1_Init_Advanced2
;__Lib_SPI_c345.c,44 :: 		
0x008B	0x0842      	MOVF       FARG_SPI1_Init_Advanced_transmit_edge, 0
0x008C	0x3A00      	XORLW      0
0x008D	0x1D03      	BTFSS      STATUS, 2
0x008E	0x2891      	GOTO       L_SPI1_Init_Advanced3
;__Lib_SPI_c345.c,45 :: 		
0x008F	0x1683      	BSF        STATUS, 5
0x0090	0x1714      	BSF        SSPSTAT, 6
L_SPI1_Init_Advanced3:
;__Lib_SPI_c345.c,46 :: 		
0x0091	0x2898      	GOTO       L_SPI1_Init_Advanced4
L_SPI1_Init_Advanced2:
;__Lib_SPI_c345.c,48 :: 		
0x0092	0x1283      	BCF        STATUS, 5
0x0093	0x0842      	MOVF       FARG_SPI1_Init_Advanced_transmit_edge, 0
0x0094	0x1903      	BTFSC      STATUS, 2
0x0095	0x2898      	GOTO       L_SPI1_Init_Advanced5
;__Lib_SPI_c345.c,49 :: 		
0x0096	0x1683      	BSF        STATUS, 5
0x0097	0x1714      	BSF        SSPSTAT, 6
L_SPI1_Init_Advanced5:
;__Lib_SPI_c345.c,50 :: 		
L_SPI1_Init_Advanced4:
;__Lib_SPI_c345.c,51 :: 		
0x0098	0x1283      	BCF        STATUS, 5
0x0099	0x1694      	BSF        SSPCON, 5
;__Lib_SPI_c345.c,52 :: 		
L_end_SPI1_Init_Advanced:
0x009A	0x0008      	RETURN
; end of _SPI1_Init_Advanced
_UART1_Init:
;__Lib_UART_c67.c,2 :: 		
;__Lib_UART_c67.c,5 :: 		
0x009B	0x1683      	BSF        STATUS, 5
0x009C	0x1303      	BCF        STATUS, 6
0x009D	0x1698      	BSF        TXSTA, 5
;__Lib_UART_c67.c,6 :: 		
0x009E	0x3090      	MOVLW      144
0x009F	0x1283      	BCF        STATUS, 5
0x00A0	0x0098      	MOVWF      RCSTA
;__Lib_UART_c67.c,7 :: 		
0x00A1	0x1683      	BSF        STATUS, 5
0x00A2	0x1787      	BSF        TRISC7_bit, BitPos(TRISC7_bit+0)
;__Lib_UART_c67.c,8 :: 		
0x00A3	0x1307      	BCF        TRISC6_bit, BitPos(TRISC6_bit+0)
;__Lib_UART_c67.c,10 :: 		
L_UART1_Init0:
0x00A4	0x1283      	BCF        STATUS, 5
0x00A5	0x1E8C      	BTFSS      PIR1, 5
0x00A6	0x28AA      	GOTO       L_UART1_Init1
;__Lib_UART_c67.c,11 :: 		
0x00A7	0x081A      	MOVF       RCREG, 0
0x00A8	0x00F0      	MOVWF      R0
0x00A9	0x28A4      	GOTO       L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c67.c,12 :: 		
L_end_UART1_Init:
0x00AA	0x0008      	RETURN
; end of _UART1_Init
_ConfiguracionPrincipal:
;ESensorPrueba.c,33 :: 		void ConfiguracionPrincipal(){
;ESensorPrueba.c,35 :: 		TRISC2_bit = 0;
0x00AB	0x1683      	BSF        STATUS, 5
0x00AC	0x1303      	BCF        STATUS, 6
0x00AD	0x1107      	BCF        TRISC2_bit, BitPos(TRISC2_bit+0)
;ESensorPrueba.c,36 :: 		TRISB3_bit = 0;
0x00AE	0x1186      	BCF        TRISB3_bit, BitPos(TRISB3_bit+0)
;ESensorPrueba.c,37 :: 		TRISA5_bit = 1;
0x00AF	0x1685      	BSF        TRISA5_bit, BitPos(TRISA5_bit+0)
;ESensorPrueba.c,39 :: 		INTCON.GIE = 1;                                    //Habilita las interrupciones globales
0x00B0	0x178B      	BSF        INTCON, 7
;ESensorPrueba.c,40 :: 		INTCON.PEIE = 1;                                   //Habilita las interrupciones perifericas
0x00B1	0x170B      	BSF        INTCON, 6
;ESensorPrueba.c,43 :: 		UART1_Init(19200);                                 //Inicializa el UART1 a 19200 bps
0x00B2	0x3019      	MOVLW      25
0x00B3	0x0099      	MOVWF      SPBRG
0x00B4	0x1518      	BSF        TXSTA, 2
0x00B5	0x209B      	CALL       _UART1_Init
;ESensorPrueba.c,47 :: 		SPI1_Init_Advanced(_SPI_SLAVE_SS_ENABLE,_SPI_DATA_SAMPLE_MIDDLE,_SPI_CLK_IDLE_HIGH,_SPI_LOW_2_HIGH);
0x00B6	0x3004      	MOVLW      4
0x00B7	0x00BF      	MOVWF      FARG_SPI1_Init_Advanced_master
0x00B8	0x01C0      	CLRF       FARG_SPI1_Init_Advanced_data_sample
0x00B9	0x3010      	MOVLW      16
0x00BA	0x00C1      	MOVWF      FARG_SPI1_Init_Advanced_clock_idle
0x00BB	0x3001      	MOVLW      1
0x00BC	0x00C2      	MOVWF      FARG_SPI1_Init_Advanced_transmit_edge
0x00BD	0x2070      	CALL       _SPI1_Init_Advanced
;ESensorPrueba.c,48 :: 		PIE1.SSPIE = 1;                                  //Habilita la interrupcion por SPI
0x00BE	0x1683      	BSF        STATUS, 5
0x00BF	0x158C      	BSF        PIE1, 3
;ESensorPrueba.c,51 :: 		INTCON.INTE = 1;                                   //Habilita la interrupcion externa
0x00C0	0x160B      	BSF        INTCON, 4
;ESensorPrueba.c,52 :: 		INTCON.INTF = 0;                                   //Limpia la bandera de interrupcion externa
0x00C1	0x108B      	BCF        INTCON, 1
;ESensorPrueba.c,53 :: 		OPTION_REG.INTEDG = 1;                             //Activa la interrupcion en el flanco de bajada
0x00C2	0x1701      	BSF        OPTION_REG, 6
;ESensorPrueba.c,55 :: 		Delay_ms(100);                                     //Espera hasta que se estabilicen los cambios
0x00C3	0x3002      	MOVLW      2
0x00C4	0x00FB      	MOVWF      R11
0x00C5	0x3004      	MOVLW      4
0x00C6	0x00FC      	MOVWF      R12
0x00C7	0x30BA      	MOVLW      186
0x00C8	0x00FD      	MOVWF      R13
L_ConfiguracionPrincipal0:
0x00C9	0x0BFD      	DECFSZ     R13, 1
0x00CA	0x28C9      	GOTO       L_ConfiguracionPrincipal0
0x00CB	0x0BFC      	DECFSZ     R12, 1
0x00CC	0x28C9      	GOTO       L_ConfiguracionPrincipal0
0x00CD	0x0BFB      	DECFSZ     R11, 1
0x00CE	0x28C9      	GOTO       L_ConfiguracionPrincipal0
0x00CF	0x0000      	NOP
;ESensorPrueba.c,57 :: 		}
L_end_ConfiguracionPrincipal:
0x00D0	0x0008      	RETURN
; end of _ConfiguracionPrincipal
_UART1_Write:
;__Lib_UART_c67.c,39 :: 		
;__Lib_UART_c67.c,40 :: 		
L_UART1_Write3:
0x00D1	0x1683      	BSF        STATUS, 5
0x00D2	0x1303      	BCF        STATUS, 6
0x00D3	0x1898      	BTFSC      TXSTA, 1
0x00D4	0x28D7      	GOTO       L_UART1_Write4
;__Lib_UART_c67.c,41 :: 		
0x00D5	0x0000      	NOP
0x00D6	0x28D1      	GOTO       L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67.c,42 :: 		
0x00D7	0x1283      	BCF        STATUS, 5
0x00D8	0x0843      	MOVF       FARG_UART1_Write_data_, 0
0x00D9	0x0099      	MOVWF      TXREG
;__Lib_UART_c67.c,43 :: 		
L_end_UART1_Write:
0x00DA	0x0008      	RETURN
; end of _UART1_Write
_main:
;ESensorPrueba.c,128 :: 		void main() {
;ESensorPrueba.c,130 :: 		ConfiguracionPrincipal();
0x00DB	0x20AB      	CALL       _ConfiguracionPrincipal
;ESensorPrueba.c,131 :: 		ECINT = 0;
0x00DC	0x1283      	BCF        STATUS, 5
0x00DD	0x1107      	BCF        RC2_bit, BitPos(RC2_bit+0)
;ESensorPrueba.c,132 :: 		AUX = 0;
0x00DE	0x1186      	BCF        RB3_bit, BitPos(RB3_bit+0)
;ESensorPrueba.c,133 :: 		i = 0;
0x00DF	0x01A3      	CLRF       _i
;ESensorPrueba.c,134 :: 		x = 0;
0x00E0	0x01A2      	CLRF       _x
;ESensorPrueba.c,135 :: 		banPet = 0;
0x00E1	0x01A6      	CLRF       _banPet
;ESensorPrueba.c,136 :: 		banResp = 0;
0x00E2	0x01BA      	CLRF       _banResp
;ESensorPrueba.c,137 :: 		banSPI = 0;
0x00E3	0x01B9      	CLRF       _banSPI
;ESensorPrueba.c,138 :: 		banMed = 0;
0x00E4	0x01BC      	CLRF       _banMed
;ESensorPrueba.c,139 :: 		respSPI = 0xC0;
0x00E5	0x30C0      	MOVLW      192
0x00E6	0x00BB      	MOVWF      _respSPI
;ESensorPrueba.c,140 :: 		SSPBUF = 0xA0;                                   //Carga un valor inicial en el buffer
0x00E7	0x30A0      	MOVLW      160
0x00E8	0x0093      	MOVWF      SSPBUF
;ESensorPrueba.c,144 :: 		while(1){
L_main16:
;ESensorPrueba.c,146 :: 		if (banPet==1){                             //Verifica si se ha recibido una solicitud de medicion
0x00E9	0x0826      	MOVF       _banPet, 0
0x00EA	0x3A01      	XORLW      1
0x00EB	0x1D03      	BTFSS      STATUS, 2
0x00EC	0x2913      	GOTO       L_main18
;ESensorPrueba.c,147 :: 		Delay_ms(1000);                          //Simula un tiempo de procesamiento de la peticion
0x00ED	0x300B      	MOVLW      11
0x00EE	0x00FB      	MOVWF      R11
0x00EF	0x3026      	MOVLW      38
0x00F0	0x00FC      	MOVWF      R12
0x00F1	0x305D      	MOVLW      93
0x00F2	0x00FD      	MOVWF      R13
L_main19:
0x00F3	0x0BFD      	DECFSZ     R13, 1
0x00F4	0x28F3      	GOTO       L_main19
0x00F5	0x0BFC      	DECFSZ     R12, 1
0x00F6	0x28F3      	GOTO       L_main19
0x00F7	0x0BFB      	DECFSZ     R11, 1
0x00F8	0x28F3      	GOTO       L_main19
0x00F9	0x0000      	NOP
0x00FA	0x0000      	NOP
;ESensorPrueba.c,148 :: 		resSPI[0] = 0x83;                        //Llena el vector de respuesta con un valor de ejemplo (float 27.07)
0x00FB	0x3083      	MOVLW      131
0x00FC	0x00A8      	MOVWF      _resSPI
;ESensorPrueba.c,149 :: 		resSPI[1] = 0x58;
0x00FD	0x3058      	MOVLW      88
0x00FE	0x00A9      	MOVWF      _resSPI+1
;ESensorPrueba.c,150 :: 		resSPI[2] = 0x8F;
0x00FF	0x308F      	MOVLW      143
0x0100	0x00AA      	MOVWF      _resSPI+2
;ESensorPrueba.c,151 :: 		resSPI[3] = 0x5C;
0x0101	0x305C      	MOVLW      92
0x0102	0x00AB      	MOVWF      _resSPI+3
;ESensorPrueba.c,152 :: 		i=0;
0x0103	0x01A3      	CLRF       _i
;ESensorPrueba.c,154 :: 		ECINT = 1;                               //Genera un pulso en alto para producir una interrupcion externa en el Master
0x0104	0x1507      	BSF        RC2_bit, BitPos(RC2_bit+0)
;ESensorPrueba.c,155 :: 		Delay_ms(1);
0x0105	0x3003      	MOVLW      3
0x0106	0x00FC      	MOVWF      R12
0x0107	0x3097      	MOVLW      151
0x0108	0x00FD      	MOVWF      R13
L_main20:
0x0109	0x0BFD      	DECFSZ     R13, 1
0x010A	0x2909      	GOTO       L_main20
0x010B	0x0BFC      	DECFSZ     R12, 1
0x010C	0x2909      	GOTO       L_main20
0x010D	0x0000      	NOP
0x010E	0x0000      	NOP
;ESensorPrueba.c,156 :: 		ECINT = 0;
0x010F	0x1107      	BCF        RC2_bit, BitPos(RC2_bit+0)
;ESensorPrueba.c,157 :: 		banPet = 0;                              //Limpia la bandera de peticion SPI
0x0110	0x01A6      	CLRF       _banPet
;ESensorPrueba.c,158 :: 		banResp = 1;                             //Activa la bandera de respuesta SPI
0x0111	0x3001      	MOVLW      1
0x0112	0x00BA      	MOVWF      _banResp
;ESensorPrueba.c,160 :: 		}
L_main18:
;ESensorPrueba.c,202 :: 		}
0x0113	0x28E9      	GOTO       L_main16
;ESensorPrueba.c,204 :: 		}
L_end_main:
0x0114	0x2914      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004     [108]    _interrupt
0x0070      [43]    _SPI1_Init_Advanced
0x009B      [16]    _UART1_Init
0x00AB      [38]    _ConfiguracionPrincipal
0x00D1      [10]    _UART1_Write
0x00DB      [58]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0006       [0]    RB3_bit
0x0006       [0]    AUX
0x0007       [0]    RC2_bit
0x0007       [0]    ECINT
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000C       [1]    PIR1
0x0013       [1]    SSPBUF
0x0014       [1]    SSPCON
0x0018       [1]    RCSTA
0x0019       [1]    TXREG
0x001A       [1]    RCREG
0x0022       [1]    _x
0x0023       [1]    _i
0x0024       [2]    ___DoICPAddr
0x0026       [1]    _banPet
0x0027       [1]    _buffer
0x0028      [15]    _resSPI
0x0037       [1]    _numBytesSPI
0x0038       [1]    _registro
0x0039       [1]    _banSPI
0x003A       [1]    _banResp
0x003B       [1]    _respSPI
0x003C       [1]    _banMed
0x003D       [1]    ___savePCLATH
0x003E       [1]    ___saveSTATUS
0x003F       [1]    FARG_SPI1_Init_Advanced_master
0x0040       [1]    FARG_SPI1_Init_Advanced_data_sample
0x0041       [1]    FARG_SPI1_Init_Advanced_clock_idle
0x0042       [1]    FARG_SPI1_Init_Advanced_transmit_edge
0x0043       [1]    FARG_UART1_Write_data_
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [1]    OPTION_REG
0x0085       [0]    TRISA5_bit
0x0086       [0]    TRISB3_bit
0x0087       [0]    TRISC4_bit
0x0087       [0]    TRISC3_bit
0x0087       [0]    TRISC2_bit
0x0087       [0]    TRISC7_bit
0x0087       [0]    TRISC6_bit
0x0087       [0]    TRISC5_bit
0x008C       [1]    PIE1
0x0094       [1]    SSPSTAT
0x0098       [1]    TXSTA
0x0099       [1]    SPBRG
