;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 28/11/2018 16:55:11
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x29D8      	GOTO       472
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00DE      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00DF      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0870      	MOVF       R0, 0
0x000C	0x00A2      	MOVWF      34
0x000D	0x087C      	MOVF       R12, 0
0x000E	0x00A1      	MOVWF      33
0x000F	0x087D      	MOVF       R13, 0
0x0010	0x00A0      	MOVWF      32
;EComunicacionPrueba.c,197 :: 		void interrupt(){
;EComunicacionPrueba.c,201 :: 		if (INTCON.INTF==1){
0x0011	0x1C8B      	BTFSS      INTCON, 1
0x0012	0x2838      	GOTO       L_interrupt27
;EComunicacionPrueba.c,202 :: 		INTCON.INTF = 0;                                //Limpia la badera de interrupcion externa
0x0013	0x108B      	BCF        INTCON, 1
;EComunicacionPrueba.c,203 :: 		Delay_ms(10);                                   //**Sin esto no funciona y no se porque**
0x0014	0x301A      	MOVLW      26
0x0015	0x00FC      	MOVWF      R12
0x0016	0x30F8      	MOVLW      248
0x0017	0x00FD      	MOVWF      R13
L_interrupt28:
0x0018	0x0BFD      	DECFSZ     R13, 1
0x0019	0x2818      	GOTO       L_interrupt28
0x001A	0x0BFC      	DECFSZ     R12, 1
0x001B	0x2818      	GOTO       L_interrupt28
0x001C	0x0000      	NOP
;EComunicacionPrueba.c,204 :: 		CS = 0;                                         //Coloca en bajo el pin CS para abrir la transmision
0x001D	0x1107      	BCF        RC2_bit, BitPos(RC2_bit+0)
;EComunicacionPrueba.c,205 :: 		for (x=0;x<=numBytesSPI;x++){
0x001E	0x01D8      	CLRF       _x
L_interrupt29:
0x001F	0x0858      	MOVF       _x, 0
0x0020	0x0256      	SUBWF      _numBytesSPI, 0
0x0021	0x1C03      	BTFSS      STATUS, 0
0x0022	0x2837      	GOTO       L_interrupt30
;EComunicacionPrueba.c,206 :: 		SSPBUF = 0xBB;                              //Envia x cantidad de bytes al esclavo segun el numero de bytes+1 que haya solicitado en la respuesta de la solicitud de medicion
0x0023	0x30BB      	MOVLW      187
0x0024	0x0093      	MOVWF      SSPBUF
;EComunicacionPrueba.c,207 :: 		if ((x>0)){
0x0025	0x0858      	MOVF       _x, 0
0x0026	0x3C00      	SUBLW      0
0x0027	0x1803      	BTFSC      STATUS, 0
0x0028	0x2831      	GOTO       L_interrupt32
;EComunicacionPrueba.c,208 :: 		while (SSPSTAT.BF!=1);
L_interrupt33:
0x0029	0x1683      	BSF        STATUS, 5
0x002A	0x1814      	BTFSC      SSPSTAT, 0
0x002B	0x282D      	GOTO       L_interrupt34
0x002C	0x2829      	GOTO       L_interrupt33
L_interrupt34:
;EComunicacionPrueba.c,209 :: 		UART1_Write(SSPBUF);
0x002D	0x1283      	BCF        STATUS, 5
0x002E	0x0813      	MOVF       SSPBUF, 0
0x002F	0x00EC      	MOVWF      FARG_UART1_Write_data_
0x0030	0x212A      	CALL       _UART1_Write
;EComunicacionPrueba.c,210 :: 		}
L_interrupt32:
;EComunicacionPrueba.c,211 :: 		Delay_us(200);
0x0031	0x3085      	MOVLW      133
0x0032	0x00FD      	MOVWF      R13
L_interrupt35:
0x0033	0x0BFD      	DECFSZ     R13, 1
0x0034	0x2833      	GOTO       L_interrupt35
;EComunicacionPrueba.c,205 :: 		for (x=0;x<=numBytesSPI;x++){
0x0035	0x0AD8      	INCF       _x, 1
;EComunicacionPrueba.c,212 :: 		}
0x0036	0x281F      	GOTO       L_interrupt29
L_interrupt30:
;EComunicacionPrueba.c,213 :: 		CS = 1;                                         //Coloca en alto el pin CS para cerrar la transmision
0x0037	0x1507      	BSF        RC2_bit, BitPos(RC2_bit+0)
;EComunicacionPrueba.c,214 :: 		}
L_interrupt27:
;EComunicacionPrueba.c,217 :: 		if (PIR1.RCIF==1){
0x0038	0x1E8C      	BTFSS      PIR1, 5
0x0039	0x28AF      	GOTO       L_interrupt36
;EComunicacionPrueba.c,219 :: 		byteTrama = UART1_Read();                       //Lee el byte de la trama de peticion
0x003A	0x2134      	CALL       _UART1_Read
0x003B	0x0870      	MOVF       R0, 0
0x003C	0x00C2      	MOVWF      _byteTrama
;EComunicacionPrueba.c,221 :: 		if ((byteTrama==HDR)&&(banTI==0)){
0x003D	0x0870      	MOVF       R0, 0
0x003E	0x3A3A      	XORLW      58
0x003F	0x1D03      	BTFSS      STATUS, 2
0x0040	0x284A      	GOTO       L_interrupt39
0x0041	0x085D      	MOVF       _banTI, 0
0x0042	0x3A00      	XORLW      0
0x0043	0x1D03      	BTFSS      STATUS, 2
0x0044	0x284A      	GOTO       L_interrupt39
L__interrupt56:
;EComunicacionPrueba.c,222 :: 		banTI = 1;                                   //Activa la bandera de inicio de trama
0x0045	0x3001      	MOVLW      1
0x0046	0x00DD      	MOVWF      _banTI
;EComunicacionPrueba.c,223 :: 		i1 = 0;                                      //Define en 1 el subindice de la trama de peticion
0x0047	0x01D5      	CLRF       _i1
;EComunicacionPrueba.c,224 :: 		tramaOk = 9;                                 //Limpia la variable que indica si la trama ha llegado correctamente
0x0048	0x3009      	MOVLW      9
0x0049	0x00A3      	MOVWF      _tramaOk
;EComunicacionPrueba.c,225 :: 		}
L_interrupt39:
;EComunicacionPrueba.c,227 :: 		if (banTI==1){                                  //Verifica que la bandera de inicio de trama este activa
0x004A	0x085D      	MOVF       _banTI, 0
0x004B	0x3A01      	XORLW      1
0x004C	0x1D03      	BTFSS      STATUS, 2
0x004D	0x286A      	GOTO       L_interrupt40
;EComunicacionPrueba.c,228 :: 		if (byteTrama!=END2){                        //Verifica que el dato recibido sea diferente del primer byte del delimitador de final de trama
0x004E	0x0842      	MOVF       _byteTrama, 0
0x004F	0x3A0A      	XORLW      10
0x0050	0x1903      	BTFSC      STATUS, 2
0x0051	0x285A      	GOTO       L_interrupt41
;EComunicacionPrueba.c,229 :: 		tramaRS485[i1] = byteTrama;               //Almacena el dato en la trama de respuesta
0x0052	0x0855      	MOVF       _i1, 0
0x0053	0x3E24      	ADDLW      _tramaRS485
0x0054	0x0084      	MOVWF      FSR
0x0055	0x0842      	MOVF       _byteTrama, 0
0x0056	0x0080      	MOVWF      INDF
;EComunicacionPrueba.c,230 :: 		i1++;                                     //Aumenta el subindice en una unidad para permitir almacenar el siguiente dato del mensaje
0x0057	0x0AD5      	INCF       _i1, 1
;EComunicacionPrueba.c,231 :: 		banTF = 0;                                //Limpia la bandera de final de trama
0x0058	0x01D9      	CLRF       _banTF
;EComunicacionPrueba.c,232 :: 		} else {
0x0059	0x2861      	GOTO       L_interrupt42
L_interrupt41:
;EComunicacionPrueba.c,233 :: 		tramaRS485[i1] = byteTrama;               //Almacena el dato en la trama de respuesta
0x005A	0x0855      	MOVF       _i1, 0
0x005B	0x3E24      	ADDLW      _tramaRS485
0x005C	0x0084      	MOVWF      FSR
0x005D	0x0842      	MOVF       _byteTrama, 0
0x005E	0x0080      	MOVWF      INDF
;EComunicacionPrueba.c,234 :: 		banTF = 1;                                //Si el dato recibido es el primer byte de final de trama activa la bandera
0x005F	0x3001      	MOVLW      1
0x0060	0x00D9      	MOVWF      _banTF
;EComunicacionPrueba.c,235 :: 		}
L_interrupt42:
;EComunicacionPrueba.c,236 :: 		if (BanTF==1){                               //Verifica que se cumpla la condicion de final de trama
0x0061	0x0859      	MOVF       _banTF, 0
0x0062	0x3A01      	XORLW      1
0x0063	0x1D03      	BTFSS      STATUS, 2
0x0064	0x286A      	GOTO       L_interrupt43
;EComunicacionPrueba.c,237 :: 		banTI = 0;                                //Limpia la bandera de inicio de trama para no permitir que se almacene mas datos en la trama de respuesta
0x0065	0x01DD      	CLRF       _banTI
;EComunicacionPrueba.c,238 :: 		banTC = 1;                                //Activa la bandera de trama completa
0x0066	0x3001      	MOVLW      1
0x0067	0x00DC      	MOVWF      _banTC
;EComunicacionPrueba.c,239 :: 		t1Size = tramaRS485[2];                   //Guarda el byte de longitud del campo PDU
0x0068	0x0826      	MOVF       _tramaRS485+2, 0
0x0069	0x00C3      	MOVWF      _t1Size
;EComunicacionPrueba.c,240 :: 		}
L_interrupt43:
;EComunicacionPrueba.c,241 :: 		}
L_interrupt40:
;EComunicacionPrueba.c,243 :: 		if (banTC==1){                                  //Verifica que se haya completado de llenar la trama de peticion
0x006A	0x085C      	MOVF       _banTC, 0
0x006B	0x3A01      	XORLW      1
0x006C	0x1D03      	BTFSS      STATUS, 2
0x006D	0x28AE      	GOTO       L_interrupt44
;EComunicacionPrueba.c,244 :: 		tramaOk = VerificarCRC(tramaRS485,t1Size);   //Calcula y verifica el CRC de la trama de peticion
0x006E	0x3024      	MOVLW      _tramaRS485
0x006F	0x00E4      	MOVWF      FARG_VerificarCRC_trama
0x0070	0x0843      	MOVF       _t1Size, 0
0x0071	0x00E5      	MOVWF      FARG_VerificarCRC_tramaPDUSize
0x0072	0x213F      	CALL       _VerificarCRC
0x0073	0x0870      	MOVF       R0, 0
0x0074	0x00A3      	MOVWF      _tramaOk
;EComunicacionPrueba.c,245 :: 		if (tramaOk==1){
0x0075	0x0870      	MOVF       R0, 0
0x0076	0x3A01      	XORLW      1
0x0077	0x1D03      	BTFSS      STATUS, 2
0x0078	0x28A5      	GOTO       L_interrupt45
;EComunicacionPrueba.c,246 :: 		EnviarACK();                             //Si la trama llego sin errores responde con un ACK al esclavo
0x0079	0x21C0      	CALL       _EnviarACK
;EComunicacionPrueba.c,248 :: 		petSPI[0] = 0xA0;                        //Cabecera de trama de solicitud de medicion
0x007A	0x30A0      	MOVLW      160
0x007B	0x1283      	BCF        STATUS, 5
0x007C	0x00C4      	MOVWF      _petSPI
;EComunicacionPrueba.c,249 :: 		petSPI[1] = 0x01;                        //Codigo del registro que se quiere leer
0x007D	0x3001      	MOVLW      1
0x007E	0x00C5      	MOVWF      _petSPI+1
;EComunicacionPrueba.c,250 :: 		petSPI[2] = 0xA1;                        //Delimitador de final de trama
0x007F	0x30A1      	MOVLW      161
0x0080	0x00C6      	MOVWF      _petSPI+2
;EComunicacionPrueba.c,252 :: 		CS = 0;
0x0081	0x1107      	BCF        RC2_bit, BitPos(RC2_bit+0)
;EComunicacionPrueba.c,253 :: 		for (x=0;x<3;x++){
0x0082	0x01D8      	CLRF       _x
L_interrupt46:
0x0083	0x3003      	MOVLW      3
0x0084	0x0258      	SUBWF      _x, 0
0x0085	0x1803      	BTFSC      STATUS, 0
0x0086	0x28A3      	GOTO       L_interrupt47
;EComunicacionPrueba.c,254 :: 		SSPBUF = petSPI[x];                  //Llena el buffer de salida con cada valor de la tramaSPI
0x0087	0x0858      	MOVF       _x, 0
0x0088	0x3E44      	ADDLW      _petSPI
0x0089	0x0084      	MOVWF      FSR
0x008A	0x0800      	MOVF       INDF, 0
0x008B	0x0093      	MOVWF      SSPBUF
;EComunicacionPrueba.c,255 :: 		if (x==2){
0x008C	0x0858      	MOVF       _x, 0
0x008D	0x3A02      	XORLW      2
0x008E	0x1D03      	BTFSS      STATUS, 2
0x008F	0x2897      	GOTO       L_interrupt49
;EComunicacionPrueba.c,256 :: 		while (SSPSTAT.BF!=1);
L_interrupt50:
0x0090	0x1683      	BSF        STATUS, 5
0x0091	0x1814      	BTFSC      SSPSTAT, 0
0x0092	0x2894      	GOTO       L_interrupt51
0x0093	0x2890      	GOTO       L_interrupt50
L_interrupt51:
;EComunicacionPrueba.c,257 :: 		numBytesSPI = SSPBUF;             //Recupera el valor de # de bytes que el Esclavo enviara en la solicitud de respuesta, (esto ocurre al enviar el tercer byte)
0x0094	0x1283      	BCF        STATUS, 5
0x0095	0x0813      	MOVF       SSPBUF, 0
0x0096	0x00D6      	MOVWF      _numBytesSPI
;EComunicacionPrueba.c,258 :: 		}
L_interrupt49:
;EComunicacionPrueba.c,259 :: 		Delay_ms(1);
0x0097	0x3003      	MOVLW      3
0x0098	0x00FC      	MOVWF      R12
0x0099	0x3097      	MOVLW      151
0x009A	0x00FD      	MOVWF      R13
L_interrupt52:
0x009B	0x0BFD      	DECFSZ     R13, 1
0x009C	0x289B      	GOTO       L_interrupt52
0x009D	0x0BFC      	DECFSZ     R12, 1
0x009E	0x289B      	GOTO       L_interrupt52
0x009F	0x0000      	NOP
0x00A0	0x0000      	NOP
;EComunicacionPrueba.c,253 :: 		for (x=0;x<3;x++){
0x00A1	0x0AD8      	INCF       _x, 1
;EComunicacionPrueba.c,260 :: 		}
0x00A2	0x2883      	GOTO       L_interrupt46
L_interrupt47:
;EComunicacionPrueba.c,261 :: 		CS = 1;
0x00A3	0x1507      	BSF        RC2_bit, BitPos(RC2_bit+0)
;EComunicacionPrueba.c,263 :: 		} else if (tramaOk==0) {
0x00A4	0x28AA      	GOTO       L_interrupt53
L_interrupt45:
0x00A5	0x0823      	MOVF       _tramaOk, 0
0x00A6	0x3A00      	XORLW      0
0x00A7	0x1D03      	BTFSS      STATUS, 2
0x00A8	0x28AA      	GOTO       L_interrupt54
;EComunicacionPrueba.c,264 :: 		EnviarNACK();                            //Si hubo algun error en la trama se envia un ACK al H/S para que reenvie la trama
0x00A9	0x21CC      	CALL       _EnviarNACK
;EComunicacionPrueba.c,265 :: 		}
L_interrupt54:
L_interrupt53:
;EComunicacionPrueba.c,266 :: 		banTC = 0;                                   //Limpia la bandera de trama completa
0x00AA	0x1283      	BCF        STATUS, 5
0x00AB	0x01DC      	CLRF       _banTC
;EComunicacionPrueba.c,267 :: 		i1 = 0;                                      //Limpia el subindice de trama
0x00AC	0x01D5      	CLRF       _i1
;EComunicacionPrueba.c,268 :: 		banTI = 0;
0x00AD	0x01DD      	CLRF       _banTI
;EComunicacionPrueba.c,269 :: 		}
L_interrupt44:
;EComunicacionPrueba.c,271 :: 		PIR1.RCIF = 0;
0x00AE	0x128C      	BCF        PIR1, 5
;EComunicacionPrueba.c,273 :: 		}
L_interrupt36:
;EComunicacionPrueba.c,275 :: 		}
L_end_interrupt:
L__interrupt66:
0x00AF	0x0822      	MOVF       34, 0
0x00B0	0x00F0      	MOVWF      R0
0x00B1	0x0821      	MOVF       33, 0
0x00B2	0x00FC      	MOVWF      R12
0x00B3	0x0820      	MOVF       32, 0
0x00B4	0x00FD      	MOVWF      R13
0x00B5	0x085F      	MOVF       ___savePCLATH, 0
0x00B6	0x008A      	MOVWF      PCLATH
0x00B7	0x0E5E      	SWAPF      ___saveSTATUS, 0
0x00B8	0x0083      	MOVWF      STATUS
0x00B9	0x0EFF      	SWAPF      R15, 1
0x00BA	0x0E7F      	SWAPF      R15, 0
0x00BB	0x0009      	RETFIE
; end of _interrupt
_UART1_Tx_Idle:
;__Lib_UART_c67.c,34 :: 		
;__Lib_UART_c67.c,35 :: 		
0x00BC	0x3000      	MOVLW      0
0x00BD	0x1683      	BSF        STATUS, 5
0x00BE	0x1303      	BCF        STATUS, 6
0x00BF	0x1898      	BTFSC      TXSTA, 1
0x00C0	0x3001      	MOVLW      1
0x00C1	0x00F0      	MOVWF      R0
;__Lib_UART_c67.c,36 :: 		
L_end_UART1_Tx_Idle:
0x00C2	0x0008      	RETURN
; end of _UART1_Tx_Idle
_CalcularCRC:
;EComunicacionPrueba.c,96 :: 		unsigned int CalcularCRC(unsigned char* trama, unsigned char tramaSize){
;EComunicacionPrueba.c,99 :: 		for(CRC16=0xFFFF; tramaSize!=0; tramaSize --){
0x00C3	0x30FF      	MOVLW      255
0x00C4	0x1283      	BCF        STATUS, 5
0x00C5	0x1303      	BCF        STATUS, 6
0x00C6	0x00F3      	MOVWF      R3
0x00C7	0x30FF      	MOVLW      255
0x00C8	0x00F4      	MOVWF      R3+1
L_CalcularCRC1:
0x00C9	0x086D      	MOVF       FARG_CalcularCRC_tramaSize, 0
0x00CA	0x3A00      	XORLW      0
0x00CB	0x1903      	BTFSC      STATUS, 2
0x00CC	0x28EA      	GOTO       L_CalcularCRC2
;EComunicacionPrueba.c,100 :: 		CRC16 ^=*trama ++;
0x00CD	0x086C      	MOVF       FARG_CalcularCRC_trama, 0
0x00CE	0x0084      	MOVWF      FSR
0x00CF	0x0800      	MOVF       INDF, 0
0x00D0	0x06F3      	XORWF      R3, 1
0x00D1	0x3000      	MOVLW      0
0x00D2	0x06F4      	XORWF      R3+1, 1
0x00D3	0x0AEC      	INCF       FARG_CalcularCRC_trama, 1
;EComunicacionPrueba.c,101 :: 		for(ucCounter =0; ucCounter <8; ucCounter ++){
0x00D4	0x01F2      	CLRF       R2
L_CalcularCRC4:
0x00D5	0x3008      	MOVLW      8
0x00D6	0x0272      	SUBWF      R2, 0
0x00D7	0x1803      	BTFSC      STATUS, 0
0x00D8	0x28E8      	GOTO       L_CalcularCRC5
;EComunicacionPrueba.c,102 :: 		if(CRC16 & 0x0001)
0x00D9	0x1C73      	BTFSS      R3, 0
0x00DA	0x28E3      	GOTO       L_CalcularCRC7
;EComunicacionPrueba.c,103 :: 		CRC16 = (CRC16 >>1)^POLMODBUS;
0x00DB	0x0CF4      	RRF        R3+1, 1
0x00DC	0x0CF3      	RRF        R3, 1
0x00DD	0x13F4      	BCF        R3+1, 7
0x00DE	0x3001      	MOVLW      1
0x00DF	0x06F3      	XORWF      R3, 1
0x00E0	0x30A0      	MOVLW      160
0x00E1	0x06F4      	XORWF      R3+1, 1
0x00E2	0x28E6      	GOTO       L_CalcularCRC8
L_CalcularCRC7:
;EComunicacionPrueba.c,105 :: 		CRC16>>=1;
0x00E3	0x0CF4      	RRF        R3+1, 1
0x00E4	0x0CF3      	RRF        R3, 1
0x00E5	0x13F4      	BCF        R3+1, 7
L_CalcularCRC8:
;EComunicacionPrueba.c,101 :: 		for(ucCounter =0; ucCounter <8; ucCounter ++){
0x00E6	0x0AF2      	INCF       R2, 1
;EComunicacionPrueba.c,106 :: 		}
0x00E7	0x28D5      	GOTO       L_CalcularCRC4
L_CalcularCRC5:
;EComunicacionPrueba.c,99 :: 		for(CRC16=0xFFFF; tramaSize!=0; tramaSize --){
0x00E8	0x03ED      	DECF       FARG_CalcularCRC_tramaSize, 1
;EComunicacionPrueba.c,107 :: 		}
0x00E9	0x28C9      	GOTO       L_CalcularCRC1
L_CalcularCRC2:
;EComunicacionPrueba.c,108 :: 		return CRC16;
0x00EA	0x0873      	MOVF       R3, 0
0x00EB	0x00F0      	MOVWF      R0
0x00EC	0x0874      	MOVF       R3+1, 0
0x00ED	0x00F1      	MOVWF      R0+1
;EComunicacionPrueba.c,109 :: 		}
L_end_CalcularCRC:
0x00EE	0x0008      	RETURN
; end of _CalcularCRC
_UART1_Init:
;__Lib_UART_c67.c,2 :: 		
;__Lib_UART_c67.c,5 :: 		
0x00EF	0x1683      	BSF        STATUS, 5
0x00F0	0x1303      	BCF        STATUS, 6
0x00F1	0x1698      	BSF        TXSTA, 5
;__Lib_UART_c67.c,6 :: 		
0x00F2	0x3090      	MOVLW      144
0x00F3	0x1283      	BCF        STATUS, 5
0x00F4	0x0098      	MOVWF      RCSTA
;__Lib_UART_c67.c,7 :: 		
0x00F5	0x1683      	BSF        STATUS, 5
0x00F6	0x1787      	BSF        TRISC7_bit, BitPos(TRISC7_bit+0)
;__Lib_UART_c67.c,8 :: 		
0x00F7	0x1307      	BCF        TRISC6_bit, BitPos(TRISC6_bit+0)
;__Lib_UART_c67.c,10 :: 		
L_UART1_Init0:
0x00F8	0x1283      	BCF        STATUS, 5
0x00F9	0x1E8C      	BTFSS      PIR1, 5
0x00FA	0x28FE      	GOTO       L_UART1_Init1
;__Lib_UART_c67.c,11 :: 		
0x00FB	0x081A      	MOVF       RCREG, 0
0x00FC	0x00F0      	MOVWF      R0
0x00FD	0x28F8      	GOTO       L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c67.c,12 :: 		
L_end_UART1_Init:
0x00FE	0x0008      	RETURN
; end of _UART1_Init
_SPI1_Init_Advanced:
;__Lib_SPI_c345.c,31 :: 		
;__Lib_SPI_c345.c,33 :: 		
0x00FF	0x1683      	BSF        STATUS, 5
0x0100	0x1303      	BCF        STATUS, 6
0x0101	0x1287      	BCF        TRISC5_bit, BitPos(TRISC5_bit+0)
;__Lib_SPI_c345.c,34 :: 		
0x0102	0x1283      	BCF        STATUS, 5
0x0103	0x0860      	MOVF       FARG_SPI1_Init_Advanced_master, 0
0x0104	0x3A04      	XORLW      4
0x0105	0x1D03      	BTFSS      STATUS, 2
0x0106	0x290A      	GOTO       L_SPI1_Init_Advanced0
0x0107	0x1683      	BSF        STATUS, 5
0x0108	0x1587      	BSF        TRISC3_bit, BitPos(TRISC3_bit+0)
0x0109	0x290C      	GOTO       L_SPI1_Init_Advanced1
L_SPI1_Init_Advanced0:
0x010A	0x1683      	BSF        STATUS, 5
;__Lib_SPI_c345.c,35 :: 		
0x010B	0x1187      	BCF        TRISC3_bit, BitPos(TRISC3_bit+0)
L_SPI1_Init_Advanced1:
;__Lib_SPI_c345.c,36 :: 		
0x010C	0x1607      	BSF        TRISC4_bit, BitPos(TRISC4_bit+0)
;__Lib_SPI_c345.c,38 :: 		
0x010D	0x1283      	BCF        STATUS, 5
0x010E	0x0194      	CLRF       SSPCON
;__Lib_SPI_c345.c,39 :: 		
0x010F	0x0860      	MOVF       FARG_SPI1_Init_Advanced_master, 0
0x0110	0x0494      	IORWF      SSPCON, 1
;__Lib_SPI_c345.c,40 :: 		
0x0111	0x0862      	MOVF       FARG_SPI1_Init_Advanced_clock_idle, 0
0x0112	0x0494      	IORWF      SSPCON, 1
;__Lib_SPI_c345.c,41 :: 		
0x0113	0x0861      	MOVF       FARG_SPI1_Init_Advanced_data_sample, 0
0x0114	0x1683      	BSF        STATUS, 5
0x0115	0x0494      	IORWF      SSPSTAT, 1
;__Lib_SPI_c345.c,43 :: 		
0x0116	0x1283      	BCF        STATUS, 5
0x0117	0x0862      	MOVF       FARG_SPI1_Init_Advanced_clock_idle, 0
0x0118	0x1903      	BTFSC      STATUS, 2
0x0119	0x2921      	GOTO       L_SPI1_Init_Advanced2
;__Lib_SPI_c345.c,44 :: 		
0x011A	0x0863      	MOVF       FARG_SPI1_Init_Advanced_transmit_edge, 0
0x011B	0x3A00      	XORLW      0
0x011C	0x1D03      	BTFSS      STATUS, 2
0x011D	0x2920      	GOTO       L_SPI1_Init_Advanced3
;__Lib_SPI_c345.c,45 :: 		
0x011E	0x1683      	BSF        STATUS, 5
0x011F	0x1714      	BSF        SSPSTAT, 6
L_SPI1_Init_Advanced3:
;__Lib_SPI_c345.c,46 :: 		
0x0120	0x2927      	GOTO       L_SPI1_Init_Advanced4
L_SPI1_Init_Advanced2:
;__Lib_SPI_c345.c,48 :: 		
0x0121	0x1283      	BCF        STATUS, 5
0x0122	0x0863      	MOVF       FARG_SPI1_Init_Advanced_transmit_edge, 0
0x0123	0x1903      	BTFSC      STATUS, 2
0x0124	0x2927      	GOTO       L_SPI1_Init_Advanced5
;__Lib_SPI_c345.c,49 :: 		
0x0125	0x1683      	BSF        STATUS, 5
0x0126	0x1714      	BSF        SSPSTAT, 6
L_SPI1_Init_Advanced5:
;__Lib_SPI_c345.c,50 :: 		
L_SPI1_Init_Advanced4:
;__Lib_SPI_c345.c,51 :: 		
0x0127	0x1283      	BCF        STATUS, 5
0x0128	0x1694      	BSF        SSPCON, 5
;__Lib_SPI_c345.c,52 :: 		
L_end_SPI1_Init_Advanced:
0x0129	0x0008      	RETURN
; end of _SPI1_Init_Advanced
_UART1_Write:
;__Lib_UART_c67.c,39 :: 		
;__Lib_UART_c67.c,40 :: 		
L_UART1_Write3:
0x012A	0x1683      	BSF        STATUS, 5
0x012B	0x1303      	BCF        STATUS, 6
0x012C	0x1898      	BTFSC      TXSTA, 1
0x012D	0x2930      	GOTO       L_UART1_Write4
;__Lib_UART_c67.c,41 :: 		
0x012E	0x0000      	NOP
0x012F	0x292A      	GOTO       L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67.c,42 :: 		
0x0130	0x1283      	BCF        STATUS, 5
0x0131	0x086C      	MOVF       FARG_UART1_Write_data_, 0
0x0132	0x0099      	MOVWF      TXREG
;__Lib_UART_c67.c,43 :: 		
L_end_UART1_Write:
0x0133	0x0008      	RETURN
; end of _UART1_Write
_UART1_Read:
;__Lib_UART_c67.c,21 :: 		
;__Lib_UART_c67.c,24 :: 		
0x0134	0x1283      	BCF        STATUS, 5
0x0135	0x1303      	BCF        STATUS, 6
0x0136	0x081A      	MOVF       RCREG, 0
0x0137	0x00F1      	MOVWF      R1
;__Lib_UART_c67.c,25 :: 		
0x0138	0x1C98      	BTFSS      RCSTA, 1
0x0139	0x293C      	GOTO       L_UART1_Read2
;__Lib_UART_c67.c,26 :: 		
0x013A	0x1218      	BCF        RCSTA, 4
;__Lib_UART_c67.c,27 :: 		
0x013B	0x1618      	BSF        RCSTA, 4
;__Lib_UART_c67.c,28 :: 		
L_UART1_Read2:
;__Lib_UART_c67.c,29 :: 		
0x013C	0x0871      	MOVF       R1, 0
0x013D	0x00F0      	MOVWF      R0
;__Lib_UART_c67.c,30 :: 		
L_end_UART1_Read:
0x013E	0x0008      	RETURN
; end of _UART1_Read
_VerificarCRC:
;EComunicacionPrueba.c,142 :: 		unsigned short VerificarCRC(unsigned char* trama, unsigned char tramaPDUSize){
;EComunicacionPrueba.c,150 :: 		crcCalculado = 0;                                  //Inicializa los valores del CRC obtenido y calculado con valores diferentes
0x013F	0x1283      	BCF        STATUS, 5
0x0140	0x1303      	BCF        STATUS, 6
0x0141	0x01E7      	CLRF       VerificarCRC_crcCalculado_L0
0x0142	0x01E8      	CLRF       VerificarCRC_crcCalculado_L0+1
;EComunicacionPrueba.c,151 :: 		crcTrama = 1;
0x0143	0x3001      	MOVLW      1
0x0144	0x00E9      	MOVWF      VerificarCRC_crcTrama_L0
0x0145	0x3000      	MOVLW      0
0x0146	0x00EA      	MOVWF      VerificarCRC_crcTrama_L0+1
;EComunicacionPrueba.c,153 :: 		for (j=0;j<tramaPDUSize;j++){                      //Rellena la trama de PDU con los datos de interes de la trama de peticion, es decir, obviando los ultimos 2 bytes de CRC y los 2 de End
0x0147	0x01E6      	CLRF       VerificarCRC_j_L0
L_VerificarCRC18:
0x0148	0x0865      	MOVF       FARG_VerificarCRC_tramaPDUSize, 0
0x0149	0x0266      	SUBWF      VerificarCRC_j_L0, 0
0x014A	0x1803      	BTFSC      STATUS, 0
0x014B	0x2960      	GOTO       L_VerificarCRC19
;EComunicacionPrueba.c,154 :: 		pdu[j] = trama[j+1];
0x014C	0x0866      	MOVF       VerificarCRC_j_L0, 0
0x014D	0x3EA0      	ADDLW      VerificarCRC_pdu_L0
0x014E	0x00F2      	MOVWF      R2
0x014F	0x0866      	MOVF       VerificarCRC_j_L0, 0
0x0150	0x3E01      	ADDLW      1
0x0151	0x00F0      	MOVWF      R0
0x0152	0x01F1      	CLRF       R0+1
0x0153	0x1803      	BTFSC      STATUS, 0
0x0154	0x0AF1      	INCF       R0+1, 1
0x0155	0x0870      	MOVF       R0, 0
0x0156	0x0764      	ADDWF      FARG_VerificarCRC_trama, 0
0x0157	0x0084      	MOVWF      FSR
0x0158	0x0800      	MOVF       INDF, 0
0x0159	0x00F0      	MOVWF      R0
0x015A	0x0872      	MOVF       R2, 0
0x015B	0x0084      	MOVWF      FSR
0x015C	0x0870      	MOVF       R0, 0
0x015D	0x0080      	MOVWF      INDF
;EComunicacionPrueba.c,153 :: 		for (j=0;j<tramaPDUSize;j++){                      //Rellena la trama de PDU con los datos de interes de la trama de peticion, es decir, obviando los ultimos 2 bytes de CRC y los 2 de End
0x015E	0x0AE6      	INCF       VerificarCRC_j_L0, 1
;EComunicacionPrueba.c,155 :: 		}
0x015F	0x2948      	GOTO       L_VerificarCRC18
L_VerificarCRC19:
;EComunicacionPrueba.c,157 :: 		crcCalculado = CalcularCRC(pdu, tramaPDUSize);     //Invoca la funcion para el calculo del CRC de la trama PDU
0x0160	0x30A0      	MOVLW      VerificarCRC_pdu_L0
0x0161	0x00EC      	MOVWF      FARG_CalcularCRC_trama
0x0162	0x0865      	MOVF       FARG_VerificarCRC_tramaPDUSize, 0
0x0163	0x00ED      	MOVWF      FARG_CalcularCRC_tramaSize
0x0164	0x20C3      	CALL       _CalcularCRC
0x0165	0x0870      	MOVF       R0, 0
0x0166	0x00E7      	MOVWF      VerificarCRC_crcCalculado_L0
0x0167	0x0871      	MOVF       R0+1, 0
0x0168	0x00E8      	MOVWF      VerificarCRC_crcCalculado_L0+1
;EComunicacionPrueba.c,159 :: 		ptrCRCTrama = &CRCTrama;                           //Asociacion del puntero CRCPDU
0x0169	0x3069      	MOVLW      VerificarCRC_crcTrama_L0
0x016A	0x00EB      	MOVWF      VerificarCRC_ptrCRCTrama_L0
;EComunicacionPrueba.c,160 :: 		*ptrCRCTrama = trama[tramaPDUSize+2];              //Asigna el elemento CRC_LSB de la trama de respuesta al LSB de la variable CRCPDU
0x016B	0x3002      	MOVLW      2
0x016C	0x0765      	ADDWF      FARG_VerificarCRC_tramaPDUSize, 0
0x016D	0x00F0      	MOVWF      R0
0x016E	0x01F1      	CLRF       R0+1
0x016F	0x1803      	BTFSC      STATUS, 0
0x0170	0x0AF1      	INCF       R0+1, 1
0x0171	0x0870      	MOVF       R0, 0
0x0172	0x0764      	ADDWF      FARG_VerificarCRC_trama, 0
0x0173	0x0084      	MOVWF      FSR
0x0174	0x0800      	MOVF       INDF, 0
0x0175	0x00F0      	MOVWF      R0
0x0176	0x086B      	MOVF       VerificarCRC_ptrCRCTrama_L0, 0
0x0177	0x0084      	MOVWF      FSR
0x0178	0x0870      	MOVF       R0, 0
0x0179	0x0080      	MOVWF      INDF
;EComunicacionPrueba.c,161 :: 		*(ptrCRCTrama+1) = trama[tramaPDUSize+1];          //Asigna el elemento CRC_MSB de la trama de respuesta al MSB de la variable CRCPDU
0x017A	0x0A6B      	INCF       VerificarCRC_ptrCRCTrama_L0, 0
0x017B	0x00F2      	MOVWF      R2
0x017C	0x0865      	MOVF       FARG_VerificarCRC_tramaPDUSize, 0
0x017D	0x3E01      	ADDLW      1
0x017E	0x00F0      	MOVWF      R0
0x017F	0x01F1      	CLRF       R0+1
0x0180	0x1803      	BTFSC      STATUS, 0
0x0181	0x0AF1      	INCF       R0+1, 1
0x0182	0x0870      	MOVF       R0, 0
0x0183	0x0764      	ADDWF      FARG_VerificarCRC_trama, 0
0x0184	0x0084      	MOVWF      FSR
0x0185	0x0800      	MOVF       INDF, 0
0x0186	0x00F0      	MOVWF      R0
0x0187	0x0872      	MOVF       R2, 0
0x0188	0x0084      	MOVWF      FSR
0x0189	0x0870      	MOVF       R0, 0
0x018A	0x0080      	MOVWF      INDF
;EComunicacionPrueba.c,163 :: 		if (crcCalculado==CRCTrama) {                      //Verifica si el CRC calculado sea igual al CRC obtenido de la trama de peticion
0x018B	0x0868      	MOVF       VerificarCRC_crcCalculado_L0+1, 0
0x018C	0x066A      	XORWF      VerificarCRC_crcTrama_L0+1, 0
0x018D	0x1D03      	BTFSS      STATUS, 2
0x018E	0x2991      	GOTO       L__VerificarCRC62
0x018F	0x0869      	MOVF       VerificarCRC_crcTrama_L0, 0
0x0190	0x0667      	XORWF      VerificarCRC_crcCalculado_L0, 0
L__VerificarCRC62:
0x0191	0x1D03      	BTFSS      STATUS, 2
0x0192	0x2996      	GOTO       L_VerificarCRC21
;EComunicacionPrueba.c,164 :: 		return 1;
0x0193	0x3001      	MOVLW      1
0x0194	0x00F0      	MOVWF      R0
0x0195	0x2997      	GOTO       L_end_VerificarCRC
;EComunicacionPrueba.c,165 :: 		} else {
L_VerificarCRC21:
;EComunicacionPrueba.c,166 :: 		return 0;
0x0196	0x01F0      	CLRF       R0
;EComunicacionPrueba.c,168 :: 		}
L_end_VerificarCRC:
0x0197	0x0008      	RETURN
; end of _VerificarCRC
_ConfiguracionPrincipal:
;EComunicacionPrueba.c,67 :: 		void ConfiguracionPrincipal(){
;EComunicacionPrueba.c,69 :: 		TRISB0_bit = 1;
0x0198	0x1683      	BSF        STATUS, 5
0x0199	0x1303      	BCF        STATUS, 6
0x019A	0x1406      	BSF        TRISB0_bit, BitPos(TRISB0_bit+0)
;EComunicacionPrueba.c,70 :: 		TRISB3_bit = 0;
0x019B	0x1186      	BCF        TRISB3_bit, BitPos(TRISB3_bit+0)
;EComunicacionPrueba.c,71 :: 		TRISC2_bit = 0;
0x019C	0x1107      	BCF        TRISC2_bit, BitPos(TRISC2_bit+0)
;EComunicacionPrueba.c,73 :: 		INTCON.GIE = 1;                                    //Habilita las interrupciones globales
0x019D	0x178B      	BSF        INTCON, 7
;EComunicacionPrueba.c,74 :: 		INTCON.PEIE = 1;                                   //Habilita las interrupciones perifericas
0x019E	0x170B      	BSF        INTCON, 6
;EComunicacionPrueba.c,77 :: 		UART1_Init(19200);                                 //Inicializa el UART1 a 19200 bps
0x019F	0x3019      	MOVLW      25
0x01A0	0x0099      	MOVWF      SPBRG
0x01A1	0x1518      	BSF        TXSTA, 2
0x01A2	0x20EF      	CALL       _UART1_Init
;EComunicacionPrueba.c,78 :: 		PIE1.RCIE = 1;
0x01A3	0x1683      	BSF        STATUS, 5
0x01A4	0x168C      	BSF        PIE1, 5
;EComunicacionPrueba.c,81 :: 		SPI1_Init_Advanced(_SPI_MASTER_OSC_DIV64,_SPI_DATA_SAMPLE_MIDDLE,_SPI_CLK_IDLE_HIGH,_SPI_LOW_2_HIGH);
0x01A5	0x3002      	MOVLW      2
0x01A6	0x1283      	BCF        STATUS, 5
0x01A7	0x00E0      	MOVWF      FARG_SPI1_Init_Advanced_master
0x01A8	0x01E1      	CLRF       FARG_SPI1_Init_Advanced_data_sample
0x01A9	0x3010      	MOVLW      16
0x01AA	0x00E2      	MOVWF      FARG_SPI1_Init_Advanced_clock_idle
0x01AB	0x3001      	MOVLW      1
0x01AC	0x00E3      	MOVWF      FARG_SPI1_Init_Advanced_transmit_edge
0x01AD	0x20FF      	CALL       _SPI1_Init_Advanced
;EComunicacionPrueba.c,84 :: 		INTCON.INTE = 1;                                   //Habilita la interrupcion externa
0x01AE	0x160B      	BSF        INTCON, 4
;EComunicacionPrueba.c,85 :: 		INTCON.INTF = 0;                                   //Limpia la bandera de interrupcion externa
0x01AF	0x108B      	BCF        INTCON, 1
;EComunicacionPrueba.c,86 :: 		OPTION_REG.INTEDG = 1;                             //Activa la interrupcion en el flanco de subida
0x01B0	0x1683      	BSF        STATUS, 5
0x01B1	0x1701      	BSF        OPTION_REG, 6
;EComunicacionPrueba.c,88 :: 		Delay_ms(100);                                     //Espera hasta que se estabilicen los cambios
0x01B2	0x3002      	MOVLW      2
0x01B3	0x00FB      	MOVWF      R11
0x01B4	0x3004      	MOVLW      4
0x01B5	0x00FC      	MOVWF      R12
0x01B6	0x30BA      	MOVLW      186
0x01B7	0x00FD      	MOVWF      R13
L_ConfiguracionPrincipal0:
0x01B8	0x0BFD      	DECFSZ     R13, 1
0x01B9	0x29B8      	GOTO       L_ConfiguracionPrincipal0
0x01BA	0x0BFC      	DECFSZ     R12, 1
0x01BB	0x29B8      	GOTO       L_ConfiguracionPrincipal0
0x01BC	0x0BFB      	DECFSZ     R11, 1
0x01BD	0x29B8      	GOTO       L_ConfiguracionPrincipal0
0x01BE	0x0000      	NOP
;EComunicacionPrueba.c,90 :: 		}
L_end_ConfiguracionPrincipal:
0x01BF	0x0008      	RETURN
; end of _ConfiguracionPrincipal
_EnviarACK:
;EComunicacionPrueba.c,174 :: 		void EnviarACK(){
;EComunicacionPrueba.c,175 :: 		UART1_Write(ACK);                                  //Envia el valor de la Cabecera de la trama ACK por el puerto UART1
0x01C0	0x30AA      	MOVLW      170
0x01C1	0x1283      	BCF        STATUS, 5
0x01C2	0x1303      	BCF        STATUS, 6
0x01C3	0x00EC      	MOVWF      FARG_UART1_Write_data_
0x01C4	0x212A      	CALL       _UART1_Write
;EComunicacionPrueba.c,176 :: 		while(UART1_Tx_Idle()==0);                         //Espera hasta que se haya terminado de enviar todo el dato por UART antes de continuar
L_EnviarACK23:
0x01C5	0x20BC      	CALL       _UART1_Tx_Idle
0x01C6	0x0870      	MOVF       R0, 0
0x01C7	0x3A00      	XORLW      0
0x01C8	0x1D03      	BTFSS      STATUS, 2
0x01C9	0x29CB      	GOTO       L_EnviarACK24
0x01CA	0x29C5      	GOTO       L_EnviarACK23
L_EnviarACK24:
;EComunicacionPrueba.c,177 :: 		}
L_end_EnviarACK:
0x01CB	0x0008      	RETURN
; end of _EnviarACK
_EnviarNACK:
;EComunicacionPrueba.c,183 :: 		void EnviarNACK(){
;EComunicacionPrueba.c,184 :: 		UART1_Write(NACK);                                 //Envia el valor de la Cabecera de la trama ACK por el puerto UART1
0x01CC	0x30AF      	MOVLW      175
0x01CD	0x1283      	BCF        STATUS, 5
0x01CE	0x1303      	BCF        STATUS, 6
0x01CF	0x00EC      	MOVWF      FARG_UART1_Write_data_
0x01D0	0x212A      	CALL       _UART1_Write
;EComunicacionPrueba.c,185 :: 		while(UART1_Tx_Idle()==0);                         //Espera hasta que se haya terminado de enviar todo el dato por UART antes de continuar
L_EnviarNACK25:
0x01D1	0x20BC      	CALL       _UART1_Tx_Idle
0x01D2	0x0870      	MOVF       R0, 0
0x01D3	0x3A00      	XORLW      0
0x01D4	0x1D03      	BTFSS      STATUS, 2
0x01D5	0x29D7      	GOTO       L_EnviarNACK26
0x01D6	0x29D1      	GOTO       L_EnviarNACK25
L_EnviarNACK26:
;EComunicacionPrueba.c,186 :: 		}
L_end_EnviarNACK:
0x01D7	0x0008      	RETURN
; end of _EnviarNACK
_main:
;EComunicacionPrueba.c,280 :: 		void main() {
;EComunicacionPrueba.c,282 :: 		ConfiguracionPrincipal();
0x01D8	0x2198      	CALL       _ConfiguracionPrincipal
;EComunicacionPrueba.c,283 :: 		AUX = 0;
0x01D9	0x1283      	BCF        STATUS, 5
0x01DA	0x1186      	BCF        RB3_bit, BitPos(RB3_bit+0)
;EComunicacionPrueba.c,284 :: 		i1=0;
0x01DB	0x01D5      	CLRF       _i1
;EComunicacionPrueba.c,285 :: 		contadorTOD = 0;                                   //Inicia el contador de Time-Out-Dispositivo
0x01DC	0x01DB      	CLRF       _contadorTOD
;EComunicacionPrueba.c,286 :: 		contadorNACK = 0;                                  //Inicia el contador de NACK
0x01DD	0x01DA      	CLRF       _contadorNACK
;EComunicacionPrueba.c,287 :: 		banTI=0;
0x01DE	0x01DD      	CLRF       _banTI
;EComunicacionPrueba.c,288 :: 		banTC=0;
0x01DF	0x01DC      	CLRF       _banTC
;EComunicacionPrueba.c,289 :: 		banTF=0;
0x01E0	0x01D9      	CLRF       _banTF
;EComunicacionPrueba.c,290 :: 		banPet=0;
0x01E1	0x01D7      	CLRF       _banPet
;EComunicacionPrueba.c,292 :: 		}
L_end_main:
0x01E2	0x29E2      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004     [184]    _interrupt
0x00BC       [7]    _UART1_Tx_Idle
0x00C3      [44]    _CalcularCRC
0x00EF      [16]    _UART1_Init
0x00FF      [43]    _SPI1_Init_Advanced
0x012A      [10]    _UART1_Write
0x0134      [11]    _UART1_Read
0x013F      [89]    _VerificarCRC
0x0198      [40]    _ConfiguracionPrincipal
0x01C0      [12]    _EnviarACK
0x01CC      [12]    _EnviarNACK
0x01D8      [11]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0006       [0]    AUX
0x0006       [0]    RB3_bit
0x0007       [0]    RC2_bit
0x0007       [0]    CS
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000C       [1]    PIR1
0x0013       [1]    SSPBUF
0x0014       [1]    SSPCON
0x0018       [1]    RCSTA
0x0019       [1]    TXREG
0x001A       [1]    RCREG
0x0023       [1]    _tramaOk
0x0024      [30]    _tramaRS485
0x0042       [1]    _byteTrama
0x0043       [1]    _t1Size
0x0044      [15]    _petSPI
0x0053       [2]    ___DoICPAddr
0x0055       [1]    _i1
0x0056       [1]    _numBytesSPI
0x0057       [1]    _banPet
0x0058       [1]    _x
0x0059       [1]    _banTF
0x005A       [1]    _contadorNACK
0x005B       [1]    _contadorTOD
0x005C       [1]    _banTC
0x005D       [1]    _banTI
0x005E       [1]    ___saveSTATUS
0x005F       [1]    ___savePCLATH
0x0060       [1]    FARG_SPI1_Init_Advanced_master
0x0061       [1]    FARG_SPI1_Init_Advanced_data_sample
0x0062       [1]    FARG_SPI1_Init_Advanced_clock_idle
0x0063       [1]    FARG_SPI1_Init_Advanced_transmit_edge
0x0064       [1]    FARG_VerificarCRC_trama
0x0065       [1]    FARG_VerificarCRC_tramaPDUSize
0x0066       [1]    VerificarCRC_j_L0
0x0067       [2]    VerificarCRC_crcCalculado_L0
0x0069       [2]    VerificarCRC_crcTrama_L0
0x006B       [1]    VerificarCRC_ptrCRCTrama_L0
0x006C       [1]    FARG_UART1_Write_data_
0x006C       [1]    FARG_CalcularCRC_trama
0x006D       [1]    FARG_CalcularCRC_tramaSize
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [1]    OPTION_REG
0x0086       [0]    TRISB3_bit
0x0086       [0]    TRISB0_bit
0x0087       [0]    TRISC2_bit
0x0087       [0]    TRISC3_bit
0x0087       [0]    TRISC7_bit
0x0087       [0]    TRISC6_bit
0x0087       [0]    TRISC4_bit
0x0087       [0]    TRISC5_bit
0x008C       [1]    PIE1
0x0094       [1]    SSPSTAT
0x0098       [1]    TXSTA
0x0099       [1]    SPBRG
0x00A0      [15]    VerificarCRC_pdu_L0
