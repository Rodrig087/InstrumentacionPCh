;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 06/08/2018 9:33:20
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF001EF13  	GOTO        550
_interrupt:
;Master.c,35 :: 		void interrupt(void){
0x0008	0xF016C000  	MOVFF       R0, 22
0x000C	0xF015C001  	MOVFF       R1, 21
;Master.c,36 :: 		if(PIR1.F5==1){
0x0010	0xF017CFE1  	MOVFF       FSR1L, 23
0x0014	0xF018CFE2  	MOVFF       FSR1H, 24
0x0018	0xAA9E      	BTFSS       PIR1, 5 
0x001A	0xD039      	BRA         L_interrupt0
;Master.c,38 :: 		Dato = UART1_Read();
0x001C	0xD85E      	RCALL       _UART1_Read
0x001E	0xF047C000  	MOVFF       R0, _Dato
;Master.c,40 :: 		if ((Dato==Hdr)&&(ir==0)){                   //Verifica que el primer dato en llegar sea el identificador de inicio de trama
0x0022	0x5000      	MOVF        R0, 0 
0x0024	0x0A3A      	XORLW       58
0x0026	0xE111      	BNZ         L_interrupt3
0x0028	0x5031      	MOVF        _ir, 0 
0x002A	0x0A00      	XORLW       0
0x002C	0xE10E      	BNZ         L_interrupt3
L__interrupt33:
;Master.c,41 :: 		BanT = 1;                                 //Activa una bandera de trama
0x002E	0x0E01      	MOVLW       1
0x0030	0x6E32      	MOVWF       _BanT 
;Master.c,42 :: 		Rspt[ir] = Dato;                          //Almacena el Dato en la trama de respuesta
0x0032	0x0E33      	MOVLW       _Rspt
0x0034	0x6EE1      	MOVWF       FSR1L 
0x0036	0x0E00      	MOVLW       hi_addr(_Rspt)
0x0038	0x6EE2      	MOVWF       FSR1H 
0x003A	0x5031      	MOVF        _ir, 0 
0x003C	0x26E1      	ADDWF       FSR1L, 1 
0x003E	0x0E00      	MOVLW       0
0x0040	0xBE31      	BTFSC       _ir, 7 
0x0042	0x0EFF      	MOVLW       255
0x0044	0x22E2      	ADDWFC      FSR1H, 1 
0x0046	0xFFE6C047  	MOVFF       _Dato, POSTINC1
;Master.c,43 :: 		}
L_interrupt3:
;Master.c,44 :: 		if ((Dato!=Hdr)&&(ir==0)){                   //Verifica si el primer dato en llegar es diferente al identificador del inicio de trama
0x004A	0x5047      	MOVF        _Dato, 0 
0x004C	0x0A3A      	XORLW       58
0x004E	0xE005      	BZ          L_interrupt6
0x0050	0x5031      	MOVF        _ir, 0 
0x0052	0x0A00      	XORLW       0
0x0054	0xE102      	BNZ         L_interrupt6
L__interrupt32:
;Master.c,45 :: 		ir=-1;                                    //Si es asi, reduce el subindice en una unidad
0x0056	0x0EFF      	MOVLW       255
0x0058	0x6E31      	MOVWF       _ir 
;Master.c,46 :: 		}
L_interrupt6:
;Master.c,47 :: 		if ((BanT==1)&&(ir!=0)){
0x005A	0x5032      	MOVF        _BanT, 0 
0x005C	0x0A01      	XORLW       1
0x005E	0xE10F      	BNZ         L_interrupt9
0x0060	0x5031      	MOVF        _ir, 0 
0x0062	0x0A00      	XORLW       0
0x0064	0xE00C      	BZ          L_interrupt9
L__interrupt31:
;Master.c,48 :: 		Rspt[ir] = Dato;                          //Almacena el resto de datos en la trama de respuesta si la bandera de trama esta activada
0x0066	0x0E33      	MOVLW       _Rspt
0x0068	0x6EE1      	MOVWF       FSR1L 
0x006A	0x0E00      	MOVLW       hi_addr(_Rspt)
0x006C	0x6EE2      	MOVWF       FSR1H 
0x006E	0x5031      	MOVF        _ir, 0 
0x0070	0x26E1      	ADDWF       FSR1L, 1 
0x0072	0x0E00      	MOVLW       0
0x0074	0xBE31      	BTFSC       _ir, 7 
0x0076	0x0EFF      	MOVLW       255
0x0078	0x22E2      	ADDWFC      FSR1H, 1 
0x007A	0xFFE6C047  	MOVFF       _Dato, POSTINC1
;Master.c,49 :: 		}
L_interrupt9:
;Master.c,51 :: 		ir++;                                        //Aumenta el subindice una unidad
0x007E	0x2A31      	INCF        _ir, 1 
;Master.c,52 :: 		if (ir==Rsize){                              //Verifica que se haya terminado de llenar la trama de datos
0x0080	0x5031      	MOVF        _ir, 0 
0x0082	0x0A09      	XORLW       9
0x0084	0xE103      	BNZ         L_interrupt10
;Master.c,53 :: 		BanP = 1;                                 //Habilita la bandera de lectura de datos
0x0086	0x0E01      	MOVLW       1
0x0088	0x6E3C      	MOVWF       _BanP 
;Master.c,54 :: 		ir=0;                                     //Limpia el subindice de la trama de peticion para permitir una nueva secuencia de recepcion de datos
0x008A	0x6A31      	CLRF        _ir 
;Master.c,55 :: 		}
L_interrupt10:
;Master.c,57 :: 		PIR1.F5 = 0;                                 //Limpia la bandera de interrupcion
0x008C	0x9A9E      	BCF         PIR1, 5 
;Master.c,58 :: 		}
L_interrupt0:
;Master.c,59 :: 		}
L_end_interrupt:
L__interrupt35:
0x008E	0xF000C016  	MOVFF       22, R0
0x0092	0xF001C015  	MOVFF       21, R1
0x0096	0xFFE1C017  	MOVFF       23, FSR1L
0x009A	0xFFE2C018  	MOVFF       24, FSR1H
0x009E	0x0011      	RETFIE      1
; end of _interrupt
_UART2_Read:
;__Lib_UART_c67b67.c,141 :: 		
;__Lib_UART_c67b67.c,144 :: 		
0x00A0	0xF001CF74  	MOVFF       RCREG2, R1
;__Lib_UART_c67b67.c,145 :: 		
0x00A4	0xA271      	BTFSS       RCSTA2, 1 
0x00A6	0xD002      	BRA         L_UART2_Read18
;__Lib_UART_c67b67.c,146 :: 		
0x00A8	0x9871      	BCF         RCSTA2, 4 
;__Lib_UART_c67b67.c,147 :: 		
0x00AA	0x8871      	BSF         RCSTA2, 4 
;__Lib_UART_c67b67.c,148 :: 		
L_UART2_Read18:
;__Lib_UART_c67b67.c,149 :: 		
0x00AC	0xF000C001  	MOVFF       R1, R0
;__Lib_UART_c67b67.c,150 :: 		
L_end_UART2_Read:
0x00B0	0x0012      	RETURN      0
; end of _UART2_Read
_UART1_Tx_Idle:
;__Lib_UART_c67b67.c,57 :: 		
;__Lib_UART_c67b67.c,58 :: 		
0x00B2	0x0E00      	MOVLW       0
0x00B4	0xB2AC      	BTFSC       TXSTA, 1 
0x00B6	0x0E01      	MOVLW       1
0x00B8	0x6E00      	MOVWF       R0 
;__Lib_UART_c67b67.c,59 :: 		
L_end_UART1_Tx_Idle:
0x00BA	0x0012      	RETURN      0
; end of _UART1_Tx_Idle
_UART1_Data_Ready:
;__Lib_UART_c67b67.c,39 :: 		
;__Lib_UART_c67b67.c,40 :: 		
0x00BC	0x0E00      	MOVLW       0
0x00BE	0xBA9E      	BTFSC       PIR1, 5 
0x00C0	0x0E01      	MOVLW       1
0x00C2	0x6E00      	MOVWF       R0 
;__Lib_UART_c67b67.c,41 :: 		
L_end_UART1_Data_Ready:
0x00C4	0x0012      	RETURN      0
; end of _UART1_Data_Ready
_UART2_Data_Ready:
;__Lib_UART_c67b67.c,136 :: 		
;__Lib_UART_c67b67.c,137 :: 		
0x00C6	0x0E00      	MOVLW       0
0x00C8	0xBAA4      	BTFSC       RC2IF_bit, BitPos(RC2IF_bit+0) 
0x00CA	0x0E01      	MOVLW       1
0x00CC	0x6E00      	MOVWF       R0 
;__Lib_UART_c67b67.c,138 :: 		
L_end_UART2_Data_Ready:
0x00CE	0x0012      	RETURN      0
; end of _UART2_Data_Ready
_UART2_Tx_Idle:
;__Lib_UART_c67b67.c,154 :: 		
;__Lib_UART_c67b67.c,155 :: 		
0x00D0	0x0E00      	MOVLW       0
0x00D2	0xB272      	BTFSC       TXSTA2, 1 
0x00D4	0x0E01      	MOVLW       1
0x00D6	0x6E00      	MOVWF       R0 
;__Lib_UART_c67b67.c,156 :: 		
L_end_UART2_Tx_Idle:
0x00D8	0x0012      	RETURN      0
; end of _UART2_Tx_Idle
_UART1_Read:
;__Lib_UART_c67b67.c,44 :: 		
;__Lib_UART_c67b67.c,47 :: 		
0x00DA	0xF001CFAE  	MOVFF       RCREG, R1
;__Lib_UART_c67b67.c,48 :: 		
0x00DE	0xA2AB      	BTFSS       RCSTA, 1 
0x00E0	0xD002      	BRA         L_UART1_Read2
;__Lib_UART_c67b67.c,49 :: 		
0x00E2	0x98AB      	BCF         RCSTA, 4 
;__Lib_UART_c67b67.c,50 :: 		
0x00E4	0x88AB      	BSF         RCSTA, 4 
;__Lib_UART_c67b67.c,51 :: 		
L_UART1_Read2:
;__Lib_UART_c67b67.c,52 :: 		
0x00E6	0xF000C001  	MOVFF       R1, R0
;__Lib_UART_c67b67.c,53 :: 		
L_end_UART1_Read:
0x00EA	0x0012      	RETURN      0
; end of _UART1_Read
_____DoIFC:
;__Lib_System.c,93 :: 		
;__Lib_System.c,94 :: 		
0x00EC	0x50F2      	MOVF        INTCON, 0, 0
;__Lib_System.c,95 :: 		
0x00EE	0x6E02      	MOVWF       R2, 0
;__Lib_System.c,96 :: 		
0x00F0	0x9EF2      	BCF         INTCON, 7 
;__Lib_System.c,97 :: 		
0x00F2	0x0005      	PUSH
;__Lib_System.c,98 :: 		
0x00F4	0x6AFF      	CLRF        TOSU, 0
;__Lib_System.c,99 :: 		
0x00F6	0x5001      	MOVF        R1, 0, 0
;__Lib_System.c,100 :: 		
0x00F8	0x6EFE      	MOVWF       TOSH, 0
;__Lib_System.c,101 :: 		
0x00FA	0x5000      	MOVF        R0, 0, 0
;__Lib_System.c,102 :: 		
0x00FC	0x6EFD      	MOVWF       TOSL, 0
;__Lib_System.c,103 :: 		
0x00FE	0xBE02      	BTFSC       R2, 7, 0
;__Lib_System.c,104 :: 		
0x0100	0x8EF2      	BSF         INTCON, 7, 0
;__Lib_System.c,105 :: 		
;__Lib_System.c,107 :: 		
L_end_____DoIFC:
0x0102	0x0012      	RETURN      0
; end of _____DoIFC
_UART1_Init:
;__Lib_UART_c67b67.c,20 :: 		
;__Lib_UART_c67b67.c,23 :: 		
0x0104	0x0E9A      	MOVLW       _UART1_Write
0x0106	0x6E2D      	MOVWF       _UART_Wr_Ptr 
0x0108	0x0E01      	MOVLW       hi_addr(_UART1_Write)
0x010A	0x6E2E      	MOVWF       _UART_Wr_Ptr+1 
0x010C	0x0E48      	MOVLW       FARG_UART1_Write_data_
0x010E	0x6E2F      	MOVWF       _UART_Wr_Ptr+2 
0x0110	0x0E00      	MOVLW       hi_addr(FARG_UART1_Write_data_)
0x0112	0x6E30      	MOVWF       _UART_Wr_Ptr+3 
;__Lib_UART_c67b67.c,24 :: 		
0x0114	0x0EDA      	MOVLW       _UART1_Read
0x0116	0x6E25      	MOVWF       _UART_Rd_Ptr 
0x0118	0x0E00      	MOVLW       hi_addr(_UART1_Read)
0x011A	0x6E26      	MOVWF       _UART_Rd_Ptr+1 
0x011C	0x0E00      	MOVLW       0
0x011E	0x6E27      	MOVWF       _UART_Rd_Ptr+2 
0x0120	0x0E00      	MOVLW       0
0x0122	0x6E28      	MOVWF       _UART_Rd_Ptr+3 
;__Lib_UART_c67b67.c,25 :: 		
0x0124	0x0EBC      	MOVLW       _UART1_Data_Ready
0x0126	0x6E29      	MOVWF       _UART_Rdy_Ptr 
0x0128	0x0E00      	MOVLW       hi_addr(_UART1_Data_Ready)
0x012A	0x6E2A      	MOVWF       _UART_Rdy_Ptr+1 
0x012C	0x0E00      	MOVLW       0
0x012E	0x6E2B      	MOVWF       _UART_Rdy_Ptr+2 
0x0130	0x0E00      	MOVLW       0
0x0132	0x6E2C      	MOVWF       _UART_Rdy_Ptr+3 
;__Lib_UART_c67b67.c,26 :: 		
0x0134	0x0EB2      	MOVLW       _UART1_Tx_Idle
0x0136	0x6E19      	MOVWF       _UART_Tx_Idle_Ptr 
0x0138	0x0E00      	MOVLW       hi_addr(_UART1_Tx_Idle)
0x013A	0x6E1A      	MOVWF       _UART_Tx_Idle_Ptr+1 
0x013C	0x0E00      	MOVLW       0
0x013E	0x6E1B      	MOVWF       _UART_Tx_Idle_Ptr+2 
0x0140	0x0E00      	MOVLW       0
0x0142	0x6E1C      	MOVWF       _UART_Tx_Idle_Ptr+3 
;__Lib_UART_c67b67.c,28 :: 		
0x0144	0x8AAC      	BSF         TXSTA, 5 
;__Lib_UART_c67b67.c,29 :: 		
0x0146	0x0E90      	MOVLW       144
0x0148	0x6EAB      	MOVWF       RCSTA 
;__Lib_UART_c67b67.c,30 :: 		
0x014A	0x8E94      	BSF         TRISC7_bit, BitPos(TRISC7_bit+0) 
;__Lib_UART_c67b67.c,31 :: 		
0x014C	0x9C94      	BCF         TRISC6_bit, BitPos(TRISC6_bit+0) 
;__Lib_UART_c67b67.c,33 :: 		
L_UART1_Init0:
0x014E	0xAA9E      	BTFSS       PIR1, 5 
0x0150	0xD003      	BRA         L_UART1_Init1
;__Lib_UART_c67b67.c,34 :: 		
0x0152	0xF000CFAE  	MOVFF       RCREG, R0
0x0156	0xD7FB      	BRA         L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c67b67.c,35 :: 		
L_end_UART1_Init:
0x0158	0x0012      	RETURN      0
; end of _UART1_Init
_Configuracion:
;Master.c,81 :: 		void Configuracion(){
;Master.c,83 :: 		ANSELA = 0;                                       //Configura el PORTA como digital
0x015A	0x010F      	MOVLB       15
0x015C	0x6B38      	CLRF        ANSELA, 1
;Master.c,84 :: 		ANSELB = 0;                                       //Configura el PORTB como digital
0x015E	0x6B39      	CLRF        ANSELB, 1
;Master.c,85 :: 		ANSELC = 0;                                       //Configura el PORTC como digital
0x0160	0x6B3A      	CLRF        ANSELC, 1
;Master.c,87 :: 		TRISC5_bit = 0;                                   //Configura el pin C5 como salida
0x0162	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;Master.c,88 :: 		TRISA0_bit = 1;
0x0164	0x8092      	BSF         TRISA0_bit, BitPos(TRISA0_bit+0) 
;Master.c,89 :: 		TRISA1_bit = 0;
0x0166	0x9292      	BCF         TRISA1_bit, BitPos(TRISA1_bit+0) 
;Master.c,91 :: 		INTCON.GIE = 1;                                   //Habilita las interrupciones globales
0x0168	0x8EF2      	BSF         INTCON, 7 
;Master.c,92 :: 		INTCON.PEIE = 1;                                  //Habilita las interrupciones perifericas
0x016A	0x8CF2      	BSF         INTCON, 6 
;Master.c,93 :: 		INTCON.RBIF = 0;
0x016C	0x90F2      	BCF         INTCON, 0 
;Master.c,95 :: 		PIE1.RC1IE = 1;                                   //Habilita la interrupcion en UART1 receive
0x016E	0x8A9D      	BSF         PIE1, 5 
;Master.c,96 :: 		PIR1.F5 = 0;                                      //Limpia la bandera de interrupcion
0x0170	0x9A9E      	BCF         PIR1, 5 
;Master.c,98 :: 		UART1_Init(57600);                                 //Inicializa el UART a 9600 bps
0x0172	0x86B8      	BSF         BAUDCON, 3, 0
0x0174	0x6AB0      	CLRF        SPBRGH 
0x0176	0x0E22      	MOVLW       34
0x0178	0x6EAF      	MOVWF       SPBRG 
0x017A	0x84AC      	BSF         TXSTA, 2, 0
0x017C	0xDFC3      	RCALL       _UART1_Init
;Master.c,99 :: 		Delay_ms(100);                                    //Espera para que el modulo UART se estabilice
0x017E	0x0E02      	MOVLW       2
0x0180	0x6E0B      	MOVWF       R11, 0
0x0182	0x0E04      	MOVLW       4
0x0184	0x6E0C      	MOVWF       R12, 0
0x0186	0x0EBA      	MOVLW       186
0x0188	0x6E0D      	MOVWF       R13, 0
L_Configuracion19:
0x018A	0x2E0D      	DECFSZ      R13, 1, 0
0x018C	0xD7FE      	BRA         L_Configuracion19
0x018E	0x2E0C      	DECFSZ      R12, 1, 0
0x0190	0xD7FC      	BRA         L_Configuracion19
0x0192	0x2E0B      	DECFSZ      R11, 1, 0
0x0194	0xD7FA      	BRA         L_Configuracion19
0x0196	0x0000      	NOP
;Master.c,101 :: 		}
L_end_Configuracion:
0x0198	0x0012      	RETURN      0
; end of _Configuracion
_UART1_Write:
;__Lib_UART_c67b67.c,63 :: 		
;__Lib_UART_c67b67.c,64 :: 		
L_UART1_Write3:
0x019A	0xB2AC      	BTFSC       TXSTA, 1 
0x019C	0xD002      	BRA         L_UART1_Write4
;__Lib_UART_c67b67.c,65 :: 		
0x019E	0x0000      	NOP
0x01A0	0xD7FC      	BRA         L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67b67.c,66 :: 		
0x01A2	0xFFADC048  	MOVFF       FARG_UART1_Write_data_, TXREG
;__Lib_UART_c67b67.c,67 :: 		
L_end_UART1_Write:
0x01A6	0x0012      	RETURN      0
; end of _UART1_Write
_ModbusRTU_CRC16:
;Master.c,62 :: 		unsigned int ModbusRTU_CRC16(unsigned char* ptucBuffer, unsigned int uiLen)
;Master.c,66 :: 		for(uiCRCResult=0xFFFF; uiLen!=0; uiLen --)
0x01A8	0x0EFF      	MOVLW       255
0x01AA	0x6E03      	MOVWF       R3 
0x01AC	0x0EFF      	MOVLW       255
0x01AE	0x6E04      	MOVWF       R4 
L_ModbusRTU_CRC1611:
0x01B0	0x0E00      	MOVLW       0
0x01B2	0x184B      	XORWF       FARG_ModbusRTU_CRC16_uiLen+1, 0 
0x01B4	0xE102      	BNZ         L__ModbusRTU_CRC1637
0x01B6	0x0E00      	MOVLW       0
0x01B8	0x184A      	XORWF       FARG_ModbusRTU_CRC16_uiLen, 0 
L__ModbusRTU_CRC1637:
0x01BA	0xE022      	BZ          L_ModbusRTU_CRC1612
;Master.c,68 :: 		uiCRCResult ^=*ptucBuffer ++;
0x01BC	0xFFD9C048  	MOVFF       FARG_ModbusRTU_CRC16_ptucBuffer, FSR2L
0x01C0	0xFFDAC049  	MOVFF       FARG_ModbusRTU_CRC16_ptucBuffer+1, FSR2H
0x01C4	0x50DE      	MOVF        POSTINC2, 0 
0x01C6	0x1A03      	XORWF       R3, 1 
0x01C8	0x0E00      	MOVLW       0
0x01CA	0x1A04      	XORWF       R4, 1 
0x01CC	0x4A48      	INFSNZ      FARG_ModbusRTU_CRC16_ptucBuffer, 1 
0x01CE	0x2A49      	INCF        FARG_ModbusRTU_CRC16_ptucBuffer+1, 1 
;Master.c,69 :: 		for(ucCounter =0; ucCounter <8; ucCounter ++)
0x01D0	0x6A02      	CLRF        R2 
L_ModbusRTU_CRC1614:
0x01D2	0x0E08      	MOVLW       8
0x01D4	0x5C02      	SUBWF       R2, 0 
0x01D6	0xE20F      	BC          L_ModbusRTU_CRC1615
;Master.c,71 :: 		if(uiCRCResult & 0x0001)
0x01D8	0xA003      	BTFSS       R3, 0 
0x01DA	0xD008      	BRA         L_ModbusRTU_CRC1617
;Master.c,72 :: 		uiCRCResult =( uiCRCResult >>1)^PolModbus;
0x01DC	0x3204      	RRCF        R4, 1 
0x01DE	0x3203      	RRCF        R3, 1 
0x01E0	0x9E04      	BCF         R4, 7 
0x01E2	0x0E01      	MOVLW       1
0x01E4	0x1A03      	XORWF       R3, 1 
0x01E6	0x0EA0      	MOVLW       160
0x01E8	0x1A04      	XORWF       R4, 1 
0x01EA	0xD003      	BRA         L_ModbusRTU_CRC1618
L_ModbusRTU_CRC1617:
;Master.c,74 :: 		uiCRCResult >>=1;
0x01EC	0x3204      	RRCF        R4, 1 
0x01EE	0x3203      	RRCF        R3, 1 
0x01F0	0x9E04      	BCF         R4, 7 
L_ModbusRTU_CRC1618:
;Master.c,69 :: 		for(ucCounter =0; ucCounter <8; ucCounter ++)
0x01F2	0x2A02      	INCF        R2, 1 
;Master.c,75 :: 		}
0x01F4	0xD7EE      	BRA         L_ModbusRTU_CRC1614
L_ModbusRTU_CRC1615:
;Master.c,66 :: 		for(uiCRCResult=0xFFFF; uiLen!=0; uiLen --)
0x01F6	0x0E01      	MOVLW       1
0x01F8	0x5E4A      	SUBWF       FARG_ModbusRTU_CRC16_uiLen, 1 
0x01FA	0x0E00      	MOVLW       0
0x01FC	0x5A4B      	SUBWFB      FARG_ModbusRTU_CRC16_uiLen+1, 1 
;Master.c,76 :: 		}
0x01FE	0xD7D8      	BRA         L_ModbusRTU_CRC1611
L_ModbusRTU_CRC1612:
;Master.c,77 :: 		return uiCRCResult;
0x0200	0xF000C003  	MOVFF       R3, R0
0x0204	0xF001C004  	MOVFF       R4, R1
;Master.c,78 :: 		}
L_end_ModbusRTU_CRC16:
0x0208	0x0012      	RETURN      0
; end of _ModbusRTU_CRC16
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x020A	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x020C	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0210	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0212	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0214	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0216	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x0218	0x0012      	RETURN      0
; end of ___CC2DW
_UART_Tx_Idle:
;__Lib_UART_c67b67.c,277 :: 		
;__Lib_UART_c67b67.c,278 :: 		
0x021A	0xF000C019  	MOVFF       _UART_Tx_Idle_Ptr, R0
0x021E	0xF001C01A  	MOVFF       _UART_Tx_Idle_Ptr+1, R1
0x0222	0xDF64      	RCALL       _____DoIFC
;__Lib_UART_c67b67.c,279 :: 		
L_end_UART_Tx_Idle:
0x0224	0x0012      	RETURN      0
; end of _UART_Tx_Idle
_main:
;Master.c,103 :: 		void main() {
;Master.c,105 :: 		Configuracion();
0x0226	0xDF99      	RCALL       _Configuracion
;Master.c,106 :: 		RC5_bit = 0;                                                   //Establece el Max485 en modo de lectura;
0x0228	0x9A82      	BCF         RC5_bit, BitPos(RC5_bit+0) 
;Master.c,108 :: 		ptrCRC16 = &CRC16;                                             //Asociacion del puntero CRC16
0x022A	0x0E23      	MOVLW       _CRC16
0x022C	0x6E1D      	MOVWF       _ptrCRC16 
0x022E	0x0E00      	MOVLW       hi_addr(_CRC16)
0x0230	0x6E1E      	MOVWF       _ptrCRC16+1 
;Master.c,111 :: 		PDU[0]=Add;
0x0232	0x0E01      	MOVLW       1
0x0234	0x6E1F      	MOVWF       _PDU 
;Master.c,112 :: 		PDU[1]=Fcn;
0x0236	0x0E02      	MOVLW       2
0x0238	0x6E20      	MOVWF       _PDU+1 
;Master.c,113 :: 		PDU[2]=0x03;
0x023A	0x0E03      	MOVLW       3
0x023C	0x6E21      	MOVWF       _PDU+2 
;Master.c,114 :: 		PDU[3]=0x04;
0x023E	0x0E04      	MOVLW       4
0x0240	0x6E22      	MOVWF       _PDU+3 
;Master.c,120 :: 		Ptcn[0]=Hdr;
0x0242	0x0E3A      	MOVLW       58
0x0244	0x6E3E      	MOVWF       _Ptcn 
;Master.c,121 :: 		Ptcn[Psize-2]=End1;
0x0246	0x0E0D      	MOVLW       13
0x0248	0x6E45      	MOVWF       _Ptcn+7 
;Master.c,122 :: 		Ptcn[Psize-1]=End2;
0x024A	0x0E0A      	MOVLW       10
0x024C	0x6E46      	MOVWF       _Ptcn+8 
;Master.c,125 :: 		while (1){
L_main20:
;Master.c,127 :: 		CRC16 = ModbusRTU_CRC16(PDU, PDUSize);               //Calcula el CRC de la trama de peticion y la almacena en la variable CRC16
0x024E	0x0E1F      	MOVLW       _PDU
0x0250	0x6E48      	MOVWF       FARG_ModbusRTU_CRC16_ptucBuffer 
0x0252	0x0E00      	MOVLW       hi_addr(_PDU)
0x0254	0x6E49      	MOVWF       FARG_ModbusRTU_CRC16_ptucBuffer+1 
0x0256	0x0E04      	MOVLW       4
0x0258	0x6E4A      	MOVWF       FARG_ModbusRTU_CRC16_uiLen 
0x025A	0x0E00      	MOVLW       0
0x025C	0x6E4B      	MOVWF       FARG_ModbusRTU_CRC16_uiLen+1 
0x025E	0xDFA4      	RCALL       _ModbusRTU_CRC16
0x0260	0xF023C000  	MOVFF       R0, _CRC16
0x0264	0xF024C001  	MOVFF       R1, _CRC16+1
;Master.c,128 :: 		Ptcn[6] = *ptrCRC16;                                 //Asigna el MSB de CRC al espacio 6 de la trama de peticion
0x0268	0xFFE9C01D  	MOVFF       _ptrCRC16, FSR0L
0x026C	0xFFEAC01E  	MOVFF       _ptrCRC16+1, FSR0H
0x0270	0xF044CFEE  	MOVFF       POSTINC0, _Ptcn+6
;Master.c,129 :: 		Ptcn[5] = *(ptrCRC16+1);                             //Asigna el LSB del CRC al espacio 5 de la trama de peticion
0x0274	0x0E01      	MOVLW       1
0x0276	0x241D      	ADDWF       _ptrCRC16, 0 
0x0278	0x6EE9      	MOVWF       FSR0L 
0x027A	0x0E00      	MOVLW       0
0x027C	0x201E      	ADDWFC      _ptrCRC16+1, 0 
0x027E	0x6EEA      	MOVWF       FSR0H 
0x0280	0xF043CFEE  	MOVFF       POSTINC0, _Ptcn+5
;Master.c,131 :: 		for (ip=1;ip<=4;ip++){                               //Rellena la trama de peticion con los datos de la trama PDU
0x0284	0x0E01      	MOVLW       1
0x0286	0x6E3D      	MOVWF       _ip 
L_main22:
0x0288	0x0E80      	MOVLW       128
0x028A	0x0A04      	XORLW       4
0x028C	0x6E00      	MOVWF       R0 
0x028E	0x0E80      	MOVLW       128
0x0290	0x183D      	XORWF       _ip, 0 
0x0292	0x5C00      	SUBWF       R0, 0 
0x0294	0xE31C      	BNC         L_main23
;Master.c,132 :: 		Ptcn[ip] = PDU[ip-1];
0x0296	0x0E3E      	MOVLW       _Ptcn
0x0298	0x6EE1      	MOVWF       FSR1L 
0x029A	0x0E00      	MOVLW       hi_addr(_Ptcn)
0x029C	0x6EE2      	MOVWF       FSR1H 
0x029E	0x503D      	MOVF        _ip, 0 
0x02A0	0x26E1      	ADDWF       FSR1L, 1 
0x02A2	0x0E00      	MOVLW       0
0x02A4	0xBE3D      	BTFSC       _ip, 7 
0x02A6	0x0EFF      	MOVLW       255
0x02A8	0x22E2      	ADDWFC      FSR1H, 1 
0x02AA	0x043D      	DECF        _ip, 0 
0x02AC	0x6E00      	MOVWF       R0 
0x02AE	0x0E00      	MOVLW       0
0x02B0	0xBE3D      	BTFSC       _ip, 7 
0x02B2	0x0EFF      	MOVLW       255
0x02B4	0x6E01      	MOVWF       R1 
0x02B6	0x0E00      	MOVLW       0
0x02B8	0x5A01      	SUBWFB      R1, 1 
0x02BA	0x0E1F      	MOVLW       _PDU
0x02BC	0x2400      	ADDWF       R0, 0 
0x02BE	0x6EE9      	MOVWF       FSR0L 
0x02C0	0x0E00      	MOVLW       hi_addr(_PDU)
0x02C2	0x2001      	ADDWFC      R1, 0 
0x02C4	0x6EEA      	MOVWF       FSR0H 
0x02C6	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;Master.c,131 :: 		for (ip=1;ip<=4;ip++){                               //Rellena la trama de peticion con los datos de la trama PDU
0x02CA	0x2A3D      	INCF        _ip, 1 
;Master.c,133 :: 		}
0x02CC	0xD7DD      	BRA         L_main22
L_main23:
;Master.c,135 :: 		for (ip=0;ip<Psize;ip++){
0x02CE	0x6A3D      	CLRF        _ip 
L_main25:
0x02D0	0x0E80      	MOVLW       128
0x02D2	0x183D      	XORWF       _ip, 0 
0x02D4	0x6E00      	MOVWF       R0 
0x02D6	0x0E80      	MOVLW       128
0x02D8	0x0A09      	XORLW       9
0x02DA	0x5C00      	SUBWF       R0, 0 
0x02DC	0xE20F      	BC          L_main26
;Master.c,136 :: 		UART1_WRITE(Ptcn[ip]);                           //Manda por Uart la trama de peticion
0x02DE	0x0E3E      	MOVLW       _Ptcn
0x02E0	0x6EE9      	MOVWF       FSR0L 
0x02E2	0x0E00      	MOVLW       hi_addr(_Ptcn)
0x02E4	0x6EEA      	MOVWF       FSR0H 
0x02E6	0x503D      	MOVF        _ip, 0 
0x02E8	0x26E9      	ADDWF       FSR0L, 1 
0x02EA	0x0E00      	MOVLW       0
0x02EC	0xBE3D      	BTFSC       _ip, 7 
0x02EE	0x0EFF      	MOVLW       255
0x02F0	0x22EA      	ADDWFC      FSR0H, 1 
0x02F2	0xF048CFEE  	MOVFF       POSTINC0, FARG_UART1_Write_data_
0x02F6	0xDF51      	RCALL       _UART1_Write
;Master.c,135 :: 		for (ip=0;ip<Psize;ip++){
0x02F8	0x2A3D      	INCF        _ip, 1 
;Master.c,137 :: 		}
0x02FA	0xD7EA      	BRA         L_main25
L_main26:
;Master.c,138 :: 		while(UART_Tx_Idle()==0);                            //Espera hasta que se haya terminado de enviar todo el dato por UART antes de continuar
L_main28:
0x02FC	0xDF8E      	RCALL       _UART_Tx_Idle
0x02FE	0x5000      	MOVF        R0, 0 
0x0300	0x0A00      	XORLW       0
0x0302	0xE101      	BNZ         L_main29
0x0304	0xD7FB      	BRA         L_main28
L_main29:
;Master.c,140 :: 		Delay_ms(20);
0x0306	0x0E34      	MOVLW       52
0x0308	0x6E0C      	MOVWF       R12, 0
0x030A	0x0EF1      	MOVLW       241
0x030C	0x6E0D      	MOVWF       R13, 0
L_main30:
0x030E	0x2E0D      	DECFSZ      R13, 1, 0
0x0310	0xD7FE      	BRA         L_main30
0x0312	0x2E0C      	DECFSZ      R12, 1, 0
0x0314	0xD7FC      	BRA         L_main30
0x0316	0x0000      	NOP
0x0318	0x0000      	NOP
;Master.c,142 :: 		}
0x031A	0xD799      	BRA         L_main20
;Master.c,143 :: 		}
L_end_main:
0x031C	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [152]    _interrupt
0x00A0      [18]    _UART2_Read
0x00B2      [10]    _UART1_Tx_Idle
0x00BC      [10]    _UART1_Data_Ready
0x00C6      [10]    _UART2_Data_Ready
0x00D0      [10]    _UART2_Tx_Idle
0x00DA      [18]    _UART1_Read
0x00EC      [24]    _____DoIFC
0x0104      [86]    _UART1_Init
0x015A      [64]    _Configuracion
0x019A      [14]    _UART1_Write
0x01A8      [98]    _ModbusRTU_CRC16
0x020A      [16]    ___CC2DW
0x021A      [12]    _UART_Tx_Idle
0x0226     [248]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    UART2_Init_tmp_L0
0x0000       [1]    R0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    R1
0x0001       [1]    UART2_Read___tmp_UART2_Read_L0
0x0002       [2]    memset_pp_L0
0x0002       [1]    ModbusRTU_CRC16_ucCounter_L0
0x0002       [1]    R2
0x0002       [2]    strlen_cp_L0
0x0002       [2]    memchr_s_L0
0x0002       [2]    memcpy_dd_L0
0x0003       [2]    Ltrim_original_L0
0x0003       [2]    memmove_tt_L0
0x0003       [2]    ModbusRTU_CRC16_uiCRCResult_L0
0x0003       [1]    R3
0x0004       [2]    strcat_cp_L0
0x0004       [2]    strncat_cp_L0
0x0004       [2]    strncpy_cp_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [2]    memcpy_ss_L0
0x0004       [1]    R4
0x0005       [2]    LongIntToHex_input_half_L0
0x0005       [2]    Ltrim_p_L0
0x0005       [2]    LongWordToHex_input_half_L0
0x0005       [2]    memmove_ff_L0
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0019       [4]    _UART_Tx_Idle_Ptr
0x001D       [2]    _ptrCRC16
0x001F       [4]    _PDU
0x0023       [2]    _CRC16
0x0025       [4]    _UART_Rd_Ptr
0x0029       [4]    _UART_Rdy_Ptr
0x002D       [4]    _UART_Wr_Ptr
0x0031       [1]    _ir
0x0032       [1]    _BanT
0x0033       [9]    _Rspt
0x003C       [1]    _BanP
0x003D       [1]    _ip
0x003E       [9]    _Ptcn
0x0047       [1]    _Dato
0x0048       [2]    FARG_ModbusRTU_CRC16_ptucBuffer
0x0048       [1]    FARG_UART1_Write_data_
0x004A       [2]    FARG_ModbusRTU_CRC16_uiLen
0x0F38       [1]    ANSELA
0x0F39       [1]    ANSELB
0x0F3A       [1]    ANSELC
0x0F71       [1]    RCSTA2
0x0F72       [1]    TXSTA2
0x0F74       [1]    RCREG2
0x0F82       [0]    RC5_bit
0x0F92       [0]    TRISA1_bit
0x0F92       [0]    TRISA0_bit
0x0F94       [0]    TRISC6_bit
0x0F94       [0]    TRISC7_bit
0x0F94       [0]    TRISC5_bit
0x0F9D       [1]    PIE1
0x0F9E       [1]    PIR1
0x0FA4       [0]    RC2IF_bit
0x0FAB       [1]    RCSTA
0x0FAC       [1]    TXSTA
0x0FAD       [1]    TXREG
0x0FAE       [1]    RCREG
0x0FAF       [1]    SPBRG
0x0FB0       [1]    SPBRGH
0x0FB8       [1]    BAUDCON
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
0x0FFD       [1]    TOSL
0x0FFE       [1]    TOSH
0x0FFF       [1]    TOSU
