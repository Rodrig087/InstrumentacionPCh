;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 16/08/2018 15:54:24
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF001EFB0  	GOTO        864
_interrupt:
;Master.c,41 :: 		void interrupt(void){
0x0008	0xF016C000  	MOVFF       R0, 22
0x000C	0xF015C001  	MOVFF       R1, 21
;Master.c,43 :: 		if(PIR1.RC1IF==1){
0x0010	0xF017CFE1  	MOVFF       FSR1L, 23
0x0014	0xF018CFE2  	MOVFF       FSR1H, 24
0x0018	0xAA9E      	BTFSS       PIR1, 5 
0x001A	0xD042      	BRA         L_interrupt0
;Master.c,45 :: 		Dato = UART1_Read();                            //Recibe el byte por el Uart1 y lo almacena en la variable Dato
0x001C	0xD8E8      	RCALL       _UART1_Read
0x001E	0xF164C000  	MOVFF       R0, _Dato
;Master.c,50 :: 		if (Dato==Hdr){
0x0022	0x5000      	MOVF        R0, 0 
0x0024	0x0A3A      	XORLW       58
0x0026	0xE10A      	BNZ         L_interrupt1
;Master.c,51 :: 		BanTI = 1;                                   //Activa la bandera de inicio de trama
0x0028	0x0E01      	MOVLW       1
0x002A	0x0101      	MOVLB       1
0x002C	0x6F4E      	MOVWF       _BanTI, 1
;Master.c,52 :: 		it = 0;                                      //Limpia el subindice de trama
0x002E	0x6B65      	CLRF        _it, 1
;Master.c,53 :: 		T1CON.TMR1ON = 1;                            //Enciende el Timer1
0x0030	0x80CD      	BSF         T1CON, 0 
;Master.c,54 :: 		TMR1IF_bit = 0;                              //Limpia la bandera de interrupcion por desbordamiento del TMR1
0x0032	0x909E      	BCF         TMR1IF_bit, BitPos(TMR1IF_bit+0) 
;Master.c,55 :: 		TMR1H = 0x3C;                                //Se vuelve a cargar el valor del preload correspondiente a los 50ms, porque
0x0034	0x0E3C      	MOVLW       60
0x0036	0x6ECF      	MOVWF       TMR1H 
;Master.c,56 :: 		TMR1L = 0xB0;                                //al parecer este valor se pierde cada vez que entra a la interrupcion
0x0038	0x0EB0      	MOVLW       176
0x003A	0x6ECE      	MOVWF       TMR1L 
;Master.c,57 :: 		}
L_interrupt1:
0x003C	0x0101      	MOVLB       1
;Master.c,59 :: 		if (BanTI==1){                                  //Verifica que la bandera de inicio de trama este activa
0x003E	0x514E      	MOVF        _BanTI, 0, 1
0x0040	0x0A01      	XORLW       1
0x0042	0xE12D      	BNZ         L_interrupt2
;Master.c,61 :: 		if ((BanTF==1)&&(Dato==End2)){               //Verifica que se cumpla la condicion de final de trama
0x0044	0x514C      	MOVF        _BanTF, 0, 1
0x0046	0x0A01      	XORLW       1
0x0048	0xE10D      	BNZ         L_interrupt5
0x004A	0x5164      	MOVF        _Dato, 0, 1
0x004C	0x0A0A      	XORLW       10
0x004E	0xE10A      	BNZ         L_interrupt5
L__interrupt41:
;Master.c,62 :: 		rSize = it+1;                             //Establece la longitud total de la trama de respuesta
0x0050	0x5165      	MOVF        _it, 0, 1
0x0052	0x0F01      	ADDLW       1
0x0054	0x0100      	MOVLB       0
0x0056	0x6FE4      	MOVWF       _rsize, 1
;Master.c,63 :: 		BanTI = 0;                                //Limpia la bandera de inicio de trama para no permitir que se almacene mas datos en la trama de respuesta
0x0058	0x0101      	MOVLB       1
0x005A	0x6B4E      	CLRF        _BanTI, 1
;Master.c,64 :: 		BanTC = 1;                                //Activa la bandera de trama completa
0x005C	0x0E01      	MOVLW       1
0x005E	0x6F4B      	MOVWF       _BanTC, 1
;Master.c,65 :: 		T1CON.TMR1ON = 0;                         //Apaga el Timer1
0x0060	0x90CD      	BCF         T1CON, 0 
;Master.c,66 :: 		TMR1IF_bit = 0;                           //Limpia la bandera de interrupcion por desbordamiento del TMR1
0x0062	0x909E      	BCF         TMR1IF_bit, BitPos(TMR1IF_bit+0) 
;Master.c,67 :: 		}
L_interrupt5:
;Master.c,69 :: 		if (Dato!=End1){                             //Verifica que el dato recibido sea diferente del primer byte del delimitador de final de trama
0x0064	0x5164      	MOVF        _Dato, 0, 1
0x0066	0x0A0D      	XORLW       13
0x0068	0xE00D      	BZ          L_interrupt6
;Master.c,70 :: 		Rspt[it] = Dato;                          //Almacena el dato en la trama de respuesta
0x006A	0x0EE5      	MOVLW       _Rspt
0x006C	0x6EE1      	MOVWF       FSR1L 
0x006E	0x0E00      	MOVLW       hi_addr(_Rspt)
0x0070	0x6EE2      	MOVWF       FSR1H 
0x0072	0x5165      	MOVF        _it, 0, 1
0x0074	0x26E1      	ADDWF       FSR1L, 1 
0x0076	0xB0D8      	BTFSC       STATUS, 0 
0x0078	0x2AE2      	INCF        FSR1H, 1 
0x007A	0xFFE6C164  	MOVFF       _Dato, POSTINC1
;Master.c,71 :: 		it++;                                     //Aumenta el subindice en una unidad para permitir almacenar el siguiente dato del mensaje
0x007E	0x2B65      	INCF        _it, 1, 1
;Master.c,72 :: 		BanTF = 0;                                //Limpia la bandera de final de trama
0x0080	0x6B4C      	CLRF        _BanTF, 1
;Master.c,73 :: 		} else {
0x0082	0xD00D      	BRA         L_interrupt7
L_interrupt6:
;Master.c,74 :: 		Rspt[it] = Dato;                          //Almacena el dato en la trama de respuesta
0x0084	0x0EE5      	MOVLW       _Rspt
0x0086	0x6EE1      	MOVWF       FSR1L 
0x0088	0x0E00      	MOVLW       hi_addr(_Rspt)
0x008A	0x6EE2      	MOVWF       FSR1H 
0x008C	0x5165      	MOVF        _it, 0, 1
0x008E	0x26E1      	ADDWF       FSR1L, 1 
0x0090	0xB0D8      	BTFSC       STATUS, 0 
0x0092	0x2AE2      	INCF        FSR1H, 1 
0x0094	0xFFE6C164  	MOVFF       _Dato, POSTINC1
;Master.c,75 :: 		it++;                                     //Aumenta el subindice en una unidad para permitir almacenar el siguiente dato del mensaje
0x0098	0x2B65      	INCF        _it, 1, 1
;Master.c,76 :: 		BanTF = 1;                                //Si el dato recibido es el primer byte de final de trama activa la bandera
0x009A	0x0E01      	MOVLW       1
0x009C	0x6F4C      	MOVWF       _BanTF, 1
;Master.c,77 :: 		}
L_interrupt7:
;Master.c,79 :: 		}
L_interrupt2:
;Master.c,81 :: 		PIR1.F5 = 0;                                    //Limpia la bandera de interrupcion
0x009E	0x9A9E      	BCF         PIR1, 5 
;Master.c,82 :: 		}
L_interrupt0:
;Master.c,88 :: 		if (TMR1IF_bit==1){
0x00A0	0xA09E      	BTFSS       TMR1IF_bit, BitPos(TMR1IF_bit+0) 
0x00A2	0xD006      	BRA         L_interrupt8
;Master.c,89 :: 		TMR1IF_bit = 0;                                 //Limpia la bandera de interrupcion por desbordamiento del TMR1
0x00A4	0x0101      	MOVLB       1
0x00A6	0x909E      	BCF         TMR1IF_bit, BitPos(TMR1IF_bit+0) 
;Master.c,90 :: 		T1CON.TMR1ON = 0;                               //Apaga el Timer1
0x00A8	0x90CD      	BCF         T1CON, 0 
;Master.c,92 :: 		RC4_bit = ~RC4_bit;                             //Conmuta el valor de la salida RC4 para indicar que entro a la interrupcion
0x00AA	0x7882      	BTG         RC4_bit, BitPos(RC4_bit+0) 
;Master.c,94 :: 		BanTI = 0;                                      //Limpia la bandera de inicio de trama
0x00AC	0x6B4E      	CLRF        _BanTI, 1
;Master.c,95 :: 		it = 0;                                         //Limpia el subindice de trama
0x00AE	0x6B65      	CLRF        _it, 1
;Master.c,97 :: 		}
L_interrupt8:
;Master.c,98 :: 		}
L_end_interrupt:
L__interrupt44:
0x00B0	0xF000C016  	MOVFF       22, R0
0x00B4	0xF001C015  	MOVFF       21, R1
0x00B8	0xFFE1C017  	MOVFF       23, FSR1L
0x00BC	0xFFE2C018  	MOVFF       24, FSR1H
0x00C0	0x0011      	RETFIE      1
; end of _interrupt
_ModbusRTU_CRC16:
;Master.c,103 :: 		unsigned int ModbusRTU_CRC16(unsigned char* ptucBuffer, unsigned int uiLen){
;Master.c,108 :: 		for(uiCRCResult=0xFFFF; uiLen!=0; uiLen --)
0x00C2	0x0EFF      	MOVLW       255
0x00C4	0x6E03      	MOVWF       R3 
0x00C6	0x0EFF      	MOVLW       255
0x00C8	0x6E04      	MOVWF       R4 
L_ModbusRTU_CRC169:
0x00CA	0x0E00      	MOVLW       0
0x00CC	0x0101      	MOVLB       1
0x00CE	0x196C      	XORWF       FARG_ModbusRTU_CRC16_uiLen+1, 0, 1
0x00D0	0xE102      	BNZ         L__ModbusRTU_CRC1646
0x00D2	0x0E00      	MOVLW       0
0x00D4	0x196B      	XORWF       FARG_ModbusRTU_CRC16_uiLen, 0, 1
L__ModbusRTU_CRC1646:
0x00D6	0xE023      	BZ          L_ModbusRTU_CRC1610
;Master.c,110 :: 		uiCRCResult ^= *ptucBuffer ++;
0x00D8	0xFFD9C169  	MOVFF       FARG_ModbusRTU_CRC16_ptucBuffer, FSR2L
0x00DC	0xFFDAC16A  	MOVFF       FARG_ModbusRTU_CRC16_ptucBuffer+1, FSR2H
0x00E0	0x50DE      	MOVF        POSTINC2, 0 
0x00E2	0x1A03      	XORWF       R3, 1 
0x00E4	0x0E00      	MOVLW       0
0x00E6	0x1A04      	XORWF       R4, 1 
0x00E8	0x4B69      	INFSNZ      FARG_ModbusRTU_CRC16_ptucBuffer, 1, 1
0x00EA	0x2B6A      	INCF        FARG_ModbusRTU_CRC16_ptucBuffer+1, 1, 1
;Master.c,111 :: 		for(ucCounter =0; ucCounter <8; ucCounter ++)
0x00EC	0x6A02      	CLRF        R2 
L_ModbusRTU_CRC1612:
0x00EE	0x0E08      	MOVLW       8
0x00F0	0x5C02      	SUBWF       R2, 0 
0x00F2	0xE20F      	BC          L_ModbusRTU_CRC1613
;Master.c,113 :: 		if(uiCRCResult & 0x0001)
0x00F4	0xA003      	BTFSS       R3, 0 
0x00F6	0xD008      	BRA         L_ModbusRTU_CRC1615
;Master.c,114 :: 		uiCRCResult =(uiCRCResult>>1)^PolModbus;
0x00F8	0x3204      	RRCF        R4, 1 
0x00FA	0x3203      	RRCF        R3, 1 
0x00FC	0x9E04      	BCF         R4, 7 
0x00FE	0x0E01      	MOVLW       1
0x0100	0x1A03      	XORWF       R3, 1 
0x0102	0x0EA0      	MOVLW       160
0x0104	0x1A04      	XORWF       R4, 1 
0x0106	0xD003      	BRA         L_ModbusRTU_CRC1616
L_ModbusRTU_CRC1615:
;Master.c,116 :: 		uiCRCResult >>= 1;
0x0108	0x3204      	RRCF        R4, 1 
0x010A	0x3203      	RRCF        R3, 1 
0x010C	0x9E04      	BCF         R4, 7 
L_ModbusRTU_CRC1616:
;Master.c,111 :: 		for(ucCounter =0; ucCounter <8; ucCounter ++)
0x010E	0x2A02      	INCF        R2, 1 
;Master.c,117 :: 		}
0x0110	0xD7EE      	BRA         L_ModbusRTU_CRC1612
L_ModbusRTU_CRC1613:
0x0112	0x0101      	MOVLB       1
;Master.c,108 :: 		for(uiCRCResult=0xFFFF; uiLen!=0; uiLen --)
0x0114	0x0E01      	MOVLW       1
0x0116	0x5F6B      	SUBWF       FARG_ModbusRTU_CRC16_uiLen, 1, 1
0x0118	0x0E00      	MOVLW       0
0x011A	0x5B6C      	SUBWFB      FARG_ModbusRTU_CRC16_uiLen+1, 1, 1
;Master.c,118 :: 		}
0x011C	0xD7D6      	BRA         L_ModbusRTU_CRC169
L_ModbusRTU_CRC1610:
;Master.c,119 :: 		return uiCRCResult;
0x011E	0xF000C003  	MOVFF       R3, R0
0x0122	0xF001C004  	MOVFF       R4, R1
;Master.c,121 :: 		}
L_end_ModbusRTU_CRC16:
0x0126	0x0012      	RETURN      0
; end of _ModbusRTU_CRC16
_UART1_Init:
;__Lib_UART_c67b67.c,20 :: 		
;__Lib_UART_c67b67.c,23 :: 		
0x0128	0x0E80      	MOVLW       _UART1_Write
0x012A	0x0101      	MOVLB       1
0x012C	0x6F5C      	MOVWF       _UART_Wr_Ptr, 1
0x012E	0x0E01      	MOVLW       hi_addr(_UART1_Write)
0x0130	0x6F5D      	MOVWF       _UART_Wr_Ptr+1, 1
0x0132	0x0E69      	MOVLW       FARG_UART1_Write_data_
0x0134	0x6F5E      	MOVWF       _UART_Wr_Ptr+2, 1
0x0136	0x0E01      	MOVLW       hi_addr(FARG_UART1_Write_data_)
0x0138	0x6F5F      	MOVWF       _UART_Wr_Ptr+3, 1
;__Lib_UART_c67b67.c,24 :: 		
0x013A	0x0EEE      	MOVLW       _UART1_Read
0x013C	0x6F60      	MOVWF       _UART_Rd_Ptr, 1
0x013E	0x0E01      	MOVLW       hi_addr(_UART1_Read)
0x0140	0x6F61      	MOVWF       _UART_Rd_Ptr+1, 1
0x0142	0x0E00      	MOVLW       0
0x0144	0x6F62      	MOVWF       _UART_Rd_Ptr+2, 1
0x0146	0x0E00      	MOVLW       0
0x0148	0x6F63      	MOVWF       _UART_Rd_Ptr+3, 1
;__Lib_UART_c67b67.c,25 :: 		
0x014A	0x0EFF      	MOVLW       _UART1_Data_Ready
0x014C	0x6F54      	MOVWF       _UART_Rdy_Ptr, 1
0x014E	0x0EFF      	MOVLW       hi_addr(_UART1_Data_Ready)
0x0150	0x6F55      	MOVWF       _UART_Rdy_Ptr+1, 1
0x0152	0x0E00      	MOVLW       0
0x0154	0x6F56      	MOVWF       _UART_Rdy_Ptr+2, 1
0x0156	0x0E00      	MOVLW       0
0x0158	0x6F57      	MOVWF       _UART_Rdy_Ptr+3, 1
;__Lib_UART_c67b67.c,26 :: 		
0x015A	0x0E8E      	MOVLW       _UART1_Tx_Idle
0x015C	0x6F58      	MOVWF       _UART_Tx_Idle_Ptr, 1
0x015E	0x0E01      	MOVLW       hi_addr(_UART1_Tx_Idle)
0x0160	0x6F59      	MOVWF       _UART_Tx_Idle_Ptr+1, 1
0x0162	0x0E00      	MOVLW       0
0x0164	0x6F5A      	MOVWF       _UART_Tx_Idle_Ptr+2, 1
0x0166	0x0E00      	MOVLW       0
0x0168	0x6F5B      	MOVWF       _UART_Tx_Idle_Ptr+3, 1
;__Lib_UART_c67b67.c,28 :: 		
0x016A	0x8AAC      	BSF         TXSTA, 5 
;__Lib_UART_c67b67.c,29 :: 		
0x016C	0x0E90      	MOVLW       144
0x016E	0x6EAB      	MOVWF       RCSTA 
;__Lib_UART_c67b67.c,30 :: 		
0x0170	0x8E94      	BSF         TRISC7_bit, BitPos(TRISC7_bit+0) 
;__Lib_UART_c67b67.c,31 :: 		
0x0172	0x9C94      	BCF         TRISC6_bit, BitPos(TRISC6_bit+0) 
;__Lib_UART_c67b67.c,33 :: 		
L_UART1_Init0:
0x0174	0xAA9E      	BTFSS       PIR1, 5 
0x0176	0xD003      	BRA         L_UART1_Init1
;__Lib_UART_c67b67.c,34 :: 		
0x0178	0xF000CFAE  	MOVFF       RCREG, R0
0x017C	0xD7FB      	BRA         L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c67b67.c,35 :: 		
L_end_UART1_Init:
0x017E	0x0012      	RETURN      0
; end of _UART1_Init
_UART1_Write:
;__Lib_UART_c67b67.c,63 :: 		
;__Lib_UART_c67b67.c,64 :: 		
L_UART1_Write3:
0x0180	0xB2AC      	BTFSC       TXSTA, 1 
0x0182	0xD002      	BRA         L_UART1_Write4
;__Lib_UART_c67b67.c,65 :: 		
0x0184	0x0000      	NOP
0x0186	0xD7FC      	BRA         L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67b67.c,66 :: 		
0x0188	0xFFADC169  	MOVFF       FARG_UART1_Write_data_, TXREG
;__Lib_UART_c67b67.c,67 :: 		
L_end_UART1_Write:
0x018C	0x0012      	RETURN      0
; end of _UART1_Write
_UART1_Tx_Idle:
;__Lib_UART_c67b67.c,57 :: 		
;__Lib_UART_c67b67.c,58 :: 		
0x018E	0x0E00      	MOVLW       0
0x0190	0xB2AC      	BTFSC       TXSTA, 1 
0x0192	0x0E01      	MOVLW       1
0x0194	0x6E00      	MOVWF       R0 
;__Lib_UART_c67b67.c,59 :: 		
L_end_UART1_Tx_Idle:
0x0196	0x0012      	RETURN      0
; end of _UART1_Tx_Idle
_Configuracion:
;Master.c,164 :: 		void Configuracion(){
;Master.c,166 :: 		ANSELA = 0;                                       //Configura el PORTA como digital
0x0198	0x010F      	MOVLB       15
0x019A	0x6B38      	CLRF        ANSELA, 1
;Master.c,167 :: 		ANSELB = 0;                                       //Configura el PORTB como digital
0x019C	0x6B39      	CLRF        ANSELB, 1
;Master.c,168 :: 		ANSELC = 0;                                       //Configura el PORTC como digital
0x019E	0x6B3A      	CLRF        ANSELC, 1
;Master.c,170 :: 		TRISA = 1;                                        //Configura el puerto A como entrada
0x01A0	0x0E01      	MOVLW       1
0x01A2	0x6E92      	MOVWF       TRISA 
;Master.c,171 :: 		TRISC0_bit = 1;                                   //Configura el pin C0 como entrada
0x01A4	0x8094      	BSF         TRISC0_bit, BitPos(TRISC0_bit+0) 
;Master.c,172 :: 		TRISC1_bit = 1;                                   //Configura el pin C1 como entrada
0x01A6	0x8294      	BSF         TRISC1_bit, BitPos(TRISC1_bit+0) 
;Master.c,173 :: 		TRISC2_bit = 1;                                   //Configura el pin C2 como entrada
0x01A8	0x8494      	BSF         TRISC2_bit, BitPos(TRISC2_bit+0) 
;Master.c,174 :: 		TRISC3_bit = 0;                                   //Configura el pin C3 como salida
0x01AA	0x9694      	BCF         TRISC3_bit, BitPos(TRISC3_bit+0) 
;Master.c,175 :: 		TRISC4_bit = 0;                                   //Configura el pin C4 como salida
0x01AC	0x9894      	BCF         TRISC4_bit, BitPos(TRISC4_bit+0) 
;Master.c,176 :: 		TRISC5_bit = 0;                                   //Configura el pin C5 como salida
0x01AE	0x9A94      	BCF         TRISC5_bit, BitPos(TRISC5_bit+0) 
;Master.c,178 :: 		INTCON.GIE = 1;                                   //Habilita las interrupciones globales
0x01B0	0x8EF2      	BSF         INTCON, 7 
;Master.c,179 :: 		INTCON.PEIE = 1;                                  //Habilita las interrupciones perifericas
0x01B2	0x8CF2      	BSF         INTCON, 6 
;Master.c,182 :: 		PIE1.RC1IE = 1;                                   //Habilita la interrupcion en UART1 receive
0x01B4	0x8A9D      	BSF         PIE1, 5 
;Master.c,183 :: 		PIR1.RC1IF = 0;                                   //Limpia la bandera de interrupcion
0x01B6	0x9A9E      	BCF         PIR1, 5 
;Master.c,184 :: 		UART1_Init(19200);                                //Inicializa el UART a 9600 bps
0x01B8	0x86B8      	BSF         BAUDCON, 3, 0
0x01BA	0x6AB0      	CLRF        SPBRGH 
0x01BC	0x0E67      	MOVLW       103
0x01BE	0x6EAF      	MOVWF       SPBRG 
0x01C0	0x84AC      	BSF         TXSTA, 2, 0
0x01C2	0xDFB2      	RCALL       _UART1_Init
;Master.c,187 :: 		T1CON = 0x21;                                     //Establece el prescalador en 1:2, enciende el TMR1
0x01C4	0x0E21      	MOVLW       33
0x01C6	0x6ECD      	MOVWF       T1CON 
;Master.c,188 :: 		TMR1IE_bit = 1;                                   //Habilita la interrupcion por desbordamiento del TMR1
0x01C8	0x809D      	BSF         TMR1IE_bit, BitPos(TMR1IE_bit+0) 
;Master.c,189 :: 		TMR1IF_bit = 0;                                   //Limpia la bandera de interrupcion por desbordamiento del TMR1
0x01CA	0x909E      	BCF         TMR1IF_bit, BitPos(TMR1IF_bit+0) 
;Master.c,190 :: 		TMR1H = 0x3C;                                     //Preload = 15536, Time = 100ms
0x01CC	0x0E3C      	MOVLW       60
0x01CE	0x6ECF      	MOVWF       TMR1H 
;Master.c,191 :: 		TMR1L = 0xB0;
0x01D0	0x0EB0      	MOVLW       176
0x01D2	0x6ECE      	MOVWF       TMR1L 
;Master.c,194 :: 		RCON.IPEN = 1;                                    //Habilita el nivel de prioridad en las interrupciones
0x01D4	0x8ED0      	BSF         RCON, 7 
;Master.c,195 :: 		IPR1.RC1IP = 0;                                   //EUSART1 Receive Interrupt Priority bit = Low priority
0x01D6	0x9A9F      	BCF         IPR1, 5 
;Master.c,196 :: 		IPR1.TMR1IP = 1;                                  //TMR1 Overflow Interrupt Priority bit = High priority
0x01D8	0x809F      	BSF         IPR1, 0 
;Master.c,198 :: 		Delay_ms(10);                                     //Espera para que el modulo UART se estabilice
0x01DA	0x0E1A      	MOVLW       26
0x01DC	0x6E0C      	MOVWF       R12, 0
0x01DE	0x0EF8      	MOVLW       248
0x01E0	0x6E0D      	MOVWF       R13, 0
L_Configuracion25:
0x01E2	0x2E0D      	DECFSZ      R13, 1, 0
0x01E4	0xD7FE      	BRA         L_Configuracion25
0x01E6	0x2E0C      	DECFSZ      R12, 1, 0
0x01E8	0xD7FC      	BRA         L_Configuracion25
0x01EA	0x0000      	NOP
;Master.c,201 :: 		}
L_end_Configuracion:
0x01EC	0x0012      	RETURN      0
; end of _Configuracion
_UART1_Read:
;__Lib_UART_c67b67.c,44 :: 		
;__Lib_UART_c67b67.c,47 :: 		
0x01EE	0xF001CFAE  	MOVFF       RCREG, R1
;__Lib_UART_c67b67.c,48 :: 		
0x01F2	0xA2AB      	BTFSS       RCSTA, 1 
0x01F4	0xD002      	BRA         L_UART1_Read2
;__Lib_UART_c67b67.c,49 :: 		
0x01F6	0x98AB      	BCF         RCSTA, 4 
;__Lib_UART_c67b67.c,50 :: 		
0x01F8	0x88AB      	BSF         RCSTA, 4 
;__Lib_UART_c67b67.c,51 :: 		
L_UART1_Read2:
;__Lib_UART_c67b67.c,52 :: 		
0x01FA	0xF000C001  	MOVFF       R1, R0
;__Lib_UART_c67b67.c,53 :: 		
L_end_UART1_Read:
0x01FE	0x0012      	RETURN      0
; end of _UART1_Read
_enviarTrama:
;Master.c,130 :: 		void enviarTrama(unsigned short dataSize, unsigned short fcn){
;Master.c,132 :: 		unsigned short pSize = dataSize + 7;                //Longitud de la trama de respuesta
0x0200	0x0E07      	MOVLW       7
0x0202	0x0101      	MOVLB       1
0x0204	0x2566      	ADDWF       FARG_enviarTrama_dataSize, 0, 1
0x0206	0x6E00      	MOVWF       R0 
0x0208	0x6A01      	CLRF        R1 
0x020A	0x0E00      	MOVLW       0
0x020C	0x2201      	ADDWFC      R1, 1 
0x020E	0xF168C000  	MOVFF       R0, enviarTrama_pSize_L0
;Master.c,135 :: 		PDU[0] = Add;                                       //Rellena el campo de direccion con la direccion del dispositivo esclavo
0x0212	0xF019C07D  	MOVFF       _Add, _PDU
;Master.c,136 :: 		PDU[1] = fcn;                                       //Rellena el campo de funcion con la funcion que se requerira al esclavo
0x0216	0xF01AC167  	MOVFF       FARG_enviarTrama_fcn, _PDU+1
;Master.c,138 :: 		PDU[2] = 0xAA;                                     //Rellena el campo de datos con los valores 0xAAFF
0x021A	0x0EAA      	MOVLW       170
0x021C	0x6E1B      	MOVWF       _PDU+2 
;Master.c,139 :: 		PDU[3] = 0xAA;
0x021E	0x0EAA      	MOVLW       170
0x0220	0x6E1C      	MOVWF       _PDU+3 
;Master.c,142 :: 		Ptcn[0] = Hdr;                                     //Se rellena el primer byte de la trama de peticion con el delimitador de inicio de trama
0x0222	0x0E3A      	MOVLW       58
0x0224	0x0100      	MOVLB       0
0x0226	0x6F7E      	MOVWF       _Ptcn, 1
;Master.c,143 :: 		for (i=0;i<=(dataSize+1);i++){                     //Rellena la trama de Respuesta con el PDU
0x0228	0x0101      	MOVLB       1
0x022A	0x6B4F      	CLRF        _i, 1
L_enviarTrama17:
0x022C	0x5166      	MOVF        FARG_enviarTrama_dataSize, 0, 1
0x022E	0x0F01      	ADDLW       1
0x0230	0x6E01      	MOVWF       R1 
0x0232	0x6A02      	CLRF        R2 
0x0234	0x0E00      	MOVLW       0
0x0236	0x2202      	ADDWFC      R2, 1 
0x0238	0x0E80      	MOVLW       128
0x023A	0x1802      	XORWF       R2, 0 
0x023C	0x6E00      	MOVWF       R0 
0x023E	0x0E80      	MOVLW       128
0x0240	0x5C00      	SUBWF       R0, 0 
0x0242	0xE102      	BNZ         L__enviarTrama48
0x0244	0x514F      	MOVF        _i, 0, 1
0x0246	0x5C01      	SUBWF       R1, 0 
L__enviarTrama48:
0x0248	0xE318      	BNC         L_enviarTrama18
;Master.c,144 :: 		Ptcn[i+1] = PDU[i];
0x024A	0x514F      	MOVF        _i, 0, 1
0x024C	0x0F01      	ADDLW       1
0x024E	0x6E00      	MOVWF       R0 
0x0250	0x6A01      	CLRF        R1 
0x0252	0x0E00      	MOVLW       0
0x0254	0x2201      	ADDWFC      R1, 1 
0x0256	0x0E7E      	MOVLW       _Ptcn
0x0258	0x2400      	ADDWF       R0, 0 
0x025A	0x6EE1      	MOVWF       FSR1L 
0x025C	0x0E00      	MOVLW       hi_addr(_Ptcn)
0x025E	0x2001      	ADDWFC      R1, 0 
0x0260	0x6EE2      	MOVWF       FSR1H 
0x0262	0x0E19      	MOVLW       _PDU
0x0264	0x6EE9      	MOVWF       FSR0L 
0x0266	0x0E00      	MOVLW       hi_addr(_PDU)
0x0268	0x6EEA      	MOVWF       FSR0H 
0x026A	0x514F      	MOVF        _i, 0, 1
0x026C	0x26E9      	ADDWF       FSR0L, 1 
0x026E	0xB0D8      	BTFSC       STATUS, 0 
0x0270	0x2AEA      	INCF        FSR0H, 1 
0x0272	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;Master.c,143 :: 		for (i=0;i<=(dataSize+1);i++){                     //Rellena la trama de Respuesta con el PDU
0x0276	0x2B4F      	INCF        _i, 1, 1
;Master.c,145 :: 		}
0x0278	0xD7D9      	BRA         L_enviarTrama17
L_enviarTrama18:
;Master.c,146 :: 		CRC16 = ModbusRTU_CRC16(PDU, dataSize+2);          //Calcula el CRC de la trama PDU y la almacena en la variable CRC16
0x027A	0x0E19      	MOVLW       _PDU
0x027C	0x6F69      	MOVWF       FARG_ModbusRTU_CRC16_ptucBuffer, 1
0x027E	0x0E00      	MOVLW       hi_addr(_PDU)
0x0280	0x6F6A      	MOVWF       FARG_ModbusRTU_CRC16_ptucBuffer+1, 1
0x0282	0x0E02      	MOVLW       2
0x0284	0x2566      	ADDWF       FARG_enviarTrama_dataSize, 0, 1
0x0286	0x6F6B      	MOVWF       FARG_ModbusRTU_CRC16_uiLen, 1
0x0288	0x6B6C      	CLRF        FARG_ModbusRTU_CRC16_uiLen+1, 1
0x028A	0x0E00      	MOVLW       0
0x028C	0x236C      	ADDWFC      FARG_ModbusRTU_CRC16_uiLen+1, 1, 1
0x028E	0xDF19      	RCALL       _ModbusRTU_CRC16
0x0290	0xF150C000  	MOVFF       R0, _CRC16
0x0294	0xF151C001  	MOVFF       R1, _CRC16+1
;Master.c,147 :: 		Ptcn[dataSize+3] = *(ptrCRC16+1);                  //Rellena el campo CRC_MSB de la trama de respuesta
0x0298	0x0E03      	MOVLW       3
0x029A	0x2566      	ADDWF       FARG_enviarTrama_dataSize, 0, 1
0x029C	0x6E00      	MOVWF       R0 
0x029E	0x6A01      	CLRF        R1 
0x02A0	0x0E00      	MOVLW       0
0x02A2	0x2201      	ADDWFC      R1, 1 
0x02A4	0x0E7E      	MOVLW       _Ptcn
0x02A6	0x2400      	ADDWF       R0, 0 
0x02A8	0x6EE1      	MOVWF       FSR1L 
0x02AA	0x0E00      	MOVLW       hi_addr(_Ptcn)
0x02AC	0x2001      	ADDWFC      R1, 0 
0x02AE	0x6EE2      	MOVWF       FSR1H 
0x02B0	0x0E01      	MOVLW       1
0x02B2	0x2552      	ADDWF       _ptrCRC16, 0, 1
0x02B4	0x6EE9      	MOVWF       FSR0L 
0x02B6	0x0E00      	MOVLW       0
0x02B8	0x2153      	ADDWFC      _ptrCRC16+1, 0, 1
0x02BA	0x6EEA      	MOVWF       FSR0H 
0x02BC	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;Master.c,148 :: 		Ptcn[dataSize+4] = *ptrCRC16;                      //Rellena el campo CRC_LSB de la trama de respuesta
0x02C0	0x0E04      	MOVLW       4
0x02C2	0x2566      	ADDWF       FARG_enviarTrama_dataSize, 0, 1
0x02C4	0x6E00      	MOVWF       R0 
0x02C6	0x6A01      	CLRF        R1 
0x02C8	0x0E00      	MOVLW       0
0x02CA	0x2201      	ADDWFC      R1, 1 
0x02CC	0x0E7E      	MOVLW       _Ptcn
0x02CE	0x2400      	ADDWF       R0, 0 
0x02D0	0x6EE1      	MOVWF       FSR1L 
0x02D2	0x0E00      	MOVLW       hi_addr(_Ptcn)
0x02D4	0x2001      	ADDWFC      R1, 0 
0x02D6	0x6EE2      	MOVWF       FSR1H 
0x02D8	0xFFE9C152  	MOVFF       _ptrCRC16, FSR0L
0x02DC	0xFFEAC153  	MOVFF       _ptrCRC16+1, FSR0H
0x02E0	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;Master.c,149 :: 		Ptcn[dataSize+5] = End1;                           //Se rellena el penultimo byte de la trama de repuesta con el primer byte del delimitador de final de trama
0x02E4	0x0E05      	MOVLW       5
0x02E6	0x2566      	ADDWF       FARG_enviarTrama_dataSize, 0, 1
0x02E8	0x6E00      	MOVWF       R0 
0x02EA	0x6A01      	CLRF        R1 
0x02EC	0x0E00      	MOVLW       0
0x02EE	0x2201      	ADDWFC      R1, 1 
0x02F0	0x0E7E      	MOVLW       _Ptcn
0x02F2	0x2400      	ADDWF       R0, 0 
0x02F4	0x6EE1      	MOVWF       FSR1L 
0x02F6	0x0E00      	MOVLW       hi_addr(_Ptcn)
0x02F8	0x2001      	ADDWFC      R1, 0 
0x02FA	0x6EE2      	MOVWF       FSR1H 
0x02FC	0x0E0D      	MOVLW       13
0x02FE	0x6EE6      	MOVWF       POSTINC1 
;Master.c,150 :: 		Ptcn[dataSize+6] = End2;                           //Se rellena el ultimo byte de la trama de repuesta con el segundo byte del delimitador de final de trama
0x0300	0x0E06      	MOVLW       6
0x0302	0x2566      	ADDWF       FARG_enviarTrama_dataSize, 0, 1
0x0304	0x6E00      	MOVWF       R0 
0x0306	0x6A01      	CLRF        R1 
0x0308	0x0E00      	MOVLW       0
0x030A	0x2201      	ADDWFC      R1, 1 
0x030C	0x0E7E      	MOVLW       _Ptcn
0x030E	0x2400      	ADDWF       R0, 0 
0x0310	0x6EE1      	MOVWF       FSR1L 
0x0312	0x0E00      	MOVLW       hi_addr(_Ptcn)
0x0314	0x2001      	ADDWFC      R1, 0 
0x0316	0x6EE2      	MOVWF       FSR1H 
0x0318	0x0E0A      	MOVLW       10
0x031A	0x6EE6      	MOVWF       POSTINC1 
;Master.c,153 :: 		RC5_bit = 1;                                       //Establece el Max485 en modo de escritura
0x031C	0x8A82      	BSF         RC5_bit, BitPos(RC5_bit+0) 
;Master.c,154 :: 		for (i=0;i<pSize;i++){
0x031E	0x6B4F      	CLRF        _i, 1
L_enviarTrama20:
0x0320	0x5168      	MOVF        enviarTrama_pSize_L0, 0, 1
0x0322	0x5D4F      	SUBWF       _i, 0, 1
0x0324	0xE20E      	BC          L_enviarTrama21
;Master.c,155 :: 		UART1_Write(Ptcn[i]);                          //Envia la trama de peticion
0x0326	0x0E7E      	MOVLW       _Ptcn
0x0328	0x6EE9      	MOVWF       FSR0L 
0x032A	0x0E00      	MOVLW       hi_addr(_Ptcn)
0x032C	0x6EEA      	MOVWF       FSR0H 
0x032E	0x514F      	MOVF        _i, 0, 1
0x0330	0x26E9      	ADDWF       FSR0L, 1 
0x0332	0xB0D8      	BTFSC       STATUS, 0 
0x0334	0x2AEA      	INCF        FSR0H, 1 
0x0336	0xF169CFEE  	MOVFF       POSTINC0, FARG_UART1_Write_data_
0x033A	0xDF22      	RCALL       _UART1_Write
;Master.c,154 :: 		for (i=0;i<pSize;i++){
0x033C	0x0101      	MOVLB       1
0x033E	0x2B4F      	INCF        _i, 1, 1
;Master.c,156 :: 		}
0x0340	0xD7EF      	BRA         L_enviarTrama20
L_enviarTrama21:
;Master.c,157 :: 		while(UART1_Tx_Idle()==0);
L_enviarTrama23:
0x0342	0xDF25      	RCALL       _UART1_Tx_Idle
0x0344	0x5000      	MOVF        R0, 0 
0x0346	0x0A00      	XORLW       0
0x0348	0xE101      	BNZ         L_enviarTrama24
0x034A	0xD7FB      	BRA         L_enviarTrama23
L_enviarTrama24:
;Master.c,158 :: 		RC5_bit = 0;                                       //Establece el Max485 en modo de lectura
0x034C	0x9A82      	BCF         RC5_bit, BitPos(RC5_bit+0) 
;Master.c,160 :: 		}
L_end_enviarTrama:
0x034E	0x0012      	RETURN      0
; end of _enviarTrama
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0350	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x0352	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0356	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0358	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x035A	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x035C	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x035E	0x0012      	RETURN      0
; end of ___CC2DW
_main:
;Master.c,203 :: 		void main() {
;Master.c,205 :: 		Configuracion();
0x0360	0xDF1B      	RCALL       _Configuracion
;Master.c,207 :: 		BanTI = 0;                                                     //Inicializa las banderas de trama
0x0362	0x6B4E      	CLRF        _BanTI, 1
;Master.c,208 :: 		BanTC = 0;
0x0364	0x6B4B      	CLRF        _BanTC, 1
;Master.c,209 :: 		BanTF = 0;
0x0366	0x6B4C      	CLRF        _BanTF, 1
;Master.c,211 :: 		Bb = 0;                                                        //Inicializa la bandera del boton, es solo para el ejemplo del dispositivo maestro
0x0368	0x6B4D      	CLRF        _Bb, 1
;Master.c,213 :: 		RC5_bit = 0;
0x036A	0x9A82      	BCF         RC5_bit, BitPos(RC5_bit+0) 
;Master.c,214 :: 		RC3_bit = 0;                                                   //Establece el Max485 en modo de lectura;
0x036C	0x9682      	BCF         RC3_bit, BitPos(RC3_bit+0) 
;Master.c,215 :: 		RC4_bit = 0;                                                   //Inicializa un indicador. No tiene relevancia para la ejecucion del programa
0x036E	0x9882      	BCF         RC4_bit, BitPos(RC4_bit+0) 
;Master.c,217 :: 		ptrCRC16 = &CRC16;                                             //Asociacion del puntero CRC16
0x0370	0x0E50      	MOVLW       _CRC16
0x0372	0x6F52      	MOVWF       _ptrCRC16, 1
0x0374	0x0E01      	MOVLW       hi_addr(_CRC16)
0x0376	0x6F53      	MOVWF       _ptrCRC16+1, 1
;Master.c,218 :: 		ptrCRCPDU = &CRCPDU;                                           //Asociacion del puntero CRCPDU
0x0378	0x0E49      	MOVLW       _CRCPDU
0x037A	0x0100      	MOVLB       0
0x037C	0x6FE2      	MOVWF       _ptrCRCPDU, 1
0x037E	0x0E01      	MOVLW       hi_addr(_CRCPDU)
0x0380	0x6FE3      	MOVWF       _ptrCRCPDU+1, 1
;Master.c,220 :: 		while (1){
L_main26:
;Master.c,223 :: 		if ((RC2_bit==0)&&(Bb==0)){
0x0382	0xB482      	BTFSC       RC2_bit, BitPos(RC2_bit+0) 
0x0384	0xD021      	BRA         L_main30
0x0386	0x0101      	MOVLB       1
0x0388	0x514D      	MOVF        _Bb, 0, 1
0x038A	0x0A00      	XORLW       0
0x038C	0xE11D      	BNZ         L_main30
L__main42:
;Master.c,224 :: 		Bb = 1;
0x038E	0x0E01      	MOVLW       1
0x0390	0x6F4D      	MOVWF       _Bb, 1
;Master.c,225 :: 		Add = (PORTA&0x3F)+((PORTC&0x03)<<6);                //Carga el valor del dipswitch como direccion del esclavo a quien se realiza la peticion
0x0392	0x0E3F      	MOVLW       63
0x0394	0x1480      	ANDWF       PORTA, 0 
0x0396	0x0100      	MOVLB       0
0x0398	0x6F7D      	MOVWF       _Add, 1
0x039A	0x0E03      	MOVLW       3
0x039C	0x1482      	ANDWF       PORTC, 0 
0x039E	0x6E02      	MOVWF       R2 
0x03A0	0x0E06      	MOVLW       6
0x03A2	0x6E01      	MOVWF       R1 
0x03A4	0xF000C002  	MOVFF       R2, R0
0x03A8	0x5001      	MOVF        R1, 0 
L__main51:
0x03AA	0xE004      	BZ          L__main52
0x03AC	0x3600      	RLCF        R0, 1 
0x03AE	0x9000      	BCF         R0, 0 
0x03B0	0x0FFF      	ADDLW       255
0x03B2	0xD7FB      	BRA         L__main51
L__main52:
0x03B4	0x0100      	MOVLB       0
0x03B6	0x5000      	MOVF        R0, 0 
0x03B8	0x277D      	ADDWF       _Add, 1, 1
;Master.c,226 :: 		enviarTrama(2,3);                                    //Envia la trama de peticion con 2 bytes de pyload y solicitando la funcion 3
0x03BA	0x0E02      	MOVLW       2
0x03BC	0x0101      	MOVLB       1
0x03BE	0x6F66      	MOVWF       FARG_enviarTrama_dataSize, 1
0x03C0	0x0E03      	MOVLW       3
0x03C2	0x6F67      	MOVWF       FARG_enviarTrama_fcn, 1
0x03C4	0xDF1D      	RCALL       _enviarTrama
;Master.c,228 :: 		} else if (RC2_bit==1){
0x03C6	0xD004      	BRA         L_main31
L_main30:
0x03C8	0xA482      	BTFSS       RC2_bit, BitPos(RC2_bit+0) 
0x03CA	0xD002      	BRA         L_main32
;Master.c,229 :: 		Bb = 0;                                              //Esta rutina sirve para evitar rebotes en el boton
0x03CC	0x0101      	MOVLB       1
0x03CE	0x6B4D      	CLRF        _Bb, 1
;Master.c,230 :: 		}
L_main32:
L_main31:
0x03D0	0x0101      	MOVLB       1
;Master.c,232 :: 		if (BanTC==1){                                          //Verifica que la bandera de trama completa este activa
0x03D2	0x514B      	MOVF        _BanTC, 0, 1
0x03D4	0x0A01      	XORLW       1
0x03D6	0xA4D8      	BTFSS       STATUS, 2 
0x03D8	0xD082      	BRA         L_main33
;Master.c,234 :: 		if (Rspt[1]==Add){                                   //Verifica que el campo de direccion de la trama de respuesta concuerde con la direccion del esclavo solicitado
0x03DA	0x0100      	MOVLB       0
0x03DC	0x51E6      	MOVF        _Rspt+1, 0, 1
0x03DE	0x197D      	XORWF       _Add, 0, 1
0x03E0	0xA4D8      	BTFSS       STATUS, 2 
0x03E2	0xD07B      	BRA         L_main34
;Master.c,236 :: 		for (i=0;i<=(Rsize-5);i++){                       //Rellena la trama de PDU con los datos de interes de la trama de respuesta, es decir, obviando los ultimos 2 bytes de CRC y los 2 de End
0x03E4	0x0101      	MOVLB       1
0x03E6	0x6B4F      	CLRF        _i, 1
L_main35:
0x03E8	0x0E05      	MOVLW       5
0x03EA	0x0100      	MOVLB       0
0x03EC	0x5DE4      	SUBWF       _rsize, 0, 1
0x03EE	0x6E01      	MOVWF       R1 
0x03F0	0x6A02      	CLRF        R2 
0x03F2	0x0E00      	MOVLW       0
0x03F4	0x5A02      	SUBWFB      R2, 1 
0x03F6	0x0E80      	MOVLW       128
0x03F8	0x1802      	XORWF       R2, 0 
0x03FA	0x6E00      	MOVWF       R0 
0x03FC	0x0E80      	MOVLW       128
0x03FE	0x5C00      	SUBWF       R0, 0 
0x0400	0xE103      	BNZ         L__main53
0x0402	0x0101      	MOVLB       1
0x0404	0x514F      	MOVF        _i, 0, 1
0x0406	0x5C01      	SUBWF       R1, 0 
L__main53:
0x0408	0xE319      	BNC         L_main36
;Master.c,237 :: 		PDU[i] = Rspt[i+1];
0x040A	0x0101      	MOVLB       1
0x040C	0x0E19      	MOVLW       _PDU
0x040E	0x6EE1      	MOVWF       FSR1L 
0x0410	0x0E00      	MOVLW       hi_addr(_PDU)
0x0412	0x6EE2      	MOVWF       FSR1H 
0x0414	0x514F      	MOVF        _i, 0, 1
0x0416	0x26E1      	ADDWF       FSR1L, 1 
0x0418	0xB0D8      	BTFSC       STATUS, 0 
0x041A	0x2AE2      	INCF        FSR1H, 1 
0x041C	0x514F      	MOVF        _i, 0, 1
0x041E	0x0F01      	ADDLW       1
0x0420	0x6E00      	MOVWF       R0 
0x0422	0x6A01      	CLRF        R1 
0x0424	0x0E00      	MOVLW       0
0x0426	0x2201      	ADDWFC      R1, 1 
0x0428	0x0EE5      	MOVLW       _Rspt
0x042A	0x2400      	ADDWF       R0, 0 
0x042C	0x6EE9      	MOVWF       FSR0L 
0x042E	0x0E00      	MOVLW       hi_addr(_Rspt)
0x0430	0x2001      	ADDWFC      R1, 0 
0x0432	0x6EEA      	MOVWF       FSR0H 
0x0434	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;Master.c,236 :: 		for (i=0;i<=(Rsize-5);i++){                       //Rellena la trama de PDU con los datos de interes de la trama de respuesta, es decir, obviando los ultimos 2 bytes de CRC y los 2 de End
0x0438	0x2B4F      	INCF        _i, 1, 1
;Master.c,238 :: 		}
0x043A	0xD7D6      	BRA         L_main35
L_main36:
0x043C	0x0101      	MOVLB       1
;Master.c,240 :: 		CRC16 = ModbusRTU_CRC16(PDU, Rsize-5);            //Calcula el CRC de la trama PDU y la almacena en la variable CRC16
0x043E	0x0E19      	MOVLW       _PDU
0x0440	0x6F69      	MOVWF       FARG_ModbusRTU_CRC16_ptucBuffer, 1
0x0442	0x0E00      	MOVLW       hi_addr(_PDU)
0x0444	0x6F6A      	MOVWF       FARG_ModbusRTU_CRC16_ptucBuffer+1, 1
0x0446	0x0E05      	MOVLW       5
0x0448	0x0100      	MOVLB       0
0x044A	0x5DE4      	SUBWF       _rsize, 0, 1
0x044C	0x0101      	MOVLB       1
0x044E	0x6F6B      	MOVWF       FARG_ModbusRTU_CRC16_uiLen, 1
0x0450	0x6B6C      	CLRF        FARG_ModbusRTU_CRC16_uiLen+1, 1
0x0452	0x0E00      	MOVLW       0
0x0454	0x5B6C      	SUBWFB      FARG_ModbusRTU_CRC16_uiLen+1, 1, 1
0x0456	0xDE35      	RCALL       _ModbusRTU_CRC16
0x0458	0xF150C000  	MOVFF       R0, _CRC16
0x045C	0xF151C001  	MOVFF       R1, _CRC16+1
;Master.c,241 :: 		*ptrCRCPDU = Rspt[Rsize-3];                       //Asigna el elemento CRC_LSB de la trama de respuesta al LSB de la variable CRCPDU
0x0460	0x0E03      	MOVLW       3
0x0462	0x0100      	MOVLB       0
0x0464	0x5DE4      	SUBWF       _rsize, 0, 1
0x0466	0x6E00      	MOVWF       R0 
0x0468	0x6A01      	CLRF        R1 
0x046A	0x0E00      	MOVLW       0
0x046C	0x5A01      	SUBWFB      R1, 1 
0x046E	0x0EE5      	MOVLW       _Rspt
0x0470	0x2400      	ADDWF       R0, 0 
0x0472	0x6EE9      	MOVWF       FSR0L 
0x0474	0x0E00      	MOVLW       hi_addr(_Rspt)
0x0476	0x2001      	ADDWFC      R1, 0 
0x0478	0x6EEA      	MOVWF       FSR0H 
0x047A	0xFFE1C0E2  	MOVFF       _ptrCRCPDU, FSR1L
0x047E	0xFFE2C0E3  	MOVFF       _ptrCRCPDU+1, FSR1H
0x0482	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;Master.c,242 :: 		*(ptrCRCPDU+1) = Rspt[Rsize-4];                   //Asigna el elemento CRC_MSB de la trama de respuesta al MSB de la variable CRCPDU
0x0486	0x0E01      	MOVLW       1
0x0488	0x25E2      	ADDWF       _ptrCRCPDU, 0, 1
0x048A	0x6EE1      	MOVWF       FSR1L 
0x048C	0x0E00      	MOVLW       0
0x048E	0x21E3      	ADDWFC      _ptrCRCPDU+1, 0, 1
0x0490	0x6EE2      	MOVWF       FSR1H 
0x0492	0x0E04      	MOVLW       4
0x0494	0x5DE4      	SUBWF       _rsize, 0, 1
0x0496	0x6E00      	MOVWF       R0 
0x0498	0x6A01      	CLRF        R1 
0x049A	0x0E00      	MOVLW       0
0x049C	0x5A01      	SUBWFB      R1, 1 
0x049E	0x0EE5      	MOVLW       _Rspt
0x04A0	0x2400      	ADDWF       R0, 0 
0x04A2	0x6EE9      	MOVWF       FSR0L 
0x04A4	0x0E00      	MOVLW       hi_addr(_Rspt)
0x04A6	0x2001      	ADDWFC      R1, 0 
0x04A8	0x6EEA      	MOVWF       FSR0H 
0x04AA	0xFFE6CFEE  	MOVFF       POSTINC0, POSTINC1
;Master.c,244 :: 		if (CRC16==CRCPDU) {                              //Verifica si el CRC calculado sea igual al CRC obtenido de la trama de peticion
0x04AE	0x0101      	MOVLB       1
0x04B0	0x5151      	MOVF        _CRC16+1, 0, 1
0x04B2	0x194A      	XORWF       _CRCPDU+1, 0, 1
0x04B4	0xE102      	BNZ         L__main54
0x04B6	0x5149      	MOVF        _CRCPDU, 0, 1
0x04B8	0x1950      	XORWF       _CRC16, 0, 1
L__main54:
0x04BA	0xE10F      	BNZ         L_main38
;Master.c,248 :: 		RC3_bit = 1;
0x04BC	0x8682      	BSF         RC3_bit, BitPos(RC3_bit+0) 
;Master.c,249 :: 		Delay_ms(100);
0x04BE	0x0E02      	MOVLW       2
0x04C0	0x6E0B      	MOVWF       R11, 0
0x04C2	0x0E04      	MOVLW       4
0x04C4	0x6E0C      	MOVWF       R12, 0
0x04C6	0x0EBA      	MOVLW       186
0x04C8	0x6E0D      	MOVWF       R13, 0
L_main39:
0x04CA	0x2E0D      	DECFSZ      R13, 1, 0
0x04CC	0xD7FE      	BRA         L_main39
0x04CE	0x2E0C      	DECFSZ      R12, 1, 0
0x04D0	0xD7FC      	BRA         L_main39
0x04D2	0x2E0B      	DECFSZ      R11, 1, 0
0x04D4	0xD7FA      	BRA         L_main39
0x04D6	0x0000      	NOP
;Master.c,250 :: 		RC3_bit = 0;
0x04D8	0x9682      	BCF         RC3_bit, BitPos(RC3_bit+0) 
;Master.c,251 :: 		}
L_main38:
;Master.c,253 :: 		}
L_main34:
0x04DA	0x0101      	MOVLB       1
;Master.c,255 :: 		BanTC = 0;
0x04DC	0x6B4B      	CLRF        _BanTC, 1
;Master.c,257 :: 		}
L_main33:
;Master.c,259 :: 		Delay_ms(10);
0x04DE	0x0E1A      	MOVLW       26
0x04E0	0x6E0C      	MOVWF       R12, 0
0x04E2	0x0EF8      	MOVLW       248
0x04E4	0x6E0D      	MOVWF       R13, 0
L_main40:
0x04E6	0x2E0D      	DECFSZ      R13, 1, 0
0x04E8	0xD7FE      	BRA         L_main40
0x04EA	0x2E0C      	DECFSZ      R12, 1, 0
0x04EC	0xD7FC      	BRA         L_main40
0x04EE	0x0000      	NOP
;Master.c,261 :: 		}
0x04F0	0xD748      	BRA         L_main26
;Master.c,262 :: 		}
L_end_main:
0x04F2	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [186]    _interrupt
0x00C2     [102]    _ModbusRTU_CRC16
0x0128      [88]    _UART1_Init
0x0180      [14]    _UART1_Write
0x018E      [10]    _UART1_Tx_Idle
0x0198      [86]    _Configuracion
0x01EE      [18]    _UART1_Read
0x0200     [336]    _enviarTrama
0x0350      [16]    ___CC2DW
0x0360     [404]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    UART2_Init_tmp_L0
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    R0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    UART2_Read___tmp_UART2_Read_L0
0x0001       [1]    R1
0x0002       [2]    strlen_cp_L0
0x0002       [1]    R2
0x0002       [2]    memchr_s_L0
0x0002       [1]    ModbusRTU_CRC16_ucCounter_L0
0x0002       [2]    memset_pp_L0
0x0002       [2]    memcpy_dd_L0
0x0003       [2]    ModbusRTU_CRC16_uiCRCResult_L0
0x0003       [1]    R3
0x0003       [2]    Ltrim_original_L0
0x0003       [2]    memmove_tt_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [2]    memcpy_ss_L0
0x0004       [1]    R4
0x0004       [2]    strcat_cp_L0
0x0004       [2]    strncpy_cp_L0
0x0004       [2]    strncat_cp_L0
0x0005       [2]    Ltrim_p_L0
0x0005       [2]    memmove_ff_L0
0x0005       [2]    LongIntToHex_input_half_L0
0x0005       [2]    LongWordToHex_input_half_L0
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0019     [100]    _PDU
0x007D       [1]    _Add
0x007E     [100]    _Ptcn
0x00E2       [2]    _ptrCRCPDU
0x00E4       [1]    _rsize
0x00E5     [100]    _Rspt
0x0149       [2]    _CRCPDU
0x014B       [1]    _BanTC
0x014C       [1]    _BanTF
0x014D       [1]    _Bb
0x014E       [1]    _BanTI
0x014F       [1]    _i
0x0150       [2]    _CRC16
0x0152       [2]    _ptrCRC16
0x0154       [4]    _UART_Rdy_Ptr
0x0158       [4]    _UART_Tx_Idle_Ptr
0x015C       [4]    _UART_Wr_Ptr
0x0160       [4]    _UART_Rd_Ptr
0x0164       [1]    _Dato
0x0165       [1]    _it
0x0166       [1]    FARG_enviarTrama_dataSize
0x0167       [1]    FARG_enviarTrama_fcn
0x0168       [1]    enviarTrama_pSize_L0
0x0169       [2]    FARG_ModbusRTU_CRC16_ptucBuffer
0x0169       [1]    FARG_UART1_Write_data_
0x016B       [2]    FARG_ModbusRTU_CRC16_uiLen
0x0F38       [1]    ANSELA
0x0F39       [1]    ANSELB
0x0F3A       [1]    ANSELC
0x0F80       [1]    PORTA
0x0F82       [0]    RC3_bit
0x0F82       [0]    RC2_bit
0x0F82       [0]    RC5_bit
0x0F82       [0]    RC4_bit
0x0F82       [1]    PORTC
0x0F92       [1]    TRISA
0x0F94       [0]    TRISC1_bit
0x0F94       [0]    TRISC2_bit
0x0F94       [0]    TRISC0_bit
0x0F94       [0]    TRISC6_bit
0x0F94       [0]    TRISC7_bit
0x0F94       [0]    TRISC5_bit
0x0F94       [0]    TRISC3_bit
0x0F94       [0]    TRISC4_bit
0x0F9D       [0]    TMR1IE_bit
0x0F9D       [1]    PIE1
0x0F9E       [1]    PIR1
0x0F9E       [0]    TMR1IF_bit
0x0F9F       [1]    IPR1
0x0FAB       [1]    RCSTA
0x0FAC       [1]    TXSTA
0x0FAD       [1]    TXREG
0x0FAE       [1]    RCREG
0x0FAF       [1]    SPBRG
0x0FB0       [1]    SPBRGH
0x0FB8       [1]    BAUDCON
0x0FCD       [1]    T1CON
0x0FCE       [1]    TMR1L
0x0FCF       [1]    TMR1H
0x0FD0       [1]    RCON
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
