;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 24/1/2019 16:07:15
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2962      	GOTO       354
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00CA      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00C9      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0870      	MOVF       R0, 0
0x000C	0x00A1      	MOVWF      33
0x000D	0x087D      	MOVF       R13, 0
0x000E	0x00A0      	MOVWF      32
;EsclavoSensor.c,82 :: 		void interrupt(){
;EsclavoSensor.c,85 :: 		if (PIR1.SSPIF){
0x000F	0x1D8C      	BTFSS      PIR1, 3
0x0010	0x28EE      	GOTO       L_interrupt1
;EsclavoSensor.c,87 :: 		PIR1.SSPIF = 0;                                   //Limpia la bandera de interrupcion por SPI
0x0011	0x118C      	BCF        PIR1, 3
;EsclavoSensor.c,88 :: 		AUX = 1;
0x0012	0x1586      	BSF        RB3_bit, BitPos(RB3_bit+0)
;EsclavoSensor.c,89 :: 		AUX = 0;
0x0013	0x1186      	BCF        RB3_bit, BitPos(RB3_bit+0)
;EsclavoSensor.c,91 :: 		buffer =  SSPBUF;                                 //Guarda el contenido del bufeer (lectura)
0x0014	0x0813      	MOVF       SSPBUF, 0
0x0015	0x00A9      	MOVWF      _buffer
;EsclavoSensor.c,94 :: 		if ((buffer==0xA0)&&(banEsc==0)){                 //Verifica si el primer byte es la cabecera de solicitud de informacion y si la bandera de escritura esta desactivada
0x0016	0x0829      	MOVF       _buffer, 0
0x0017	0x3AA0      	XORLW      160
0x0018	0x1D03      	BTFSS      STATUS, 2
0x0019	0x2826      	GOTO       L_interrupt4
0x001A	0x0836      	MOVF       _banEsc, 0
0x001B	0x3A00      	XORLW      0
0x001C	0x1D03      	BTFSS      STATUS, 2
0x001D	0x2826      	GOTO       L_interrupt4
L__interrupt58:
;EsclavoSensor.c,95 :: 		banId = 1;                                     //Activa la bandera de escritura de Id
0x001E	0x3001      	MOVLW      1
0x001F	0x00B7      	MOVWF      _banId
;EsclavoSensor.c,96 :: 		SSPBUF = 0xA0;                                 //Guarda en el buffer un valor de cabecera (puede ser cuaquier valor, igual el Maaestro ignora este byte)
0x0020	0x30A0      	MOVLW      160
0x0021	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,97 :: 		Delay_us(50);
0x0022	0x3021      	MOVLW      33
0x0023	0x00FD      	MOVWF      R13
L_interrupt5:
0x0024	0x0BFD      	DECFSZ     R13, 1
0x0025	0x2824      	GOTO       L_interrupt5
;EsclavoSensor.c,98 :: 		}
L_interrupt4:
;EsclavoSensor.c,99 :: 		if ((banId==1)&&(buffer!=0xA5)){     //Envia los bytes de informacion de este esclavo: [IdEsclavo, regEsclavo, funcEsclavo]
0x0026	0x0837      	MOVF       _banId, 0
0x0027	0x3A01      	XORLW      1
0x0028	0x1D03      	BTFSS      STATUS, 2
0x0029	0x2846      	GOTO       L_interrupt8
0x002A	0x0829      	MOVF       _buffer, 0
0x002B	0x3AA5      	XORLW      165
0x002C	0x1903      	BTFSC      STATUS, 2
0x002D	0x2846      	GOTO       L_interrupt8
L__interrupt57:
;EsclavoSensor.c,100 :: 		if (buffer==0xA1){
0x002E	0x0829      	MOVF       _buffer, 0
0x002F	0x3AA1      	XORLW      161
0x0030	0x1D03      	BTFSS      STATUS, 2
0x0031	0x2834      	GOTO       L_interrupt9
;EsclavoSensor.c,101 :: 		SSPBUF = idEsclavo;
0x0032	0x3009      	MOVLW      9
0x0033	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,102 :: 		}
L_interrupt9:
;EsclavoSensor.c,103 :: 		if (buffer==0xA2){
0x0034	0x0829      	MOVF       _buffer, 0
0x0035	0x3AA2      	XORLW      162
0x0036	0x1D03      	BTFSS      STATUS, 2
0x0037	0x283A      	GOTO       L_interrupt10
;EsclavoSensor.c,104 :: 		SSPBUF = funcEsclavo;
0x0038	0x3001      	MOVLW      1
0x0039	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,105 :: 		}
L_interrupt10:
;EsclavoSensor.c,106 :: 		if (buffer==0xA3){
0x003A	0x0829      	MOVF       _buffer, 0
0x003B	0x3AA3      	XORLW      163
0x003C	0x1D03      	BTFSS      STATUS, 2
0x003D	0x2840      	GOTO       L_interrupt11
;EsclavoSensor.c,107 :: 		SSPBUF = regLectura;
0x003E	0x3003      	MOVLW      3
0x003F	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,108 :: 		}
L_interrupt11:
;EsclavoSensor.c,109 :: 		if (buffer==0xA4){
0x0040	0x0829      	MOVF       _buffer, 0
0x0041	0x3AA4      	XORLW      164
0x0042	0x1D03      	BTFSS      STATUS, 2
0x0043	0x2846      	GOTO       L_interrupt12
;EsclavoSensor.c,110 :: 		SSPBUF = regEscritura;
0x0044	0x3003      	MOVLW      3
0x0045	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,111 :: 		}
L_interrupt12:
;EsclavoSensor.c,112 :: 		}
L_interrupt8:
;EsclavoSensor.c,113 :: 		if ((banId==1)&&(buffer==0xA5)){                  //Si detecta el delimitador de final de trama:
0x0046	0x0837      	MOVF       _banId, 0
0x0047	0x3A01      	XORLW      1
0x0048	0x1D03      	BTFSS      STATUS, 2
0x0049	0x2851      	GOTO       L_interrupt15
0x004A	0x0829      	MOVF       _buffer, 0
0x004B	0x3AA5      	XORLW      165
0x004C	0x1D03      	BTFSS      STATUS, 2
0x004D	0x2851      	GOTO       L_interrupt15
L__interrupt56:
;EsclavoSensor.c,114 :: 		banId = 0;                                     //Limpia la bandera de escritura de Id
0x004E	0x01B7      	CLRF       _banId
;EsclavoSensor.c,115 :: 		SSPBUF = 0xB0;                                 //Escribe el buffer el primer valor que se va a embiar cuando se embie la trama de respuesta
0x004F	0x30B0      	MOVLW      176
0x0050	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,116 :: 		}
L_interrupt15:
;EsclavoSensor.c,119 :: 		if ((buffer==0xB0)&&(banEsc==0)){                 //Verifica si el primer byte es la cabecera de datos
0x0051	0x0829      	MOVF       _buffer, 0
0x0052	0x3AB0      	XORLW      176
0x0053	0x1D03      	BTFSS      STATUS, 2
0x0054	0x2861      	GOTO       L_interrupt18
0x0055	0x0836      	MOVF       _banEsc, 0
0x0056	0x3A00      	XORLW      0
0x0057	0x1D03      	BTFSS      STATUS, 2
0x0058	0x2861      	GOTO       L_interrupt18
L__interrupt55:
;EsclavoSensor.c,120 :: 		banLec = 1;                                    //Activa la bandera de lectura
0x0059	0x3001      	MOVLW      1
0x005A	0x00A7      	MOVWF      _banLec
;EsclavoSensor.c,121 :: 		SSPBUF = 0xB0;                                 //Guarda en el buffer un valor de cabecera (puede ser cuaquier valor, igual el Maaestro ignora este byte)
0x005B	0x30B0      	MOVLW      176
0x005C	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,122 :: 		Delay_us(50);
0x005D	0x3021      	MOVLW      33
0x005E	0x00FD      	MOVWF      R13
L_interrupt19:
0x005F	0x0BFD      	DECFSZ     R13, 1
0x0060	0x285F      	GOTO       L_interrupt19
;EsclavoSensor.c,123 :: 		}
L_interrupt18:
;EsclavoSensor.c,124 :: 		if ((banLec==1)&&(buffer!=0xB0)){
0x0061	0x0827      	MOVF       _banLec, 0
0x0062	0x3A01      	XORLW      1
0x0063	0x1D03      	BTFSS      STATUS, 2
0x0064	0x2894      	GOTO       L_interrupt22
0x0065	0x0829      	MOVF       _buffer, 0
0x0066	0x3AB0      	XORLW      176
0x0067	0x1903      	BTFSC      STATUS, 2
0x0068	0x2894      	GOTO       L_interrupt22
L__interrupt54:
;EsclavoSensor.c,125 :: 		registro = buffer;
0x0069	0x0829      	MOVF       _buffer, 0
0x006A	0x00A8      	MOVWF      _registro
;EsclavoSensor.c,130 :: 		switch (registro){
0x006B	0x2883      	GOTO       L_interrupt23
;EsclavoSensor.c,131 :: 		case 0:
L_interrupt25:
;EsclavoSensor.c,132 :: 		numBytesSPI = 0x02;                //Si solicita leer el registro #1 establece que el numero de bytes que va a responder sera 3 (ejemplo), uno de direccion y dos de datos
0x006C	0x3002      	MOVLW      2
0x006D	0x00AA      	MOVWF      _numBytesSPI
;EsclavoSensor.c,133 :: 		SSPBUF = numBytesSPI;              //Escribe la variable numBytesSPI en el buffer para enviarle al Maestro el numero de bytes que le va a responder
0x006E	0x3002      	MOVLW      2
0x006F	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,134 :: 		break;
0x0070	0x2894      	GOTO       L_interrupt24
;EsclavoSensor.c,135 :: 		case 1:
L_interrupt26:
;EsclavoSensor.c,136 :: 		numBytesSPI = 0x02;
0x0071	0x3002      	MOVLW      2
0x0072	0x00AA      	MOVWF      _numBytesSPI
;EsclavoSensor.c,137 :: 		SSPBUF = numBytesSPI;
0x0073	0x3002      	MOVLW      2
0x0074	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,138 :: 		break;
0x0075	0x2894      	GOTO       L_interrupt24
;EsclavoSensor.c,139 :: 		case 2:
L_interrupt27:
;EsclavoSensor.c,140 :: 		numBytesSPI = 0x04;
0x0076	0x3004      	MOVLW      4
0x0077	0x00AA      	MOVWF      _numBytesSPI
;EsclavoSensor.c,141 :: 		SSPBUF = numBytesSPI;
0x0078	0x3004      	MOVLW      4
0x0079	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,142 :: 		break;
0x007A	0x2894      	GOTO       L_interrupt24
;EsclavoSensor.c,143 :: 		case 3:
L_interrupt28:
;EsclavoSensor.c,144 :: 		numBytesSPI = 0x04;
0x007B	0x3004      	MOVLW      4
0x007C	0x00AA      	MOVWF      _numBytesSPI
;EsclavoSensor.c,145 :: 		SSPBUF = numBytesSPI;
0x007D	0x3004      	MOVLW      4
0x007E	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,146 :: 		break;
0x007F	0x2894      	GOTO       L_interrupt24
;EsclavoSensor.c,147 :: 		default:
L_interrupt29:
;EsclavoSensor.c,148 :: 		SSPBUF = 0x01;                     //Si solicita leer un registro inexixtente devuelve una longitud de un solo byte para mandar el mensaje de error
0x0080	0x3001      	MOVLW      1
0x0081	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,149 :: 		}
0x0082	0x2894      	GOTO       L_interrupt24
L_interrupt23:
0x0083	0x0828      	MOVF       _registro, 0
0x0084	0x3A00      	XORLW      0
0x0085	0x1903      	BTFSC      STATUS, 2
0x0086	0x286C      	GOTO       L_interrupt25
0x0087	0x0828      	MOVF       _registro, 0
0x0088	0x3A01      	XORLW      1
0x0089	0x1903      	BTFSC      STATUS, 2
0x008A	0x2871      	GOTO       L_interrupt26
0x008B	0x0828      	MOVF       _registro, 0
0x008C	0x3A02      	XORLW      2
0x008D	0x1903      	BTFSC      STATUS, 2
0x008E	0x2876      	GOTO       L_interrupt27
0x008F	0x0828      	MOVF       _registro, 0
0x0090	0x3A03      	XORLW      3
0x0091	0x1903      	BTFSC      STATUS, 2
0x0092	0x287B      	GOTO       L_interrupt28
0x0093	0x2880      	GOTO       L_interrupt29
L_interrupt24:
;EsclavoSensor.c,150 :: 		}
L_interrupt22:
;EsclavoSensor.c,151 :: 		if ((banLec==1)&&(buffer==0xB1)){                 //Si detecta el delimitador de final de trama:
0x0094	0x0827      	MOVF       _banLec, 0
0x0095	0x3A01      	XORLW      1
0x0096	0x1D03      	BTFSS      STATUS, 2
0x0097	0x28A2      	GOTO       L_interrupt32
0x0098	0x0829      	MOVF       _buffer, 0
0x0099	0x3AB1      	XORLW      177
0x009A	0x1D03      	BTFSS      STATUS, 2
0x009B	0x28A2      	GOTO       L_interrupt32
L__interrupt53:
;EsclavoSensor.c,152 :: 		banPet = 1;                                    //Activa la bandera de peticion
0x009C	0x3001      	MOVLW      1
0x009D	0x00A4      	MOVWF      _banPet
;EsclavoSensor.c,153 :: 		banLec = 0;                                    //Limpia la bandera de medicion
0x009E	0x01A7      	CLRF       _banLec
;EsclavoSensor.c,154 :: 		banResp = 0;                                   //Limpia la bandera de peticion. **Esto parece no ser necesario pero quiero asegurarme de que no entre al siguiente if sin antes pasar por el bucle
0x009F	0x01A6      	CLRF       _banResp
;EsclavoSensor.c,155 :: 		SSPBUF = 0xC0;                                 //Escribe el buffer el primer valor que se va a embiar cuando se embie la trama de respuesta
0x00A0	0x30C0      	MOVLW      192
0x00A1	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,156 :: 		}
L_interrupt32:
;EsclavoSensor.c,159 :: 		if (banResp==1){                                  //Verifica que la bandera de respuesta este activa
0x00A2	0x0826      	MOVF       _banResp, 0
0x00A3	0x3A01      	XORLW      1
0x00A4	0x1D03      	BTFSS      STATUS, 2
0x00A5	0x28B0      	GOTO       L_interrupt33
;EsclavoSensor.c,160 :: 		if (i<numBytesSPI){
0x00A6	0x082A      	MOVF       _numBytesSPI, 0
0x00A7	0x0223      	SUBWF      _i, 0
0x00A8	0x1803      	BTFSC      STATUS, 0
0x00A9	0x28B0      	GOTO       L_interrupt34
;EsclavoSensor.c,161 :: 		SSPBUF = resSPI[i];
0x00AA	0x0823      	MOVF       _i, 0
0x00AB	0x3E39      	ADDLW      _resSPI
0x00AC	0x0084      	MOVWF      FSR
0x00AD	0x0800      	MOVF       INDF, 0
0x00AE	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,162 :: 		i++;
0x00AF	0x0AA3      	INCF       _i, 1
;EsclavoSensor.c,163 :: 		}
L_interrupt34:
;EsclavoSensor.c,164 :: 		}
L_interrupt33:
;EsclavoSensor.c,167 :: 		if ((buffer==0xD0)&&(banEsc==0)){                 //Verifica si el primer byte es la cabecera de datos y si la bandera de escritura esta desactivada
0x00B0	0x0829      	MOVF       _buffer, 0
0x00B1	0x3AD0      	XORLW      208
0x00B2	0x1D03      	BTFSS      STATUS, 2
0x00B3	0x28BB      	GOTO       L_interrupt37
0x00B4	0x0836      	MOVF       _banEsc, 0
0x00B5	0x3A00      	XORLW      0
0x00B6	0x1D03      	BTFSS      STATUS, 2
0x00B7	0x28BB      	GOTO       L_interrupt37
L__interrupt52:
;EsclavoSensor.c,168 :: 		banEsc = 1;                                    //Activa la bandera de escritura de Id
0x00B8	0x3001      	MOVLW      1
0x00B9	0x00B6      	MOVWF      _banEsc
;EsclavoSensor.c,169 :: 		j=0;
0x00BA	0x01B5      	CLRF       _j
;EsclavoSensor.c,170 :: 		}
L_interrupt37:
;EsclavoSensor.c,171 :: 		if ((banEsc==1)&&(buffer!=0xD0)){
0x00BB	0x0836      	MOVF       _banEsc, 0
0x00BC	0x3A01      	XORLW      1
0x00BD	0x1D03      	BTFSS      STATUS, 2
0x00BE	0x28EE      	GOTO       L_interrupt40
0x00BF	0x0829      	MOVF       _buffer, 0
0x00C0	0x3AD0      	XORLW      208
0x00C1	0x1903      	BTFSC      STATUS, 2
0x00C2	0x28EE      	GOTO       L_interrupt40
L__interrupt51:
;EsclavoSensor.c,172 :: 		datosEscritura[j] = buffer;                    //Guarda en el vector el registro que se quiere escribir y los datos correspondientes
0x00C3	0x0835      	MOVF       _j, 0
0x00C4	0x3E2B      	ADDLW      _datosEscritura
0x00C5	0x0084      	MOVWF      FSR
0x00C6	0x0829      	MOVF       _buffer, 0
0x00C7	0x0080      	MOVWF      INDF
;EsclavoSensor.c,173 :: 		if (j>1){
0x00C8	0x0835      	MOVF       _j, 0
0x00C9	0x3C01      	SUBLW      1
0x00CA	0x1803      	BTFSC      STATUS, 0
0x00CB	0x28ED      	GOTO       L_interrupt41
;EsclavoSensor.c,174 :: 		regEsc = datosEscritura[1];                 //Guarda en la variable el valor del registro que se quiere escribir
0x00CC	0x082C      	MOVF       _datosEscritura+1, 0
0x00CD	0x00C8      	MOVWF      _regEsc
;EsclavoSensor.c,175 :: 		numDatosEsc = datosEscritura[1];            //Si el subindice es mayor a 1 guarda en la variable numDatosEsc el valor del numero de datos que se desea escribir en el registro
0x00CE	0x082C      	MOVF       _datosEscritura+1, 0
0x00CF	0x00B8      	MOVWF      _numDatosEsc
;EsclavoSensor.c,176 :: 		if ((j-1)==numDatosEsc){
0x00D0	0x3001      	MOVLW      1
0x00D1	0x0235      	SUBWF      _j, 0
0x00D2	0x00F1      	MOVWF      R1
0x00D3	0x01F2      	CLRF       R1+1
0x00D4	0x1C03      	BTFSS      STATUS, 0
0x00D5	0x03F2      	DECF       R1+1, 1
0x00D6	0x3000      	MOVLW      0
0x00D7	0x0672      	XORWF      R1+1, 0
0x00D8	0x1D03      	BTFSS      STATUS, 2
0x00D9	0x28DC      	GOTO       L__interrupt62
0x00DA	0x082C      	MOVF       _datosEscritura+1, 0
0x00DB	0x0671      	XORWF      R1, 0
L__interrupt62:
0x00DC	0x1D03      	BTFSS      STATUS, 2
0x00DD	0x28ED      	GOTO       L_interrupt42
;EsclavoSensor.c,177 :: 		banEsc = 0;
0x00DE	0x01B6      	CLRF       _banEsc
;EsclavoSensor.c,178 :: 		numDatosEsc = 0;
0x00DF	0x01B8      	CLRF       _numDatosEsc
;EsclavoSensor.c,179 :: 		for (x=0;x<6;x++){
0x00E0	0x01A2      	CLRF       _x
L_interrupt43:
0x00E1	0x3006      	MOVLW      6
0x00E2	0x0222      	SUBWF      _x, 0
0x00E3	0x1803      	BTFSC      STATUS, 0
0x00E4	0x28ED      	GOTO       L_interrupt44
;EsclavoSensor.c,180 :: 		UART1_Write(datosEscritura[x]);
0x00E5	0x0822      	MOVF       _x, 0
0x00E6	0x3E2B      	ADDLW      _datosEscritura
0x00E7	0x0084      	MOVWF      FSR
0x00E8	0x0800      	MOVF       INDF, 0
0x00E9	0x00D1      	MOVWF      FARG_UART1_Write_data_
0x00EA	0x2158      	CALL       _UART1_Write
;EsclavoSensor.c,179 :: 		for (x=0;x<6;x++){
0x00EB	0x0AA2      	INCF       _x, 1
;EsclavoSensor.c,181 :: 		}
0x00EC	0x28E1      	GOTO       L_interrupt43
L_interrupt44:
;EsclavoSensor.c,182 :: 		}
L_interrupt42:
;EsclavoSensor.c,183 :: 		}
L_interrupt41:
;EsclavoSensor.c,184 :: 		j++;
0x00ED	0x0AB5      	INCF       _j, 1
;EsclavoSensor.c,185 :: 		}
L_interrupt40:
;EsclavoSensor.c,187 :: 		}
L_interrupt1:
;EsclavoSensor.c,189 :: 		}
L_end_interrupt:
L__interrupt61:
0x00EE	0x0821      	MOVF       33, 0
0x00EF	0x00F0      	MOVWF      R0
0x00F0	0x0820      	MOVF       32, 0
0x00F1	0x00FD      	MOVWF      R13
0x00F2	0x0849      	MOVF       ___savePCLATH, 0
0x00F3	0x008A      	MOVWF      PCLATH
0x00F4	0x0E4A      	SWAPF      ___saveSTATUS, 0
0x00F5	0x0083      	MOVWF      STATUS
0x00F6	0x0EFF      	SWAPF      R15, 1
0x00F7	0x0E7F      	SWAPF      R15, 0
0x00F8	0x0009      	RETFIE
; end of _interrupt
_UART1_Init:
;__Lib_UART_c67.c,2 :: 		
;__Lib_UART_c67.c,5 :: 		
0x00F9	0x1683      	BSF        STATUS, 5
0x00FA	0x1303      	BCF        STATUS, 6
0x00FB	0x1698      	BSF        TXSTA, 5
;__Lib_UART_c67.c,6 :: 		
0x00FC	0x3090      	MOVLW      144
0x00FD	0x1283      	BCF        STATUS, 5
0x00FE	0x0098      	MOVWF      RCSTA
;__Lib_UART_c67.c,7 :: 		
0x00FF	0x1683      	BSF        STATUS, 5
0x0100	0x1787      	BSF        TRISC7_bit, BitPos(TRISC7_bit+0)
;__Lib_UART_c67.c,8 :: 		
0x0101	0x1307      	BCF        TRISC6_bit, BitPos(TRISC6_bit+0)
;__Lib_UART_c67.c,10 :: 		
L_UART1_Init0:
0x0102	0x1283      	BCF        STATUS, 5
0x0103	0x1E8C      	BTFSS      PIR1, 5
0x0104	0x2908      	GOTO       L_UART1_Init1
;__Lib_UART_c67.c,11 :: 		
0x0105	0x081A      	MOVF       RCREG, 0
0x0106	0x00F0      	MOVWF      R0
0x0107	0x2902      	GOTO       L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c67.c,12 :: 		
L_end_UART1_Init:
0x0108	0x0008      	RETURN
; end of _UART1_Init
_SPI1_Init_Advanced:
;__Lib_SPI_c345.c,31 :: 		
;__Lib_SPI_c345.c,33 :: 		
0x0109	0x1683      	BSF        STATUS, 5
0x010A	0x1303      	BCF        STATUS, 6
0x010B	0x1287      	BCF        TRISC5_bit, BitPos(TRISC5_bit+0)
;__Lib_SPI_c345.c,34 :: 		
0x010C	0x1283      	BCF        STATUS, 5
0x010D	0x084D      	MOVF       FARG_SPI1_Init_Advanced_master, 0
0x010E	0x3A04      	XORLW      4
0x010F	0x1D03      	BTFSS      STATUS, 2
0x0110	0x2914      	GOTO       L_SPI1_Init_Advanced0
0x0111	0x1683      	BSF        STATUS, 5
0x0112	0x1587      	BSF        TRISC3_bit, BitPos(TRISC3_bit+0)
0x0113	0x2916      	GOTO       L_SPI1_Init_Advanced1
L_SPI1_Init_Advanced0:
0x0114	0x1683      	BSF        STATUS, 5
;__Lib_SPI_c345.c,35 :: 		
0x0115	0x1187      	BCF        TRISC3_bit, BitPos(TRISC3_bit+0)
L_SPI1_Init_Advanced1:
;__Lib_SPI_c345.c,36 :: 		
0x0116	0x1607      	BSF        TRISC4_bit, BitPos(TRISC4_bit+0)
;__Lib_SPI_c345.c,38 :: 		
0x0117	0x1283      	BCF        STATUS, 5
0x0118	0x0194      	CLRF       SSPCON
;__Lib_SPI_c345.c,39 :: 		
0x0119	0x084D      	MOVF       FARG_SPI1_Init_Advanced_master, 0
0x011A	0x0494      	IORWF      SSPCON, 1
;__Lib_SPI_c345.c,40 :: 		
0x011B	0x084F      	MOVF       FARG_SPI1_Init_Advanced_clock_idle, 0
0x011C	0x0494      	IORWF      SSPCON, 1
;__Lib_SPI_c345.c,41 :: 		
0x011D	0x084E      	MOVF       FARG_SPI1_Init_Advanced_data_sample, 0
0x011E	0x1683      	BSF        STATUS, 5
0x011F	0x0494      	IORWF      SSPSTAT, 1
;__Lib_SPI_c345.c,43 :: 		
0x0120	0x1283      	BCF        STATUS, 5
0x0121	0x084F      	MOVF       FARG_SPI1_Init_Advanced_clock_idle, 0
0x0122	0x1903      	BTFSC      STATUS, 2
0x0123	0x292B      	GOTO       L_SPI1_Init_Advanced2
;__Lib_SPI_c345.c,44 :: 		
0x0124	0x0850      	MOVF       FARG_SPI1_Init_Advanced_transmit_edge, 0
0x0125	0x3A00      	XORLW      0
0x0126	0x1D03      	BTFSS      STATUS, 2
0x0127	0x292A      	GOTO       L_SPI1_Init_Advanced3
;__Lib_SPI_c345.c,45 :: 		
0x0128	0x1683      	BSF        STATUS, 5
0x0129	0x1714      	BSF        SSPSTAT, 6
L_SPI1_Init_Advanced3:
;__Lib_SPI_c345.c,46 :: 		
0x012A	0x2931      	GOTO       L_SPI1_Init_Advanced4
L_SPI1_Init_Advanced2:
;__Lib_SPI_c345.c,48 :: 		
0x012B	0x1283      	BCF        STATUS, 5
0x012C	0x0850      	MOVF       FARG_SPI1_Init_Advanced_transmit_edge, 0
0x012D	0x1903      	BTFSC      STATUS, 2
0x012E	0x2931      	GOTO       L_SPI1_Init_Advanced5
;__Lib_SPI_c345.c,49 :: 		
0x012F	0x1683      	BSF        STATUS, 5
0x0130	0x1714      	BSF        SSPSTAT, 6
L_SPI1_Init_Advanced5:
;__Lib_SPI_c345.c,50 :: 		
L_SPI1_Init_Advanced4:
;__Lib_SPI_c345.c,51 :: 		
0x0131	0x1283      	BCF        STATUS, 5
0x0132	0x1694      	BSF        SSPCON, 5
;__Lib_SPI_c345.c,52 :: 		
L_end_SPI1_Init_Advanced:
0x0133	0x0008      	RETURN
; end of _SPI1_Init_Advanced
_ConfiguracionPrincipal:
;EsclavoSensor.c,56 :: 		void ConfiguracionPrincipal(){
;EsclavoSensor.c,58 :: 		TRISC2_bit = 0;
0x0134	0x1683      	BSF        STATUS, 5
0x0135	0x1303      	BCF        STATUS, 6
0x0136	0x1107      	BCF        TRISC2_bit, BitPos(TRISC2_bit+0)
;EsclavoSensor.c,59 :: 		TRISB3_bit = 0;
0x0137	0x1186      	BCF        TRISB3_bit, BitPos(TRISB3_bit+0)
;EsclavoSensor.c,60 :: 		TRISA5_bit = 1;
0x0138	0x1685      	BSF        TRISA5_bit, BitPos(TRISA5_bit+0)
;EsclavoSensor.c,62 :: 		INTCON.GIE = 1;                                    //Habilita las interrupciones globales
0x0139	0x178B      	BSF        INTCON, 7
;EsclavoSensor.c,63 :: 		INTCON.PEIE = 1;                                   //Habilita las interrupciones perifericas
0x013A	0x170B      	BSF        INTCON, 6
;EsclavoSensor.c,66 :: 		SPI1_Init_Advanced(_SPI_SLAVE_SS_ENABLE,_SPI_DATA_SAMPLE_MIDDLE,_SPI_CLK_IDLE_HIGH,_SPI_LOW_2_HIGH);
0x013B	0x3004      	MOVLW      4
0x013C	0x1283      	BCF        STATUS, 5
0x013D	0x00CD      	MOVWF      FARG_SPI1_Init_Advanced_master
0x013E	0x01CE      	CLRF       FARG_SPI1_Init_Advanced_data_sample
0x013F	0x3010      	MOVLW      16
0x0140	0x00CF      	MOVWF      FARG_SPI1_Init_Advanced_clock_idle
0x0141	0x3001      	MOVLW      1
0x0142	0x00D0      	MOVWF      FARG_SPI1_Init_Advanced_transmit_edge
0x0143	0x2109      	CALL       _SPI1_Init_Advanced
;EsclavoSensor.c,67 :: 		PIE1.SSPIE = 1;                                    //Habilita la interrupcion por SPI
0x0144	0x1683      	BSF        STATUS, 5
0x0145	0x158C      	BSF        PIE1, 3
;EsclavoSensor.c,69 :: 		UART1_Init(19200);
0x0146	0x3019      	MOVLW      25
0x0147	0x0099      	MOVWF      SPBRG
0x0148	0x1518      	BSF        TXSTA, 2
0x0149	0x20F9      	CALL       _UART1_Init
;EsclavoSensor.c,71 :: 		Delay_ms(100);                                     //Espera hasta que se estabilicen los cambios
0x014A	0x3002      	MOVLW      2
0x014B	0x00FB      	MOVWF      R11
0x014C	0x3004      	MOVLW      4
0x014D	0x00FC      	MOVWF      R12
0x014E	0x30BA      	MOVLW      186
0x014F	0x00FD      	MOVWF      R13
L_ConfiguracionPrincipal0:
0x0150	0x0BFD      	DECFSZ     R13, 1
0x0151	0x2950      	GOTO       L_ConfiguracionPrincipal0
0x0152	0x0BFC      	DECFSZ     R12, 1
0x0153	0x2950      	GOTO       L_ConfiguracionPrincipal0
0x0154	0x0BFB      	DECFSZ     R11, 1
0x0155	0x2950      	GOTO       L_ConfiguracionPrincipal0
0x0156	0x0000      	NOP
;EsclavoSensor.c,73 :: 		}
L_end_ConfiguracionPrincipal:
0x0157	0x0008      	RETURN
; end of _ConfiguracionPrincipal
_UART1_Write:
;__Lib_UART_c67.c,39 :: 		
;__Lib_UART_c67.c,40 :: 		
L_UART1_Write3:
0x0158	0x1683      	BSF        STATUS, 5
0x0159	0x1303      	BCF        STATUS, 6
0x015A	0x1898      	BTFSC      TXSTA, 1
0x015B	0x295E      	GOTO       L_UART1_Write4
;__Lib_UART_c67.c,41 :: 		
0x015C	0x0000      	NOP
0x015D	0x2958      	GOTO       L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67.c,42 :: 		
0x015E	0x1283      	BCF        STATUS, 5
0x015F	0x0851      	MOVF       FARG_UART1_Write_data_, 0
0x0160	0x0099      	MOVWF      TXREG
;__Lib_UART_c67.c,43 :: 		
L_end_UART1_Write:
0x0161	0x0008      	RETURN
; end of _UART1_Write
_main:
;EsclavoSensor.c,192 :: 		void main() {
;EsclavoSensor.c,194 :: 		ConfiguracionPrincipal();
0x0162	0x2134      	CALL       _ConfiguracionPrincipal
;EsclavoSensor.c,195 :: 		ECINT = 1;                                       //Se inicializa el pin ECINT en alto para evitar que envie un pulso al iniciar (probablemente ocacionado por el CCP)
0x0163	0x1507      	BSF        RC2_bit, BitPos(RC2_bit+0)
;EsclavoSensor.c,196 :: 		AUX = 0;
0x0164	0x1186      	BCF        RB3_bit, BitPos(RB3_bit+0)
;EsclavoSensor.c,197 :: 		i = 0;
0x0165	0x01A3      	CLRF       _i
;EsclavoSensor.c,198 :: 		x = 0;
0x0166	0x01A2      	CLRF       _x
;EsclavoSensor.c,199 :: 		banPet = 0;
0x0167	0x01A4      	CLRF       _banPet
;EsclavoSensor.c,200 :: 		banResp = 0;
0x0168	0x01A6      	CLRF       _banResp
;EsclavoSensor.c,201 :: 		banSPI = 0;
0x0169	0x01A5      	CLRF       _banSPI
;EsclavoSensor.c,202 :: 		banLec = 0;
0x016A	0x01A7      	CLRF       _banLec
;EsclavoSensor.c,203 :: 		banId = 0;
0x016B	0x01B7      	CLRF       _banId
;EsclavoSensor.c,204 :: 		banEsc = 0;
0x016C	0x01B6      	CLRF       _banEsc
;EsclavoSensor.c,207 :: 		SSPBUF = 0xA0;                                   //Carga un valor inicial en el buffer
0x016D	0x30A0      	MOVLW      160
0x016E	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,208 :: 		numDatosEsc = 0;
0x016F	0x01B8      	CLRF       _numDatosEsc
;EsclavoSensor.c,209 :: 		regEsc = 0;
0x0170	0x01C8      	CLRF       _regEsc
;EsclavoSensor.c,211 :: 		while(1){
L_main46:
;EsclavoSensor.c,213 :: 		if (banPet==1){                             //Verifica si se ha recibido una solicitud de medicion
0x0171	0x0824      	MOVF       _banPet, 0
0x0172	0x3A01      	XORLW      1
0x0173	0x1D03      	BTFSS      STATUS, 2
0x0174	0x299B      	GOTO       L_main48
;EsclavoSensor.c,215 :: 		Delay_ms(1000);                          //Simula un tiempo de procesamiento de la peticion
0x0175	0x300B      	MOVLW      11
0x0176	0x00FB      	MOVWF      R11
0x0177	0x3026      	MOVLW      38
0x0178	0x00FC      	MOVWF      R12
0x0179	0x305D      	MOVLW      93
0x017A	0x00FD      	MOVWF      R13
L_main49:
0x017B	0x0BFD      	DECFSZ     R13, 1
0x017C	0x297B      	GOTO       L_main49
0x017D	0x0BFC      	DECFSZ     R12, 1
0x017E	0x297B      	GOTO       L_main49
0x017F	0x0BFB      	DECFSZ     R11, 1
0x0180	0x297B      	GOTO       L_main49
0x0181	0x0000      	NOP
0x0182	0x0000      	NOP
;EsclavoSensor.c,216 :: 		resSPI[0] = 0x83;                        //Llena el vector de respuesta con un valor de ejemplo (float 27.07)
0x0183	0x3083      	MOVLW      131
0x0184	0x00B9      	MOVWF      _resSPI
;EsclavoSensor.c,217 :: 		resSPI[1] = 0x58;
0x0185	0x3058      	MOVLW      88
0x0186	0x00BA      	MOVWF      _resSPI+1
;EsclavoSensor.c,218 :: 		resSPI[2] = 0x8F;
0x0187	0x308F      	MOVLW      143
0x0188	0x00BB      	MOVWF      _resSPI+2
;EsclavoSensor.c,219 :: 		resSPI[3] = 0x5C;
0x0189	0x305C      	MOVLW      92
0x018A	0x00BC      	MOVWF      _resSPI+3
;EsclavoSensor.c,220 :: 		i=0;
0x018B	0x01A3      	CLRF       _i
;EsclavoSensor.c,222 :: 		ECINT = 0;                               //Genera un pulso en bajo para producir una interrupcion externa en el Master
0x018C	0x1107      	BCF        RC2_bit, BitPos(RC2_bit+0)
;EsclavoSensor.c,223 :: 		Delay_ms(1);
0x018D	0x3003      	MOVLW      3
0x018E	0x00FC      	MOVWF      R12
0x018F	0x3097      	MOVLW      151
0x0190	0x00FD      	MOVWF      R13
L_main50:
0x0191	0x0BFD      	DECFSZ     R13, 1
0x0192	0x2991      	GOTO       L_main50
0x0193	0x0BFC      	DECFSZ     R12, 1
0x0194	0x2991      	GOTO       L_main50
0x0195	0x0000      	NOP
0x0196	0x0000      	NOP
;EsclavoSensor.c,224 :: 		ECINT = 1;
0x0197	0x1507      	BSF        RC2_bit, BitPos(RC2_bit+0)
;EsclavoSensor.c,225 :: 		banPet = 0;                              //Limpia la bandera de peticion SPI
0x0198	0x01A4      	CLRF       _banPet
;EsclavoSensor.c,226 :: 		banResp = 1;                             //Activa la bandera de respuesta SPI
0x0199	0x3001      	MOVLW      1
0x019A	0x00A6      	MOVWF      _banResp
;EsclavoSensor.c,228 :: 		}
L_main48:
;EsclavoSensor.c,230 :: 		}
0x019B	0x2971      	GOTO       L_main46
;EsclavoSensor.c,232 :: 		}
L_end_main:
0x019C	0x299C      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004     [245]    _interrupt
0x00F9      [16]    _UART1_Init
0x0109      [43]    _SPI1_Init_Advanced
0x0134      [36]    _ConfiguracionPrincipal
0x0158      [10]    _UART1_Write
0x0162      [59]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0006       [0]    RB3_bit
0x0006       [0]    AUX
0x0007       [0]    RC2_bit
0x0007       [0]    ECINT
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000C       [1]    PIR1
0x0013       [1]    SSPBUF
0x0014       [1]    SSPCON
0x0018       [1]    RCSTA
0x0019       [1]    TXREG
0x001A       [1]    RCREG
0x0022       [1]    _x
0x0023       [1]    _i
0x0024       [1]    _banPet
0x0025       [1]    _banSPI
0x0026       [1]    _banResp
0x0027       [1]    _banLec
0x0028       [1]    _registro
0x0029       [1]    _buffer
0x002A       [1]    _numBytesSPI
0x002B      [10]    _datosEscritura
0x0035       [1]    _j
0x0036       [1]    _banEsc
0x0037       [1]    _banId
0x0038       [1]    _numDatosEsc
0x0039      [15]    _resSPI
0x0048       [1]    _regEsc
0x0049       [1]    ___savePCLATH
0x004A       [1]    ___saveSTATUS
0x004B       [2]    ___DoICPAddr
0x004D       [1]    FARG_SPI1_Init_Advanced_master
0x004E       [1]    FARG_SPI1_Init_Advanced_data_sample
0x004F       [1]    FARG_SPI1_Init_Advanced_clock_idle
0x0050       [1]    FARG_SPI1_Init_Advanced_transmit_edge
0x0051       [1]    FARG_UART1_Write_data_
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0085       [0]    TRISA5_bit
0x0086       [0]    TRISB3_bit
0x0087       [0]    TRISC3_bit
0x0087       [0]    TRISC2_bit
0x0087       [0]    TRISC5_bit
0x0087       [0]    TRISC6_bit
0x0087       [0]    TRISC4_bit
0x0087       [0]    TRISC7_bit
0x008C       [1]    PIE1
0x0094       [1]    SSPSTAT
0x0098       [1]    TXSTA
0x0099       [1]    SPBRG
