;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 5/12/2018 9:55:20
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x28D8      	GOTO       216
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00BD      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00BE      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0870      	MOVF       R0, 0
0x000C	0x00A1      	MOVWF      33
0x000D	0x087D      	MOVF       R13, 0
0x000E	0x00A0      	MOVWF      32
;EsclavoSensor.c,61 :: 		void interrupt(){
;EsclavoSensor.c,64 :: 		if (PIR1.SSPIF){
0x000F	0x1D8C      	BTFSS      PIR1, 3
0x0010	0x2882      	GOTO       L_interrupt1
;EsclavoSensor.c,66 :: 		PIR1.SSPIF = 0;                                   //Limpia la bandera de interrupcion por SPI
0x0011	0x118C      	BCF        PIR1, 3
;EsclavoSensor.c,67 :: 		AUX = 1;
0x0012	0x1586      	BSF        RB3_bit, BitPos(RB3_bit+0)
;EsclavoSensor.c,68 :: 		AUX = 0;
0x0013	0x1186      	BCF        RB3_bit, BitPos(RB3_bit+0)
;EsclavoSensor.c,70 :: 		buffer =  SSPBUF;                                 //Guarda el contenido del bufeer (lectura)
0x0014	0x0813      	MOVF       SSPBUF, 0
0x0015	0x00B7      	MOVWF      _buffer
;EsclavoSensor.c,73 :: 		if (buffer==0xA0){                                //Verifica si el primer byte es la cabecera de datos
0x0016	0x0837      	MOVF       _buffer, 0
0x0017	0x3AA0      	XORLW      160
0x0018	0x1D03      	BTFSS      STATUS, 2
0x0019	0x2822      	GOTO       L_interrupt2
;EsclavoSensor.c,74 :: 		banId = 1;                                     //Activa la bandera de escritura de Id
0x001A	0x3001      	MOVLW      1
0x001B	0x00A2      	MOVWF      _banId
;EsclavoSensor.c,75 :: 		SSPBUF = 0xA0;                                 //Guarda en el buffer un valor de cabecera (puede ser cuaquier valor, igual el Maaestro ignora este byte)
0x001C	0x30A0      	MOVLW      160
0x001D	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,76 :: 		Delay_us(50);
0x001E	0x3021      	MOVLW      33
0x001F	0x00FD      	MOVWF      R13
L_interrupt3:
0x0020	0x0BFD      	DECFSZ     R13, 1
0x0021	0x2820      	GOTO       L_interrupt3
;EsclavoSensor.c,77 :: 		}
L_interrupt2:
;EsclavoSensor.c,78 :: 		if ((banId==1)&&(buffer!=0xA3)){                  //Envia los bytes de informacion de este esclavo: [IdEsclavo, regEsclavo, funcEsclavo]
0x0022	0x0822      	MOVF       _banId, 0
0x0023	0x3A01      	XORLW      1
0x0024	0x1D03      	BTFSS      STATUS, 2
0x0025	0x2836      	GOTO       L_interrupt6
0x0026	0x0837      	MOVF       _buffer, 0
0x0027	0x3AA3      	XORLW      163
0x0028	0x1903      	BTFSC      STATUS, 2
0x0029	0x2836      	GOTO       L_interrupt6
L__interrupt29:
;EsclavoSensor.c,79 :: 		if (buffer==0xA1){
0x002A	0x0837      	MOVF       _buffer, 0
0x002B	0x3AA1      	XORLW      161
0x002C	0x1D03      	BTFSS      STATUS, 2
0x002D	0x2830      	GOTO       L_interrupt7
;EsclavoSensor.c,80 :: 		SSPBUF = idEsclavo;
0x002E	0x3009      	MOVLW      9
0x002F	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,81 :: 		}
L_interrupt7:
;EsclavoSensor.c,82 :: 		if (buffer==0xA2){
0x0030	0x0837      	MOVF       _buffer, 0
0x0031	0x3AA2      	XORLW      162
0x0032	0x1D03      	BTFSS      STATUS, 2
0x0033	0x2836      	GOTO       L_interrupt8
;EsclavoSensor.c,83 :: 		SSPBUF = funcEsclavo;
0x0034	0x3003      	MOVLW      3
0x0035	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,84 :: 		}
L_interrupt8:
;EsclavoSensor.c,85 :: 		}
L_interrupt6:
;EsclavoSensor.c,86 :: 		if (buffer==0xA3){                                //Si detecta el delimitador de final de trama:
0x0036	0x0837      	MOVF       _buffer, 0
0x0037	0x3AA3      	XORLW      163
0x0038	0x1D03      	BTFSS      STATUS, 2
0x0039	0x283D      	GOTO       L_interrupt9
;EsclavoSensor.c,87 :: 		banId = 0;                                     //Limpia la bandera de escritura de Id
0x003A	0x01A2      	CLRF       _banId
;EsclavoSensor.c,88 :: 		SSPBUF = 0xB0;                                 //Escribe el buffer el primer valor que se va a embiar cuando se embie la trama de respuesta
0x003B	0x30B0      	MOVLW      176
0x003C	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,89 :: 		}
L_interrupt9:
;EsclavoSensor.c,92 :: 		if (buffer==0xB0){                                //Verifica si el primer byte es la cabecera de datos
0x003D	0x0837      	MOVF       _buffer, 0
0x003E	0x3AB0      	XORLW      176
0x003F	0x1D03      	BTFSS      STATUS, 2
0x0040	0x2849      	GOTO       L_interrupt10
;EsclavoSensor.c,93 :: 		banMed = 1;
0x0041	0x3001      	MOVLW      1
0x0042	0x00B5      	MOVWF      _banMed
;EsclavoSensor.c,94 :: 		SSPBUF = 0xB0;                                 //Guarda en el buffer un valor de cabecera (puede ser cuaquier valor, igual el Maaestro ignora este byte)
0x0043	0x30B0      	MOVLW      176
0x0044	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,95 :: 		Delay_us(50);
0x0045	0x3021      	MOVLW      33
0x0046	0x00FD      	MOVWF      R13
L_interrupt11:
0x0047	0x0BFD      	DECFSZ     R13, 1
0x0048	0x2847      	GOTO       L_interrupt11
;EsclavoSensor.c,96 :: 		}
L_interrupt10:
;EsclavoSensor.c,97 :: 		if ((banMed==1)&&(buffer!=0xB0)){
0x0049	0x0835      	MOVF       _banMed, 0
0x004A	0x3A01      	XORLW      1
0x004B	0x1D03      	BTFSS      STATUS, 2
0x004C	0x286A      	GOTO       L_interrupt14
0x004D	0x0837      	MOVF       _buffer, 0
0x004E	0x3AB0      	XORLW      176
0x004F	0x1903      	BTFSC      STATUS, 2
0x0050	0x286A      	GOTO       L_interrupt14
L__interrupt28:
;EsclavoSensor.c,98 :: 		registro = buffer;
0x0051	0x0837      	MOVF       _buffer, 0
0x0052	0x00B6      	MOVWF      _registro
;EsclavoSensor.c,102 :: 		switch (registro){
0x0053	0x2861      	GOTO       L_interrupt15
;EsclavoSensor.c,103 :: 		case 0:
L_interrupt17:
;EsclavoSensor.c,104 :: 		numBytesSPI = 0x02;                //Si solicita leer el registro #1 establece que el numero de bytes que va a responder sera 3 (ejemplo), uno de direccion y dos de datos
0x0054	0x3002      	MOVLW      2
0x0055	0x00B2      	MOVWF      _numBytesSPI
;EsclavoSensor.c,105 :: 		SSPBUF = numBytesSPI;              //Escribe la variable numBytesSPI en el buffer para enviarle al Maestro el numero de bytes que le va a responder
0x0056	0x3002      	MOVLW      2
0x0057	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,106 :: 		break;
0x0058	0x286A      	GOTO       L_interrupt16
;EsclavoSensor.c,107 :: 		case 1:
L_interrupt18:
;EsclavoSensor.c,108 :: 		numBytesSPI = 0x04;
0x0059	0x3004      	MOVLW      4
0x005A	0x00B2      	MOVWF      _numBytesSPI
;EsclavoSensor.c,109 :: 		SSPBUF = numBytesSPI;
0x005B	0x3004      	MOVLW      4
0x005C	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,110 :: 		break;
0x005D	0x286A      	GOTO       L_interrupt16
;EsclavoSensor.c,111 :: 		default:
L_interrupt19:
;EsclavoSensor.c,112 :: 		SSPBUF = 0x01;                     //Si solicita leer un registro inexixtente devuelve una longitud de un solo byte para mandar el mensaje de error
0x005E	0x3001      	MOVLW      1
0x005F	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,113 :: 		}
0x0060	0x286A      	GOTO       L_interrupt16
L_interrupt15:
0x0061	0x0836      	MOVF       _registro, 0
0x0062	0x3A00      	XORLW      0
0x0063	0x1903      	BTFSC      STATUS, 2
0x0064	0x2854      	GOTO       L_interrupt17
0x0065	0x0836      	MOVF       _registro, 0
0x0066	0x3A01      	XORLW      1
0x0067	0x1903      	BTFSC      STATUS, 2
0x0068	0x2859      	GOTO       L_interrupt18
0x0069	0x285E      	GOTO       L_interrupt19
L_interrupt16:
;EsclavoSensor.c,114 :: 		}
L_interrupt14:
;EsclavoSensor.c,115 :: 		if (buffer==0xB1){                                //Si detecta el delimitador de final de trama:
0x006A	0x0837      	MOVF       _buffer, 0
0x006B	0x3AB1      	XORLW      177
0x006C	0x1D03      	BTFSS      STATUS, 2
0x006D	0x2874      	GOTO       L_interrupt20
;EsclavoSensor.c,116 :: 		banPet = 1;                                    //Activa la bandera de peticion
0x006E	0x3001      	MOVLW      1
0x006F	0x00B8      	MOVWF      _banPet
;EsclavoSensor.c,117 :: 		banMed = 0;                                    //Limpia la bandera de medicion
0x0070	0x01B5      	CLRF       _banMed
;EsclavoSensor.c,118 :: 		banResp = 0;                                   //Limpia la bandera de peticion. **Esto parece no ser necesario pero quiero asegurarme de que no entre al siguiente if sin antes pasar por el bucle
0x0071	0x01BB      	CLRF       _banResp
;EsclavoSensor.c,119 :: 		SSPBUF = 0xC0;                                 //Escribe el buffer el primer valor que se va a embiar cuando se embie la trama de respuesta
0x0072	0x30C0      	MOVLW      192
0x0073	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,120 :: 		}
L_interrupt20:
;EsclavoSensor.c,123 :: 		if (banResp==1){                                  //Verifica que la bandera de respuesta este activa
0x0074	0x083B      	MOVF       _banResp, 0
0x0075	0x3A01      	XORLW      1
0x0076	0x1D03      	BTFSS      STATUS, 2
0x0077	0x2882      	GOTO       L_interrupt21
;EsclavoSensor.c,124 :: 		if (i<numBytesSPI){
0x0078	0x0832      	MOVF       _numBytesSPI, 0
0x0079	0x023C      	SUBWF      _i, 0
0x007A	0x1803      	BTFSC      STATUS, 0
0x007B	0x2882      	GOTO       L_interrupt22
;EsclavoSensor.c,125 :: 		SSPBUF = resSPI[i];
0x007C	0x083C      	MOVF       _i, 0
0x007D	0x3E23      	ADDLW      _resSPI
0x007E	0x0084      	MOVWF      FSR
0x007F	0x0800      	MOVF       INDF, 0
0x0080	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,126 :: 		i++;
0x0081	0x0ABC      	INCF       _i, 1
;EsclavoSensor.c,127 :: 		}
L_interrupt22:
;EsclavoSensor.c,128 :: 		}
L_interrupt21:
;EsclavoSensor.c,131 :: 		}
L_interrupt1:
;EsclavoSensor.c,133 :: 		}
L_end_interrupt:
L__interrupt32:
0x0082	0x0821      	MOVF       33, 0
0x0083	0x00F0      	MOVWF      R0
0x0084	0x0820      	MOVF       32, 0
0x0085	0x00FD      	MOVWF      R13
0x0086	0x083E      	MOVF       ___savePCLATH, 0
0x0087	0x008A      	MOVWF      PCLATH
0x0088	0x0E3D      	SWAPF      ___saveSTATUS, 0
0x0089	0x0083      	MOVWF      STATUS
0x008A	0x0EFF      	SWAPF      R15, 1
0x008B	0x0E7F      	SWAPF      R15, 0
0x008C	0x0009      	RETFIE
; end of _interrupt
_SPI1_Init_Advanced:
;__Lib_SPI_c345.c,31 :: 		
;__Lib_SPI_c345.c,33 :: 		
0x008D	0x1683      	BSF        STATUS, 5
0x008E	0x1303      	BCF        STATUS, 6
0x008F	0x1287      	BCF        TRISC5_bit, BitPos(TRISC5_bit+0)
;__Lib_SPI_c345.c,34 :: 		
0x0090	0x1283      	BCF        STATUS, 5
0x0091	0x083F      	MOVF       FARG_SPI1_Init_Advanced_master, 0
0x0092	0x3A04      	XORLW      4
0x0093	0x1D03      	BTFSS      STATUS, 2
0x0094	0x2898      	GOTO       L_SPI1_Init_Advanced0
0x0095	0x1683      	BSF        STATUS, 5
0x0096	0x1587      	BSF        TRISC3_bit, BitPos(TRISC3_bit+0)
0x0097	0x289A      	GOTO       L_SPI1_Init_Advanced1
L_SPI1_Init_Advanced0:
0x0098	0x1683      	BSF        STATUS, 5
;__Lib_SPI_c345.c,35 :: 		
0x0099	0x1187      	BCF        TRISC3_bit, BitPos(TRISC3_bit+0)
L_SPI1_Init_Advanced1:
;__Lib_SPI_c345.c,36 :: 		
0x009A	0x1607      	BSF        TRISC4_bit, BitPos(TRISC4_bit+0)
;__Lib_SPI_c345.c,38 :: 		
0x009B	0x1283      	BCF        STATUS, 5
0x009C	0x0194      	CLRF       SSPCON
;__Lib_SPI_c345.c,39 :: 		
0x009D	0x083F      	MOVF       FARG_SPI1_Init_Advanced_master, 0
0x009E	0x0494      	IORWF      SSPCON, 1
;__Lib_SPI_c345.c,40 :: 		
0x009F	0x0841      	MOVF       FARG_SPI1_Init_Advanced_clock_idle, 0
0x00A0	0x0494      	IORWF      SSPCON, 1
;__Lib_SPI_c345.c,41 :: 		
0x00A1	0x0840      	MOVF       FARG_SPI1_Init_Advanced_data_sample, 0
0x00A2	0x1683      	BSF        STATUS, 5
0x00A3	0x0494      	IORWF      SSPSTAT, 1
;__Lib_SPI_c345.c,43 :: 		
0x00A4	0x1283      	BCF        STATUS, 5
0x00A5	0x0841      	MOVF       FARG_SPI1_Init_Advanced_clock_idle, 0
0x00A6	0x1903      	BTFSC      STATUS, 2
0x00A7	0x28AF      	GOTO       L_SPI1_Init_Advanced2
;__Lib_SPI_c345.c,44 :: 		
0x00A8	0x0842      	MOVF       FARG_SPI1_Init_Advanced_transmit_edge, 0
0x00A9	0x3A00      	XORLW      0
0x00AA	0x1D03      	BTFSS      STATUS, 2
0x00AB	0x28AE      	GOTO       L_SPI1_Init_Advanced3
;__Lib_SPI_c345.c,45 :: 		
0x00AC	0x1683      	BSF        STATUS, 5
0x00AD	0x1714      	BSF        SSPSTAT, 6
L_SPI1_Init_Advanced3:
;__Lib_SPI_c345.c,46 :: 		
0x00AE	0x28B5      	GOTO       L_SPI1_Init_Advanced4
L_SPI1_Init_Advanced2:
;__Lib_SPI_c345.c,48 :: 		
0x00AF	0x1283      	BCF        STATUS, 5
0x00B0	0x0842      	MOVF       FARG_SPI1_Init_Advanced_transmit_edge, 0
0x00B1	0x1903      	BTFSC      STATUS, 2
0x00B2	0x28B5      	GOTO       L_SPI1_Init_Advanced5
;__Lib_SPI_c345.c,49 :: 		
0x00B3	0x1683      	BSF        STATUS, 5
0x00B4	0x1714      	BSF        SSPSTAT, 6
L_SPI1_Init_Advanced5:
;__Lib_SPI_c345.c,50 :: 		
L_SPI1_Init_Advanced4:
;__Lib_SPI_c345.c,51 :: 		
0x00B5	0x1283      	BCF        STATUS, 5
0x00B6	0x1694      	BSF        SSPCON, 5
;__Lib_SPI_c345.c,52 :: 		
L_end_SPI1_Init_Advanced:
0x00B7	0x0008      	RETURN
; end of _SPI1_Init_Advanced
_ConfiguracionPrincipal:
;EsclavoSensor.c,37 :: 		void ConfiguracionPrincipal(){
;EsclavoSensor.c,39 :: 		TRISC2_bit = 0;
0x00B8	0x1683      	BSF        STATUS, 5
0x00B9	0x1303      	BCF        STATUS, 6
0x00BA	0x1107      	BCF        TRISC2_bit, BitPos(TRISC2_bit+0)
;EsclavoSensor.c,40 :: 		TRISB3_bit = 0;
0x00BB	0x1186      	BCF        TRISB3_bit, BitPos(TRISB3_bit+0)
;EsclavoSensor.c,41 :: 		TRISA5_bit = 1;
0x00BC	0x1685      	BSF        TRISA5_bit, BitPos(TRISA5_bit+0)
;EsclavoSensor.c,43 :: 		INTCON.GIE = 1;                                    //Habilita las interrupciones globales
0x00BD	0x178B      	BSF        INTCON, 7
;EsclavoSensor.c,44 :: 		INTCON.PEIE = 1;                                   //Habilita las interrupciones perifericas
0x00BE	0x170B      	BSF        INTCON, 6
;EsclavoSensor.c,47 :: 		SPI1_Init_Advanced(_SPI_SLAVE_SS_ENABLE,_SPI_DATA_SAMPLE_MIDDLE,_SPI_CLK_IDLE_HIGH,_SPI_LOW_2_HIGH);
0x00BF	0x3004      	MOVLW      4
0x00C0	0x1283      	BCF        STATUS, 5
0x00C1	0x00BF      	MOVWF      FARG_SPI1_Init_Advanced_master
0x00C2	0x01C0      	CLRF       FARG_SPI1_Init_Advanced_data_sample
0x00C3	0x3010      	MOVLW      16
0x00C4	0x00C1      	MOVWF      FARG_SPI1_Init_Advanced_clock_idle
0x00C5	0x3001      	MOVLW      1
0x00C6	0x00C2      	MOVWF      FARG_SPI1_Init_Advanced_transmit_edge
0x00C7	0x208D      	CALL       _SPI1_Init_Advanced
;EsclavoSensor.c,48 :: 		PIE1.SSPIE = 1;                                  //Habilita la interrupcion por SPI
0x00C8	0x1683      	BSF        STATUS, 5
0x00C9	0x158C      	BSF        PIE1, 3
;EsclavoSensor.c,50 :: 		Delay_ms(100);                                     //Espera hasta que se estabilicen los cambios
0x00CA	0x3002      	MOVLW      2
0x00CB	0x00FB      	MOVWF      R11
0x00CC	0x3004      	MOVLW      4
0x00CD	0x00FC      	MOVWF      R12
0x00CE	0x30BA      	MOVLW      186
0x00CF	0x00FD      	MOVWF      R13
L_ConfiguracionPrincipal0:
0x00D0	0x0BFD      	DECFSZ     R13, 1
0x00D1	0x28D0      	GOTO       L_ConfiguracionPrincipal0
0x00D2	0x0BFC      	DECFSZ     R12, 1
0x00D3	0x28D0      	GOTO       L_ConfiguracionPrincipal0
0x00D4	0x0BFB      	DECFSZ     R11, 1
0x00D5	0x28D0      	GOTO       L_ConfiguracionPrincipal0
0x00D6	0x0000      	NOP
;EsclavoSensor.c,52 :: 		}
L_end_ConfiguracionPrincipal:
0x00D7	0x0008      	RETURN
; end of _ConfiguracionPrincipal
_main:
;EsclavoSensor.c,136 :: 		void main() {
;EsclavoSensor.c,138 :: 		ConfiguracionPrincipal();
0x00D8	0x20B8      	CALL       _ConfiguracionPrincipal
;EsclavoSensor.c,139 :: 		ECINT = 1;                                       //Se inicializa el pin ECINT en alto para evitar que envie un pulso al iniciar (probablemente ocacionado por el CCP)
0x00D9	0x1283      	BCF        STATUS, 5
0x00DA	0x1507      	BSF        RC2_bit, BitPos(RC2_bit+0)
;EsclavoSensor.c,140 :: 		AUX = 0;
0x00DB	0x1186      	BCF        RB3_bit, BitPos(RB3_bit+0)
;EsclavoSensor.c,141 :: 		i = 0;
0x00DC	0x01BC      	CLRF       _i
;EsclavoSensor.c,142 :: 		x = 0;
0x00DD	0x01B9      	CLRF       _x
;EsclavoSensor.c,143 :: 		banPet = 0;
0x00DE	0x01B8      	CLRF       _banPet
;EsclavoSensor.c,144 :: 		banResp = 0;
0x00DF	0x01BB      	CLRF       _banResp
;EsclavoSensor.c,145 :: 		banSPI = 0;
0x00E0	0x01BA      	CLRF       _banSPI
;EsclavoSensor.c,146 :: 		banMed = 0;
0x00E1	0x01B5      	CLRF       _banMed
;EsclavoSensor.c,147 :: 		banId = 0;
0x00E2	0x01A2      	CLRF       _banId
;EsclavoSensor.c,150 :: 		SSPBUF = 0xA0;                                   //Carga un valor inicial en el buffer
0x00E3	0x30A0      	MOVLW      160
0x00E4	0x0093      	MOVWF      SSPBUF
;EsclavoSensor.c,153 :: 		while(1){
L_main23:
;EsclavoSensor.c,155 :: 		if (banPet==1){                             //Verifica si se ha recibido una solicitud de medicion
0x00E5	0x0838      	MOVF       _banPet, 0
0x00E6	0x3A01      	XORLW      1
0x00E7	0x1D03      	BTFSS      STATUS, 2
0x00E8	0x290F      	GOTO       L_main25
;EsclavoSensor.c,157 :: 		Delay_ms(1000);                          //Simula un tiempo de procesamiento de la peticion
0x00E9	0x300B      	MOVLW      11
0x00EA	0x00FB      	MOVWF      R11
0x00EB	0x3026      	MOVLW      38
0x00EC	0x00FC      	MOVWF      R12
0x00ED	0x305D      	MOVLW      93
0x00EE	0x00FD      	MOVWF      R13
L_main26:
0x00EF	0x0BFD      	DECFSZ     R13, 1
0x00F0	0x28EF      	GOTO       L_main26
0x00F1	0x0BFC      	DECFSZ     R12, 1
0x00F2	0x28EF      	GOTO       L_main26
0x00F3	0x0BFB      	DECFSZ     R11, 1
0x00F4	0x28EF      	GOTO       L_main26
0x00F5	0x0000      	NOP
0x00F6	0x0000      	NOP
;EsclavoSensor.c,158 :: 		resSPI[0] = 0x83;                        //Llena el vector de respuesta con un valor de ejemplo (float 27.07)
0x00F7	0x3083      	MOVLW      131
0x00F8	0x00A3      	MOVWF      _resSPI
;EsclavoSensor.c,159 :: 		resSPI[1] = 0x58;
0x00F9	0x3058      	MOVLW      88
0x00FA	0x00A4      	MOVWF      _resSPI+1
;EsclavoSensor.c,160 :: 		resSPI[2] = 0x8F;
0x00FB	0x308F      	MOVLW      143
0x00FC	0x00A5      	MOVWF      _resSPI+2
;EsclavoSensor.c,161 :: 		resSPI[3] = 0x5C;
0x00FD	0x305C      	MOVLW      92
0x00FE	0x00A6      	MOVWF      _resSPI+3
;EsclavoSensor.c,162 :: 		i=0;
0x00FF	0x01BC      	CLRF       _i
;EsclavoSensor.c,164 :: 		ECINT = 0;                               //Genera un pulso en bajo para producir una interrupcion externa en el Master
0x0100	0x1107      	BCF        RC2_bit, BitPos(RC2_bit+0)
;EsclavoSensor.c,165 :: 		Delay_ms(1);
0x0101	0x3003      	MOVLW      3
0x0102	0x00FC      	MOVWF      R12
0x0103	0x3097      	MOVLW      151
0x0104	0x00FD      	MOVWF      R13
L_main27:
0x0105	0x0BFD      	DECFSZ     R13, 1
0x0106	0x2905      	GOTO       L_main27
0x0107	0x0BFC      	DECFSZ     R12, 1
0x0108	0x2905      	GOTO       L_main27
0x0109	0x0000      	NOP
0x010A	0x0000      	NOP
;EsclavoSensor.c,166 :: 		ECINT = 1;
0x010B	0x1507      	BSF        RC2_bit, BitPos(RC2_bit+0)
;EsclavoSensor.c,167 :: 		banPet = 0;                              //Limpia la bandera de peticion SPI
0x010C	0x01B8      	CLRF       _banPet
;EsclavoSensor.c,168 :: 		banResp = 1;                             //Activa la bandera de respuesta SPI
0x010D	0x3001      	MOVLW      1
0x010E	0x00BB      	MOVWF      _banResp
;EsclavoSensor.c,170 :: 		}
L_main25:
;EsclavoSensor.c,172 :: 		}
0x010F	0x28E5      	GOTO       L_main23
;EsclavoSensor.c,174 :: 		}
L_end_main:
0x0110	0x2910      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004     [137]    _interrupt
0x008D      [43]    _SPI1_Init_Advanced
0x00B8      [32]    _ConfiguracionPrincipal
0x00D8      [57]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0006       [0]    AUX
0x0006       [0]    RB3_bit
0x0007       [0]    ECINT
0x0007       [0]    RC2_bit
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000C       [1]    PIR1
0x0013       [1]    SSPBUF
0x0014       [1]    SSPCON
0x0022       [1]    _banId
0x0023      [15]    _resSPI
0x0032       [1]    _numBytesSPI
0x0033       [2]    ___DoICPAddr
0x0035       [1]    _banMed
0x0036       [1]    _registro
0x0037       [1]    _buffer
0x0038       [1]    _banPet
0x0039       [1]    _x
0x003A       [1]    _banSPI
0x003B       [1]    _banResp
0x003C       [1]    _i
0x003D       [1]    ___saveSTATUS
0x003E       [1]    ___savePCLATH
0x003F       [1]    FARG_SPI1_Init_Advanced_master
0x0040       [1]    FARG_SPI1_Init_Advanced_data_sample
0x0041       [1]    FARG_SPI1_Init_Advanced_clock_idle
0x0042       [1]    FARG_SPI1_Init_Advanced_transmit_edge
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0085       [0]    TRISA5_bit
0x0086       [0]    TRISB3_bit
0x0087       [0]    TRISC5_bit
0x0087       [0]    TRISC4_bit
0x0087       [0]    TRISC3_bit
0x0087       [0]    TRISC2_bit
0x008C       [1]    PIE1
0x0094       [1]    SSPSTAT
